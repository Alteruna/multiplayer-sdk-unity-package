<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Alteruna</name>
    </assembly>
    <members>
        <member name="T:Alteruna.API.GameClientApi.SingleRoomServer">
            <summary>
            Server for a project which is in Single Room mode.
            </summary>
        </member>
        <member name="P:Alteruna.API.GameClientApi.SingleRoomServer.MaxUsers">
            <summary>
            The maximum number of users in the main room of the server.
            <br/>
            </summary>
        </member>
        <member name="P:Alteruna.API.GameClientApi.SingleRoomServer.HasPinCode">
            <summary>
            Whether or not a pin code is required to join the server.
            <br/>
            </summary>
        </member>
        <member name="P:Alteruna.API.GameClientApi.SingleRoomServer.CurrentUsers">
            <summary>
            The number of users in the main room of the server.
            </summary>
        </member>
        <member name="P:Alteruna.API.GameClientApi.StartManagedSingleRoomServerInput.PreferredRegion">
            <summary>
            Preferred region for the new server. Depending on availability and the project plan, this region may or may not be chosen.
            <br/>
            </summary>
        </member>
        <member name="P:Alteruna.API.GameClientApi.StartManagedSingleRoomServerInput.State">
            <summary>
            Defaults to `0`.
            </summary>
        </member>
        <member name="P:Alteruna.API.GameClientApi.StartManagedSingleRoomServerInput.SceneId">
            <summary>
            Defaults to `-1`.
            </summary>
        </member>
        <member name="P:Alteruna.API.GameClientApi.SingleRoomServerRoomSettingsInput.MaxUsers">
            <summary>
            The maximum number of users in the main room of the server.
            <br/>
            </summary>
        </member>
        <member name="P:Alteruna.API.GameClientApi.SingleRoomServerRoomSettingsInput.PinCode">
            <summary>
            Use `0` to indicate no PIN code. Any other number sets a pin code for the room.
            <br/>
            </summary>
        </member>
        <member name="M:Alteruna.API.GameClientApi.Client.GetProject(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>
            Get public project info
            </summary>
            <returns>The project object.</returns>
            <exception cref="T:Alteruna.API.GameClientApi.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Alteruna.API.GameClientApi.Client.GetProducts(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>
            Get all products.
            </summary>
            <returns>All products.</returns>
            <exception cref="T:Alteruna.API.GameClientApi.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Alteruna.API.GameClientApi.Client.GetProductCheckoutLink(System.Guid,Alteruna.API.GameClientApi.GetProductCheckoutLinkInput,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>
            Get a checkout link for the given product.
            </summary>
            <returns>Checkout link created</returns>
            <exception cref="T:Alteruna.API.GameClientApi.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Alteruna.API.GameClientApi.Client.GetSingleRoomServers(Alteruna.API.GameClientApi.Body,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>
            Get Single Room Game Servers
            </summary>
            <remarks>
            List game servers for a project in Single Room mode. Does different
            <br/>things depending on the `displayName` property of the request body:
            <br/>
            <br/>- If `displayName` is omitted, all non-private servers are returned.
            <br/>- If `displayName` is included, all servers with an exactly
            <br/>(case-sensitive) matching display name are returned, regardless of them
            <br/>being private or non-private.
            <br/>
            <br/>This operation only works if the project is in Single Room mode.
            </remarks>
            <returns>All servers.</returns>
            <exception cref="T:Alteruna.API.GameClientApi.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Alteruna.API.GameClientApi.Client.RegisterUnmanagedSingleRoomServer(Alteruna.API.GameClientApi.RegisterUnmanagedSingleRoomServerInput,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>
            Register Unmanaged Single Room Server
            </summary>
            <remarks>
            Register a new unmanaged single room server. Only works if the project is in Single Room mode. Returns a **secret** key (`unmanagedSingleRoomServerKey`) which can later be used to update and deregister the server.
            </remarks>
            <returns>New server registered.</returns>
            <exception cref="T:Alteruna.API.GameClientApi.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Alteruna.API.GameClientApi.Client.UpdateUnmanagedSingleRoomServer(System.String,Alteruna.API.GameClientApi.UpdateUnmanagedSingleRoomServerInput,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>
            Update Unmanaged Single Room Server
            </summary>
            <remarks>
            Updates an unmanaged single room server. This operation is also used as a keep-alive mechanism for running unmanaged single room servers. The unmanaged single room server is identified using the **secret** key obtained from the `registerUnmanagedSingleRoomServer` operation. Only works if the project is in Single Room mode.
            </remarks>
            <returns>Server updated.</returns>
            <exception cref="T:Alteruna.API.GameClientApi.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Alteruna.API.GameClientApi.Client.DeregisterUnmanagedSingleRoomServer(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>
            Deregister Unmanaged Single Room Server
            </summary>
            <remarks>
            Deregisters an unmanaged single room server. Unmanaged single room servers that fail their keep-alive check are deregistered automatically. Only works if the project is in Single Room mode.
            </remarks>
            <returns>Server deregistered.</returns>
            <exception cref="T:Alteruna.API.GameClientApi.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Alteruna.API.GameClientApi.Client.StartManagedMultiRoomServer(Alteruna.API.GameClientApi.StartManagedMultiRoomServerInput,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>
            Start Managed Multi Room Server
            </summary>
            <remarks>
            Start the managed multi room server for a project in Single Server mode (unless it is already running). Only works if the project is in Single Server mode.
            </remarks>
            <returns>Server running or started.</returns>
            <exception cref="T:Alteruna.API.GameClientApi.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Alteruna.API.GameClientApi.Client.StartManagedSingleRoomServer(Alteruna.API.GameClientApi.StartManagedSingleRoomServerInput,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>
            Start Managed Single Room Server
            </summary>
            <remarks>
            Start a managed single room server for a project in Single Room mode. Only works if the project is in Single Room mode.
            </remarks>
            <returns>Server started.</returns>
            <exception cref="T:Alteruna.API.GameClientApi.ApiException">A server side error occurred.</exception>
        </member>
        <member name="T:Alteruna.API.GameClientApi.ProjectServerMode">
            <summary>
            The server mode of a project. Single Server mode means there is a single server to connect to. Single Room mode means there are multiple servers, each with a single main room, and this API can be used to list them.
            <br/>
            </summary>
        </member>
        <member name="T:Alteruna.API.GameClientApi.ProjectTransportMode">
            <summary>
            The transport mode of a project. This is either default (udp) or tcp.
            <br/>
            </summary>
        </member>
        <member name="P:Alteruna.API.GameClientApi.Project.WsEnabled">
            <summary>
            Whether or not WebSocket communication is enabled for this project. Only applicable if `transportMode` is set to `'tcp'` (and will be `false` otherwise).
            <br/>
            </summary>
        </member>
        <member name="P:Alteruna.API.GameClientApi.Product.Id">
            <summary>
            Identifier for the product. Unique across all Alteruna projects.
            </summary>
        </member>
        <member name="P:Alteruna.API.GameClientApi.Product.Name">
            <summary>
            The name of the product.
            </summary>
        </member>
        <member name="P:Alteruna.API.GameClientApi.Product.PriceUsdCents">
            <summary>
            The price of the product in USD cents.
            <br/>
            </summary>
        </member>
        <member name="P:Alteruna.API.GameClientApi.StartManagedMultiRoomServerInput.PreferredRegion">
            <summary>
            Preferred region for the server to start in. Depending on server availability and the project plan, this region may or may not be chosen. If the server is already running, this option has no effect.
            <br/>
            </summary>
        </member>
        <member name="T:Alteruna.API.GameClientApi.ManagedMultiRoomServer">
            <summary>
            Server for a project which is in Single Server mode.
            </summary>
        </member>
        <member name="P:Alteruna.API.GameClientApi.UpdateUnmanagedSingleRoomServerInput.CurrentServerUsers">
            <summary>
            Number of players across all rooms on the server. Used to track statistics.
            <br/>
            </summary>
        </member>
        <member name="P:Alteruna.API.GameClientApi.Response4.UnmanagedSingleRoomServerKey">
            <summary>
            **Secret** key used to update and deregister the registered server.
            <br/>
            </summary>
        </member>
        <member name="T:Alteruna.API.ApiException">
            <summary>
            Represents an exception that occurs during API calls.
            </summary>
        </member>
        <member name="P:Alteruna.API.ApiException.StatusCode">
            <summary>
            Gets the HTTP status code associated with the exception.
            </summary>
        </member>
        <member name="P:Alteruna.API.ApiException.Response">
            <summary>
            Gets the response content associated with the exception.
            </summary>
        </member>
        <member name="P:Alteruna.API.ApiException.Headers">
            <summary>
            Gets the headers associated with the exception.
            </summary>
        </member>
        <member name="M:Alteruna.API.ApiException.#ctor(System.String,System.Int32,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}},System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alteruna.API.ApiException"/> class.
            </summary>
            <param name="message">The error message.</param>
            <param name="statusCode">The HTTP status code.</param>
            <param name="response">The response content.</param>
            <param name="headers">The headers associated with the response.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alteruna.API.ApiException.#ctor(System.String,System.Int32,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alteruna.API.ApiException"/> class.
            </summary>
            <param name="message">The error message.</param>
            <param name="statusCode">The HTTP status code.</param>
            <param name="response">The response content.</param>
            <param name="headers">The headers associated with the response in a simplified format.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alteruna.API.ApiException.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Alteruna.API.ApiException"/> class.
            </summary>
            <param name="message">The error message.</param>
            <param name="statusCode">The HTTP status code.</param>
            <param name="response">The response content.</param>
        </member>
        <member name="M:Alteruna.API.ApiException.HeaderConversion(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Converts headers from a dictionary of strings to a dictionary of string lists.
            </summary>
            <param name="headers">The headers to convert.</param>
            <returns>A dictionary with headers as lists of strings.</returns>
        </member>
        <member name="M:Alteruna.API.ApiException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>A string representation of the current exception.</returns>
        </member>
        <member name="T:Alteruna.API.ApiException`1">
            <summary>
            Represents an API exception that includes a result object.
            </summary>
            <typeparam name="TResult">The type of the result object.</typeparam>
        </member>
        <member name="P:Alteruna.API.ApiException`1.Result">
            <summary>
            Gets the result object associated with the exception.
            </summary>
        </member>
        <member name="M:Alteruna.API.ApiException`1.#ctor(System.String,System.Int32,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}},`0,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alteruna.API.ApiException`1"/> class.
            </summary>
            <param name="message">The error message.</param>
            <param name="statusCode">The HTTP status code.</param>
            <param name="response">The response content.</param>
            <param name="headers">The headers associated with the response.</param>
            <param name="result">The result object associated with the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alteruna.API.ApiException`1.#ctor(System.String,System.Int32,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},`0,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Alteruna.API.ApiException`1"/> class.
            </summary>
            <param name="message">The error message.</param>
            <param name="statusCode">The HTTP status code.</param>
            <param name="response">The response content.</param>
            <param name="headers">The headers associated with the response in a simplified format.</param>
            <param name="result">The result object associated with the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Alteruna.API.PlayerApi.Client.GetProject(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>
            Get public project info
            </summary>
            <returns>The project object.</returns>
            <exception cref="T:Alteruna.API.PlayerApi.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Alteruna.API.PlayerApi.Client.GetProducts(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>
            Get all products.
            </summary>
            <returns>All products.</returns>
            <exception cref="T:Alteruna.API.PlayerApi.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Alteruna.API.PlayerApi.Client.GetProductCheckoutLink(System.Guid,Alteruna.API.PlayerApi.GetProductCheckoutLinkInput,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>
            Get a checkout link for the given product.
            </summary>
            <returns>Checkout link created</returns>
            <exception cref="T:Alteruna.API.PlayerApi.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Alteruna.API.PlayerApi.Client.GetSingleRoomServers(Alteruna.API.PlayerApi.Body,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>
            Get Single Room Game Servers
            </summary>
            <remarks>
            List game servers for a project in Single Room mode. Does different
            <br/>things depending on the `displayName` property of the request body:
            <br/>
            <br/>- If `displayName` is omitted, all non-private servers are returned.
            <br/>- If `displayName` is included, all servers with an exactly
            <br/>(case-sensitive) matching display name are returned, regardless of them
            <br/>being private or non-private.
            <br/>
            <br/>This operation only works if the project is in Single Room mode.
            </remarks>
            <returns>All servers.</returns>
            <exception cref="T:Alteruna.API.PlayerApi.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Alteruna.API.PlayerApi.Client.RegisterUnmanagedSingleRoomServer(Alteruna.API.PlayerApi.RegisterUnmanagedSingleRoomServerInput,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>
            Register Unmanaged Single Room Server
            </summary>
            <remarks>
            Register a new unmanaged single room server. Only works if the project is in Single Room mode. Returns a **secret** key (`unmanagedSingleRoomServerKey`) which can later be used to update and deregister the server.
            </remarks>
            <returns>New server registered.</returns>
            <exception cref="T:Alteruna.API.PlayerApi.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Alteruna.API.PlayerApi.Client.UpdateUnmanagedSingleRoomServer(System.String,Alteruna.API.PlayerApi.UpdateUnmanagedSingleRoomServerInput,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>
            Update Unmanaged Single Room Server
            </summary>
            <remarks>
            Updates an unmanaged single room server. This operation is also used as a keep-alive mechanism for running unmanaged single room servers. The unmanaged single room server is identified using the **secret** key obtained from the `registerUnmanagedSingleRoomServer` operation. Only works if the project is in Single Room mode.
            </remarks>
            <returns>Server updated.</returns>
            <exception cref="T:Alteruna.API.PlayerApi.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Alteruna.API.PlayerApi.Client.DeregisterUnmanagedSingleRoomServer(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>
            Deregister Unmanaged Single Room Server
            </summary>
            <remarks>
            Deregisters an unmanaged single room server. Unmanaged single room servers that fail their keep-alive check are deregistered automatically. Only works if the project is in Single Room mode.
            </remarks>
            <returns>Server deregistered.</returns>
            <exception cref="T:Alteruna.API.PlayerApi.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Alteruna.API.PlayerApi.Client.StartManagedMultiRoomServer(Alteruna.API.PlayerApi.StartManagedMultiRoomServerInput,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>
            Start Managed Multi Room Server
            </summary>
            <remarks>
            Start the managed multi room server for a project in Single Server mode (unless it is already running). Only works if the project is in Single Server mode.
            </remarks>
            <returns>Server running or started.</returns>
            <exception cref="T:Alteruna.API.PlayerApi.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Alteruna.API.PlayerApi.Client.StartManagedSingleRoomServer(Alteruna.API.PlayerApi.StartManagedSingleRoomServerInput,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>
            Start Managed Single Room Server
            </summary>
            <remarks>
            Start a managed single room server for a project in Single Room mode. Only works if the project is in Single Room mode.
            </remarks>
            <returns>Server started.</returns>
            <exception cref="T:Alteruna.API.PlayerApi.ApiException">A server side error occurred.</exception>
        </member>
        <member name="T:Alteruna.API.PlayerApi.ProjectServerMode">
            <summary>
            The server mode of a project. Single Server mode means there is a single server to connect to. Single Room mode means there are multiple servers, each with a single main room, and this API can be used to list them.
            <br/>
            </summary>
        </member>
        <member name="T:Alteruna.API.PlayerApi.ProjectTransportMode">
            <summary>
            The transport mode of a project. This is either default (udp) or tcp.
            <br/>
            </summary>
        </member>
        <member name="P:Alteruna.API.PlayerApi.Project.WsEnabled">
            <summary>
            Whether or not WebSocket communication is enabled for this project. Only applicable if `transportMode` is set to `'tcp'` (and will be `false` otherwise).
            <br/>
            </summary>
        </member>
        <member name="P:Alteruna.API.PlayerApi.Product.Id">
            <summary>
            Identifier for the product. Unique across all Alteruna projects.
            </summary>
        </member>
        <member name="P:Alteruna.API.PlayerApi.Product.Name">
            <summary>
            The name of the product.
            </summary>
        </member>
        <member name="P:Alteruna.API.PlayerApi.Product.PriceUsdCents">
            <summary>
            The price of the product in USD cents.
            <br/>
            </summary>
        </member>
        <member name="P:Alteruna.API.PlayerApi.StartManagedSingleRoomServerInput.PreferredRegion">
            <summary>
            Preferred region for the new server. Depending on availability and the project plan, this region may or may not be chosen.
            <br/>
            </summary>
        </member>
        <member name="P:Alteruna.API.PlayerApi.StartManagedSingleRoomServerInput.State">
            <summary>
            Defaults to `0`.
            </summary>
        </member>
        <member name="P:Alteruna.API.PlayerApi.StartManagedSingleRoomServerInput.SceneId">
            <summary>
            Defaults to `-1`.
            </summary>
        </member>
        <member name="P:Alteruna.API.PlayerApi.StartManagedMultiRoomServerInput.PreferredRegion">
            <summary>
            Preferred region for the server to start in. Depending on server availability and the project plan, this region may or may not be chosen. If the server is already running, this option has no effect.
            <br/>
            </summary>
        </member>
        <member name="P:Alteruna.API.PlayerApi.SingleRoomServerRoomSettingsInput.MaxUsers">
            <summary>
            The maximum number of users in the main room of the server.
            <br/>
            </summary>
        </member>
        <member name="P:Alteruna.API.PlayerApi.SingleRoomServerRoomSettingsInput.PinCode">
            <summary>
            Use `0` to indicate no PIN code. Any other number sets a pin code for the room.
            <br/>
            </summary>
        </member>
        <member name="T:Alteruna.API.PlayerApi.SingleRoomServer">
            <summary>
            Server for a project which is in Single Room mode.
            </summary>
        </member>
        <member name="P:Alteruna.API.PlayerApi.SingleRoomServer.MaxUsers">
            <summary>
            The maximum number of users in the main room of the server.
            <br/>
            </summary>
        </member>
        <member name="P:Alteruna.API.PlayerApi.SingleRoomServer.HasPinCode">
            <summary>
            Whether or not a pin code is required to join the server.
            <br/>
            </summary>
        </member>
        <member name="P:Alteruna.API.PlayerApi.SingleRoomServer.CurrentUsers">
            <summary>
            The number of users in the main room of the server.
            </summary>
        </member>
        <member name="T:Alteruna.API.PlayerApi.ManagedMultiRoomServer">
            <summary>
            Server for a project which is in Single Server mode.
            </summary>
        </member>
        <member name="P:Alteruna.API.PlayerApi.UpdateUnmanagedSingleRoomServerInput.CurrentServerUsers">
            <summary>
            Number of players across all rooms on the server. Used to track statistics.
            <br/>
            </summary>
        </member>
        <member name="P:Alteruna.API.PlayerApi.Response4.UnmanagedSingleRoomServerKey">
            <summary>
            **Secret** key used to update and deregister the registered server.
            <br/>
            </summary>
        </member>
        <member name="T:Alteruna.Exceptions.AlterunaException">
            <summary>
            Represents exceptions that occur within the Alteruna framework.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.ConnectionRequest.Accept">
            <summary>
            Accept connection and get new NetPeer as result
            </summary>
            <returns>Connected NetPeer</returns>
        </member>
        <member name="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.UnconnectedMessageType">
            <summary>
            Type of message that you receive in OnNetworkReceiveUnconnected event
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DisconnectReason">
            <summary>
            Disconnect reason that you receive in OnPeerDisconnected event
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DisconnectInfo">
            <summary>
            Additional information about disconnection
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DisconnectInfo.Reason">
            <summary>
            Additional info why peer disconnected
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DisconnectInfo.SocketErrorCode">
            <summary>
            Error code (if reason is SocketSendError or SocketReceiveError)
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DisconnectInfo.AdditionalData">
            <summary>
            Additional data that can be accessed (only if reason is RemoteConnectionClose)
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.INetEventListener.OnPeerConnected(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer)">
            <summary>
            New remote peer connected to host, or client connected to remote host
            </summary>
            <param name="peer">Connected peer object</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.INetEventListener.OnPeerDisconnected(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DisconnectInfo)">
            <summary>
            Peer disconnected
            </summary>
            <param name="peer">disconnected peer</param>
            <param name="disconnectInfo">additional info about reason, errorCode or data received with disconnect message</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.INetEventListener.OnNetworkError(System.Net.IPEndPoint,System.Net.Sockets.SocketError)">
            <summary>
            Network error (on send or receive)
            </summary>
            <param name="endPoint">From endPoint (can be null)</param>
            <param name="socketError">Socket error</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.INetEventListener.OnNetworkReceive(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPacketReader,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod)">
            <summary>
            Received some data
            </summary>
            <param name="peer">From peer</param>
            <param name="reader">DataReader containing all received data</param>
            <param name="deliveryMethod">Type of received packet</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.INetEventListener.OnNetworkReceiveUnconnected(System.Net.IPEndPoint,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPacketReader,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.UnconnectedMessageType)">
            <summary>
            Received unconnected message
            </summary>
            <param name="remoteEndPoint">From address (IP and Port)</param>
            <param name="reader">Message data</param>
            <param name="messageType">Message type (simple, discovery request or response)</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.INetEventListener.OnNetworkLatencyUpdate(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer,System.Int32)">
            <summary>
            Latency information updated
            </summary>
            <param name="peer">Peer with updated latency</param>
            <param name="latency">latency value in milliseconds</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.INetEventListener.OnConnectionRequest(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.ConnectionRequest)">
            <summary>
            On peer connection requested
            </summary>
            <param name="request">Request information (EndPoint, internal id, additional data)</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.IDeliveryEventListener.OnMessageDelivered(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer,System.Object)">
            <summary>
            On reliable message delivered
            </summary>
            <param name="peer"></param>
            <param name="userData"></param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.INtpEventListener.OnNtpResponse(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket)">
            <summary>
            Ntp response
            </summary>
            <param name="packet"></param>
        </member>
        <member name="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NatPunchModule">
            <summary>
            Module for UDP NAT Hole punching operations. Can be accessed from NetManager
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod">
            <summary>
            Sending method type
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod.Unreliable">
            <summary>
            Unreliable. Packets can be dropped, can be duplicated, can arrive without order.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod.ReliableUnordered">
            <summary>
            Reliable. Packets won't be dropped, won't be duplicated, can arrive without order.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod.Sequenced">
            <summary>
            Unreliable. Packets can be dropped, won't be duplicated, will arrive in order.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod.ReliableOrdered">
            <summary>
            Reliable and ordered. Packets won't be dropped, won't be duplicated, will arrive in order.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod.ReliableSequenced">
            <summary>
            Reliable only last packet. Packets can be dropped (except the last one), won't be duplicated, will arrive in order.
            Cannot be fragmented
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetConstants">
            <summary>
            Network constants. Can be tuned from sources for your purposes.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.INetLogger">
            <summary>
            Interface to implement for your own logger
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetDebug">
            <summary>
            Static class for defining your own LiteNetLib logger instead of Console.WriteLine
            or Debug.Log if compiled with UNITY flag
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager">
            <summary>
            Main class for all network operations. Can be used as client and/or server.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.UnconnectedMessagesEnabled">
            <summary>
            Enable messages receiving without connection. (with SendUnconnectedMessage method)
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.NatPunchEnabled">
            <summary>
            Enable nat punch messages
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.UpdateTime">
            <summary>
            Library logic update and send period in milliseconds
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.PingInterval">
            <summary>
            Interval for latency detection and checking connection
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.DisconnectTimeout">
            <summary>
            If NetManager doesn't receive any packet from remote peer during this time then connection will be closed
            (including library internal keepalive packets)
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.SimulatePacketLoss">
            <summary>
            Simulate packet loss by dropping random amount of packets. (Works only in DEBUG mode)
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.SimulateLatency">
            <summary>
            Simulate latency by holding packets for random time. (Works only in DEBUG mode)
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.SimulationPacketLossChance">
            <summary>
            Chance of packet loss when simulation enabled. value in percents (1 - 100).
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.SimulationMinLatency">
            <summary>
            Minimum simulated latency
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.SimulationMaxLatency">
            <summary>
            Maximum simulated latency
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.UnsyncedEvents">
            <summary>
            Events automatically will be called without PollEvents method from another thread
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.UnsyncedReceiveEvent">
            <summary>
            If true - receive event will be called from "receive" thread immediately otherwise on PollEvents call
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.UnsyncedDeliveryEvent">
            <summary>
            If true - delivery event will be called from "receive" thread immediately otherwise on PollEvents call
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.BroadcastReceiveEnabled">
            <summary>
            Allows receive broadcast packets
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.ReconnectDelay">
            <summary>
            Delay between initial connection attempts
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.MaxConnectAttempts">
            <summary>
            Maximum connection attempts before client stops and call disconnect event.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.ReuseAddress">
            <summary>
            Enables socket option "ReuseAddress" for specific purposes
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.Statistics">
            <summary>
            Statistics of all connections
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.EnableStatistics">
            <summary>
            Toggles the collection of network statistics for the instance and all known peers
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.NatPunchModule">
            <summary>
            NatPunchModule for NAT hole punching operations
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.IsRunning">
            <summary>
            Returns true if socket listening and update thread is running
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.LocalPort">
            <summary>
            Local EndPoint (host and port)
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.AutoRecycle">
            <summary>
            Automatically recycle NetPacketReader after OnReceive event
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.IPv6Enabled">
            <summary>
            IPv6 support
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.MtuOverride">
            <summary>
            Override MTU for all new peers registered in this NetManager, will ignores MTU Discovery!
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.UseSafeMtu">
            <summary>
            Sets initial MTU to lowest possible value according to RFC1191 (576 bytes)
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.FirstPeer">
            <summary>
            First peer. Useful for Client mode
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.DisconnectOnUnreachable">
            <summary>
            Disconnect peers if HostUnreachable or NetworkUnreachable spawned (old behaviour 0.9.x was true)
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.ChannelsCount">
            <summary>
            QoS channel count per message type (value must be between 1 and 64 channels)
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.ConnectedPeerList">
            <summary>
            Returns connected peers list (with internal cached list)
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.GetPeerById(System.Int32)">
            <summary>
            Gets peer by peer id
            </summary>
            <param name="id">id of peer</param>
            <returns>Peer if peer with id exist, otherwise null</returns>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.ConnectedPeersCount">
            <summary>
            Returns connected peers count
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.#ctor(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.INetEventListener,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Layers.PacketLayerBase)">
            <summary>
            NetManager constructor
            </summary>
            <param name="listener">Network events listener (also can implement IDeliveryEventListener)</param>
            <param name="extraPacketLayer">Extra processing of packages, like CRC checksum or encryption. All connected NetManagers must have same layer.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.ManualUpdate(System.Int32)">
            <summary>
            Update and send logic. Use this only when NetManager started in manual mode
            </summary>
            <param name="elapsedMilliseconds">elapsed milliseconds since last update call</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.ManualReceive">
            <summary>
            Receive logic. It will call Receive events immediately without need to use PollEvents or UnsyncedEvents
            Use this only when NetManager started in manual mode
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.SendToAll(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataWriter,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod)">
            <summary>
            Send data to all connected peers (channel - 0)
            </summary>
            <param name="writer">DataWriter with data</param>
            <param name="options">Send options (reliable, unreliable, etc.)</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.SendToAll(System.Byte[],Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod)">
            <summary>
            Send data to all connected peers (channel - 0)
            </summary>
            <param name="data">Data</param>
            <param name="options">Send options (reliable, unreliable, etc.)</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.SendToAll(System.Byte[],System.Int32,System.Int32,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod)">
            <summary>
            Send data to all connected peers (channel - 0)
            </summary>
            <param name="data">Data</param>
            <param name="start">Start of data</param>
            <param name="length">Length of data</param>
            <param name="options">Send options (reliable, unreliable, etc.)</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.SendToAll(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataWriter,System.Byte,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod)">
            <summary>
            Send data to all connected peers
            </summary>
            <param name="writer">DataWriter with data</param>
            <param name="channelNumber">Number of channel (from 0 to channelsCount - 1)</param>
            <param name="options">Send options (reliable, unreliable, etc.)</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.SendToAll(System.Byte[],System.Byte,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod)">
            <summary>
            Send data to all connected peers
            </summary>
            <param name="data">Data</param>
            <param name="channelNumber">Number of channel (from 0 to channelsCount - 1)</param>
            <param name="options">Send options (reliable, unreliable, etc.)</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.SendToAll(System.Byte[],System.Int32,System.Int32,System.Byte,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod)">
            <summary>
            Send data to all connected peers
            </summary>
            <param name="data">Data</param>
            <param name="start">Start of data</param>
            <param name="length">Length of data</param>
            <param name="channelNumber">Number of channel (from 0 to channelsCount - 1)</param>
            <param name="options">Send options (reliable, unreliable, etc.)</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.SendToAll(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataWriter,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer)">
            <summary>
            Send data to all connected peers (channel - 0)
            </summary>
            <param name="writer">DataWriter with data</param>
            <param name="options">Send options (reliable, unreliable, etc.)</param>
            <param name="excludePeer">Excluded peer</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.SendToAll(System.Byte[],Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer)">
            <summary>
            Send data to all connected peers (channel - 0)
            </summary>
            <param name="data">Data</param>
            <param name="options">Send options (reliable, unreliable, etc.)</param>
            <param name="excludePeer">Excluded peer</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.SendToAll(System.Byte[],System.Int32,System.Int32,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer)">
            <summary>
            Send data to all connected peers (channel - 0)
            </summary>
            <param name="data">Data</param>
            <param name="start">Start of data</param>
            <param name="length">Length of data</param>
            <param name="options">Send options (reliable, unreliable, etc.)</param>
            <param name="excludePeer">Excluded peer</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.SendToAll(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataWriter,System.Byte,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer)">
            <summary>
            Send data to all connected peers
            </summary>
            <param name="writer">DataWriter with data</param>
            <param name="channelNumber">Number of channel (from 0 to channelsCount - 1)</param>
            <param name="options">Send options (reliable, unreliable, etc.)</param>
            <param name="excludePeer">Excluded peer</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.SendToAll(System.Byte[],System.Byte,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer)">
            <summary>
            Send data to all connected peers
            </summary>
            <param name="data">Data</param>
            <param name="channelNumber">Number of channel (from 0 to channelsCount - 1)</param>
            <param name="options">Send options (reliable, unreliable, etc.)</param>
            <param name="excludePeer">Excluded peer</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.SendToAll(System.Byte[],System.Int32,System.Int32,System.Byte,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer)">
            <summary>
            Send data to all connected peers
            </summary>
            <param name="data">Data</param>
            <param name="start">Start of data</param>
            <param name="length">Length of data</param>
            <param name="channelNumber">Number of channel (from 0 to channelsCount - 1)</param>
            <param name="options">Send options (reliable, unreliable, etc.)</param>
            <param name="excludePeer">Excluded peer</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.Start">
            <summary>
            Start logic thread and listening on available port
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.Start(System.Net.IPAddress,System.Net.IPAddress,System.Int32)">
            <summary>
            Start logic thread and listening on selected port
            </summary>
            <param name="addressIPv4">bind to specific ipv4 address</param>
            <param name="addressIPv6">bind to specific ipv6 address</param>
            <param name="port">port to listen</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.Start(System.String,System.String,System.Int32)">
            <summary>
            Start logic thread and listening on selected port
            </summary>
            <param name="addressIPv4">bind to specific ipv4 address</param>
            <param name="addressIPv6">bind to specific ipv6 address</param>
            <param name="port">port to listen</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.Start(System.Int32)">
            <summary>
            Start logic thread and listening on selected port
            </summary>
            <param name="port">port to listen</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.StartInManualMode(System.Net.IPAddress,System.Net.IPAddress,System.Int32)">
            <summary>
            Start in manual mode and listening on selected port
            In this mode you should use ManualReceive (without PollEvents) for receive packets
            and ManualUpdate(...) for update and send packets
            This mode useful mostly for single-threaded servers
            </summary>
            <param name="addressIPv4">bind to specific ipv4 address</param>
            <param name="addressIPv6">bind to specific ipv6 address</param>
            <param name="port">port to listen</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.StartInManualMode(System.String,System.String,System.Int32)">
            <summary>
            Start in manual mode and listening on selected port
            In this mode you should use ManualReceive (without PollEvents) for receive packets
            and ManualUpdate(...) for update and send packets
            This mode useful mostly for single-threaded servers
            </summary>
            <param name="addressIPv4">bind to specific ipv4 address</param>
            <param name="addressIPv6">bind to specific ipv6 address</param>
            <param name="port">port to listen</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.StartInManualMode(System.Int32)">
            <summary>
            Start in manual mode and listening on selected port
            In this mode you should use ManualReceive (without PollEvents) for receive packets
            and ManualUpdate(...) for update and send packets
            This mode useful mostly for single-threaded servers
            </summary>
            <param name="port">port to listen</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.SendUnconnectedMessage(System.Byte[],System.Net.IPEndPoint)">
            <summary>
            Send message without connection
            </summary>
            <param name="message">Raw data</param>
            <param name="remoteEndPoint">Packet destination</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.SendUnconnectedMessage(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataWriter,System.Net.IPEndPoint)">
            <summary>
            Send message without connection
            </summary>
            <param name="writer">Data serializer</param>
            <param name="remoteEndPoint">Packet destination</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.SendUnconnectedMessage(System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint)">
            <summary>
            Send message without connection
            </summary>
            <param name="message">Raw data</param>
            <param name="start">data start</param>
            <param name="length">data length</param>
            <param name="remoteEndPoint">Packet destination</param>
            <returns>Operation result</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.TriggerUpdate">
            <summary>
            Triggers update and send logic immediately (works asynchronously)
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.PollEvents">
            <summary>
            Receive all pending events. Call this in game update code
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.Connect(System.String,System.Int32,System.String)">
            <summary>
            Connect to remote host
            </summary>
            <param name="address">Server IP or hostname</param>
            <param name="port">Server Port</param>
            <param name="key">Connection key</param>
            <returns>New NetPeer if new connection, Old NetPeer if already connected, null peer if there is ConnectionRequest awaiting</returns>
            <exception cref="T:System.InvalidOperationException">Manager is not running. Call <see cref="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.Start"/></exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.Connect(System.String,System.Int32,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataWriter)">
            <summary>
            Connect to remote host
            </summary>
            <param name="address">Server IP or hostname</param>
            <param name="port">Server Port</param>
            <param name="connectionData">Additional data for remote peer</param>
            <returns>New NetPeer if new connection, Old NetPeer if already connected, null peer if there is ConnectionRequest awaiting</returns>
            <exception cref="T:System.InvalidOperationException">Manager is not running. Call <see cref="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.Start"/></exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.Connect(System.Net.IPEndPoint,System.String)">
            <summary>
            Connect to remote host
            </summary>
            <param name="target">Server end point (ip and port)</param>
            <param name="key">Connection key</param>
            <returns>New NetPeer if new connection, Old NetPeer if already connected, null peer if there is ConnectionRequest awaiting</returns>
            <exception cref="T:System.InvalidOperationException">Manager is not running. Call <see cref="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.Start"/></exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.Connect(System.Net.IPEndPoint,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataWriter)">
            <summary>
            Connect to remote host
            </summary>
            <param name="target">Server end point (ip and port)</param>
            <param name="connectionData">Additional data for remote peer</param>
            <returns>New NetPeer if new connection, Old NetPeer if already connected, null peer if there is ConnectionRequest awaiting</returns>
            <exception cref="T:System.InvalidOperationException">Manager is not running. Call <see cref="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.Start"/></exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.Stop">
            <summary>
            Force closes connection and stop all threads.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.Stop(System.Boolean)">
            <summary>
            Force closes connection and stop all threads.
            </summary>
            <param name="sendDisconnectMessages">Send disconnect messages</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.GetPeersCount(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.ConnectionState)">
            <summary>
            Return peers count with connection state
            </summary>
            <param name="peerState">peer connection state (you can use as bit flags)</param>
            <returns>peers count</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.GetPeersNonAlloc(System.Collections.Generic.List{Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer},Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.ConnectionState)">
            <summary>
            Get copy of peers (without allocations)
            </summary>
            <param name="peers">List that will contain result</param>
            <param name="peerState">State of peers</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.DisconnectAll">
            <summary>
            Disconnect all peers without any additional data
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.DisconnectAll(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Disconnect all peers with shutdown message
            </summary>
            <param name="data">Data to send (must be less or equal MTU)</param>
            <param name="start">Data start</param>
            <param name="count">Data count</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.DisconnectPeerForce(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer)">
            <summary>
            Immediately disconnect peer from server without additional data
            </summary>
            <param name="peer">peer to disconnect</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.DisconnectPeer(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer)">
            <summary>
            Disconnect peer from server
            </summary>
            <param name="peer">peer to disconnect</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.DisconnectPeer(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer,System.Byte[])">
            <summary>
            Disconnect peer from server and send additional data (Size must be less or equal MTU - 8)
            </summary>
            <param name="peer">peer to disconnect</param>
            <param name="data">additional data</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.DisconnectPeer(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataWriter)">
            <summary>
            Disconnect peer from server and send additional data (Size must be less or equal MTU - 8)
            </summary>
            <param name="peer">peer to disconnect</param>
            <param name="writer">additional data</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.DisconnectPeer(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Disconnect peer from server and send additional data (Size must be less or equal MTU - 8)
            </summary>
            <param name="peer">peer to disconnect</param>
            <param name="data">additional data</param>
            <param name="start">data start</param>
            <param name="count">data length</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.CreateNtpRequest(System.Net.IPEndPoint)">
            <summary>
            Create the requests for NTP server
            </summary>
            <param name="endPoint">NTP Server address.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.CreateNtpRequest(System.String,System.Int32)">
            <summary>
            Create the requests for NTP server
            </summary>
            <param name="ntpServerAddress">NTP Server address.</param>
            <param name="port">port</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetManager.CreateNtpRequest(System.String)">
            <summary>
            Create the requests for NTP server (default port)
            </summary>
            <param name="ntpServerAddress">NTP Server address.</param>
        </member>
        <member name="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.ConnectionState">
            <summary>
            Peer connection state
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer">
            <summary>
            Network peer. Main purpose is sending messages to specific peer.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.EndPoint">
            <summary>
            Peer ip address and port
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.NetManager">
            <summary>
            Peer parent NetManager
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.ConnectionState">
            <summary>
            Current connection state
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.ConnectTime">
            <summary>
            Connection time for internal purposes
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.Id">
            <summary>
            Peer id can be used as key in your dictionary of peers
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.Ping">
            <summary>
            Current ping in milliseconds
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.Mtu">
            <summary>
            Current MTU - Maximum Transfer Unit ( maximum udp packet size without fragmentation )
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.RemoteTimeDelta">
            <summary>
            Delta with remote time in ticks (not accurate)
            positive - remote time > our time
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.RemoteUtcTime">
            <summary>
            Remote UTC time (not accurate)
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.TimeSinceLastPacket">
            <summary>
            Time since last packet received (including internal library packets)
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.Statistics">
            <summary>
            Statistics of peer connection
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.GetPacketsCountInReliableQueue(System.Byte,System.Boolean)">
            <summary>
            Returns packets count in queue for reliable channel
            </summary>
            <param name="channelNumber">number of channel 0-63</param>
            <param name="ordered">type of channel ReliableOrdered or ReliableUnordered</param>
            <returns>packets count in channel queue</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.GetMaxSinglePacketSize(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod)">
            <summary>
            Gets maximum size of packet that will be not fragmented.
            </summary>
            <param name="options">Type of packet that you want send</param>
            <returns>size in bytes</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.SendWithDeliveryEvent(System.Byte[],System.Byte,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod,System.Object)">
            <summary>
            Send data to peer with delivery event called
            </summary>
            <param name="data">Data</param>
            <param name="channelNumber">Number of channel (from 0 to channelsCount - 1)</param>
            <param name="deliveryMethod">Delivery method (reliable, unreliable, etc.)</param>
            <param name="userData">User data that will be received in DeliveryEvent</param>
            <exception cref="T:System.ArgumentException">
                If you trying to send unreliable packet type<para/>
            </exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.SendWithDeliveryEvent(System.Byte[],System.Int32,System.Int32,System.Byte,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod,System.Object)">
            <summary>
            Send data to peer with delivery event called
            </summary>
            <param name="data">Data</param>
            <param name="start">Start of data</param>
            <param name="length">Length of data</param>
            <param name="channelNumber">Number of channel (from 0 to channelsCount - 1)</param>
            <param name="deliveryMethod">Delivery method (reliable, unreliable, etc.)</param>
            <param name="userData">User data that will be received in DeliveryEvent</param>
            <exception cref="T:System.ArgumentException">
                If you trying to send unreliable packet type<para/>
            </exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.SendWithDeliveryEvent(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataWriter,System.Byte,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod,System.Object)">
            <summary>
            Send data to peer with delivery event called
            </summary>
            <param name="dataWriter">Data</param>
            <param name="channelNumber">Number of channel (from 0 to channelsCount - 1)</param>
            <param name="deliveryMethod">Delivery method (reliable, unreliable, etc.)</param>
            <param name="userData">User data that will be received in DeliveryEvent</param>
            <exception cref="T:System.ArgumentException">
                If you trying to send unreliable packet type<para/>
            </exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.Send(System.Byte[],Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod)">
            <summary>
            Send data to peer (channel - 0)
            </summary>
            <param name="data">Data</param>
            <param name="deliveryMethod">Send options (reliable, unreliable, etc.)</param>
            <exception cref="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.TooBigPacketException">
                If size exceeds maximum limit:<para/>
                MTU - headerSize bytes for Unreliable<para/>
                Fragment count exceeded ushort.MaxValue<para/>
            </exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.Send(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataWriter,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod)">
            <summary>
            Send data to peer (channel - 0)
            </summary>
            <param name="dataWriter">DataWriter with data</param>
            <param name="deliveryMethod">Send options (reliable, unreliable, etc.)</param>
            <exception cref="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.TooBigPacketException">
                If size exceeds maximum limit:<para/>
                MTU - headerSize bytes for Unreliable<para/>
                Fragment count exceeded ushort.MaxValue<para/>
            </exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.Send(System.Byte[],System.Int32,System.Int32,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod)">
            <summary>
            Send data to peer (channel - 0)
            </summary>
            <param name="data">Data</param>
            <param name="start">Start of data</param>
            <param name="length">Length of data</param>
            <param name="options">Send options (reliable, unreliable, etc.)</param>
            <exception cref="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.TooBigPacketException">
                If size exceeds maximum limit:<para/>
                MTU - headerSize bytes for Unreliable<para/>
                Fragment count exceeded ushort.MaxValue<para/>
            </exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.Send(System.Byte[],System.Byte,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod)">
            <summary>
            Send data to peer
            </summary>
            <param name="data">Data</param>
            <param name="channelNumber">Number of channel (from 0 to channelsCount - 1)</param>
            <param name="deliveryMethod">Send options (reliable, unreliable, etc.)</param>
            <exception cref="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.TooBigPacketException">
                If size exceeds maximum limit:<para/>
                MTU - headerSize bytes for Unreliable<para/>
                Fragment count exceeded ushort.MaxValue<para/>
            </exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.Send(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataWriter,System.Byte,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod)">
            <summary>
            Send data to peer
            </summary>
            <param name="dataWriter">DataWriter with data</param>
            <param name="channelNumber">Number of channel (from 0 to channelsCount - 1)</param>
            <param name="deliveryMethod">Send options (reliable, unreliable, etc.)</param>
            <exception cref="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.TooBigPacketException">
                If size exceeds maximum limit:<para/>
                MTU - headerSize bytes for Unreliable<para/>
                Fragment count exceeded ushort.MaxValue<para/>
            </exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetPeer.Send(System.Byte[],System.Int32,System.Int32,System.Byte,Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.DeliveryMethod)">
            <summary>
            Send data to peer
            </summary>
            <param name="data">Data</param>
            <param name="start">Start of data</param>
            <param name="length">Length of data</param>
            <param name="channelNumber">Number of channel (from 0 to channelsCount - 1)</param>
            <param name="deliveryMethod">Delivery method (reliable, unreliable, etc.)</param>
            <exception cref="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.TooBigPacketException">
                If size exceeds maximum limit:<para/>
                MTU - headerSize bytes for Unreliable<para/>
                Fragment count exceeded ushort.MaxValue<para/>
            </exception>
        </member>
        <member name="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.LocalAddrType">
            <summary>
            Address type that you want to receive from NetUtils.GetLocalIp method
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetUtils">
            <summary>
            Some specific network utilities
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetUtils.GetLocalIpList(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.LocalAddrType)">
            <summary>
            Get all local ip addresses
            </summary>
            <param name="addrType">type of address (IPv4, IPv6 or both)</param>
            <returns>List with all local ip addresses</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetUtils.GetLocalIpList(System.Collections.Generic.IList{System.String},Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.LocalAddrType)">
            <summary>
            Get all local ip addresses (non alloc version)
            </summary>
            <param name="targetList">result list</param>
            <param name="addrType">type of address (IPv4, IPv6 or both)</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.NetUtils.GetLocalIp(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.LocalAddrType)">
            <summary>
            Get first detected local ip address
            </summary>
            <param name="addrType">type of address (IPv4, IPv6 or both)</param>
            <returns>IP address if available. Else - string.Empty</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.CRC32C.Compute(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compute CRC32C for data
            </summary>
            <param name="input">input data</param>
            <param name="offset">offset</param>
            <param name="length">length</param>
            <returns>CRC32C checksum</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataWriter.FromBytes(System.Byte[],System.Boolean)">
            <summary>
            Creates NetDataWriter from existing ByteArray
            </summary>
            <param name="bytes">Source byte array</param>
            <param name="copy">Copy array to new location or use existing</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataWriter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates NetDataWriter from existing ByteArray (always copied data)
            </summary>
            <param name="bytes">Source byte array</param>
            <param name="offset">Offset of array</param>
            <param name="length">Length of array</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataWriter.SetPosition(System.Int32)">
            <summary>
            Sets position of NetDataWriter to rewrite previous values
            </summary>
            <param name="position">new byte position</param>
            <returns>previous position of data writer</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetPacketProcessor.RegisterNestedType``1">
            <summary>
            Register nested property type
            </summary>
            <typeparam name="T">INetSerializable structure</typeparam>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetPacketProcessor.RegisterNestedType``1(System.Action{Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataWriter,``0},System.Func{Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataReader,``0})">
            <summary>
            Register nested property type
            </summary>
            <param name="writeDelegate"></param>
            <param name="readDelegate"></param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetPacketProcessor.RegisterNestedType``1(System.Func{``0})">
            <summary>
            Register nested property type
            </summary>
            <typeparam name="T">INetSerializable class</typeparam>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetPacketProcessor.ReadAllPackets(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataReader)">
            <summary>
            Reads all available data from NetDataReader and calls OnReceive delegates
            </summary>
            <param name="reader">NetDataReader with packets data</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetPacketProcessor.ReadAllPackets(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataReader,System.Object)">
            <summary>
            Reads all available data from NetDataReader and calls OnReceive delegates
            </summary>
            <param name="reader">NetDataReader with packets data</param>
            <param name="userData">Argument that passed to OnReceivedEvent</param>
            <exception cref="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.ParseException">Malformed packet</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetPacketProcessor.ReadPacket(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataReader)">
            <summary>
            Reads one packet from NetDataReader and calls OnReceive delegate
            </summary>
            <param name="reader">NetDataReader with packet</param>
            <exception cref="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.ParseException">Malformed packet</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetPacketProcessor.ReadPacket(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataReader,System.Object)">
            <summary>
            Reads one packet from NetDataReader and calls OnReceive delegate
            </summary>
            <param name="reader">NetDataReader with packet</param>
            <param name="userData">Argument that passed to OnReceivedEvent</param>
            <exception cref="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.ParseException">Malformed packet</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetPacketProcessor.Subscribe``1(System.Action{``0},System.Func{``0})">
            <summary>
            Register and subscribe to packet receive event
            </summary>
            <param name="onReceive">event that will be called when packet deserialized with ReadPacket method</param>
            <param name="packetConstructor">Method that constructs packet instead of slow Activator.CreateInstance</param>
            <exception cref="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.InvalidTypeException"><typeparamref name="T"/>'s fields are not supported, or it has no fields</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetPacketProcessor.Subscribe``2(System.Action{``0,``1},System.Func{``0})">
            <summary>
            Register and subscribe to packet receive event (with userData)
            </summary>
            <param name="onReceive">event that will be called when packet deserialized with ReadPacket method</param>
            <param name="packetConstructor">Method that constructs packet instead of slow Activator.CreateInstance</param>
            <exception cref="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.InvalidTypeException"><typeparamref name="T"/>'s fields are not supported, or it has no fields</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetPacketProcessor.SubscribeReusable``1(System.Action{``0})">
            <summary>
            Register and subscribe to packet receive event
            This method will overwrite last received packet class on receive (less garbage)
            </summary>
            <param name="onReceive">event that will be called when packet deserialized with ReadPacket method</param>
            <exception cref="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.InvalidTypeException"><typeparamref name="T"/>'s fields are not supported, or it has no fields</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetPacketProcessor.SubscribeReusable``2(System.Action{``0,``1})">
            <summary>
            Register and subscribe to packet receive event
            This method will overwrite last received packet class on receive (less garbage)
            </summary>
            <param name="onReceive">event that will be called when packet deserialized with ReadPacket method</param>
            <exception cref="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.InvalidTypeException"><typeparamref name="T"/>'s fields are not supported, or it has no fields</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetPacketProcessor.RemoveSubscription``1">
            <summary>
            Remove any subscriptions by type
            </summary>
            <typeparam name="T">Packet type</typeparam>
            <returns>true if remove is success</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetSerializer.RegisterNestedType``1">
            <summary>
            Register custom property type
            </summary>
            <typeparam name="T">INetSerializable structure</typeparam>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetSerializer.RegisterNestedType``1(System.Func{``0})">
            <summary>
            Register custom property type
            </summary>
            <typeparam name="T">INetSerializable class</typeparam>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetSerializer.RegisterNestedType``1(System.Action{Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataWriter,``0},System.Func{Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataReader,``0})">
            <summary>
            Register custom property type
            </summary>
            <typeparam name="T">Any packet</typeparam>
            <param name="writer">custom type writer</param>
            <param name="reader">custom type reader</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetSerializer.Register``1">
            <exception cref="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.InvalidTypeException"><typeparamref name="T"/>'s fields are not supported, or it has no fields</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetSerializer.Deserialize``1(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataReader)">
            <summary>
            Reads packet with known type
            </summary>
            <param name="reader">NetDataReader with packet</param>
            <returns>Returns packet if packet in reader is matched type</returns>
            <exception cref="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.InvalidTypeException"><typeparamref name="T"/>'s fields are not supported, or it has no fields</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetSerializer.Deserialize``1(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataReader,``0)">
            <summary>
            Reads packet with known type (non alloc variant)
            </summary>
            <param name="reader">NetDataReader with packet</param>
            <param name="target">Deserialization target</param>
            <returns>Returns true if packet in reader is matched type</returns>
            <exception cref="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.InvalidTypeException"><typeparamref name="T"/>'s fields are not supported, or it has no fields</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetSerializer.Serialize``1(Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetDataWriter,``0)">
            <summary>
            Serialize object to NetDataWriter (fast)
            </summary>
            <param name="writer">Serialization target NetDataWriter</param>
            <param name="obj">Object to serialize</param>
            <exception cref="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.InvalidTypeException"><typeparamref name="T"/>'s fields are not supported, or it has no fields</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NetSerializer.Serialize``1(``0)">
            <summary>
            Serialize object to byte array
            </summary>
            <param name="obj">Object to serialize</param>
            <returns>byte array with serialized data</returns>
        </member>
        <member name="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket">
            <summary>
            Represents RFC4330 SNTP packet used for communication to and from a network time server.
            </summary>
            <remarks>
            <para>
            Most applications should just use the <see cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.CorrectionOffset" /> property.
            </para>
            <para>
            The same data structure represents both request and reply packets.
            Request and reply differ in which properties are set and to what values.
            </para>
            <para>
            The only real property is <see cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.Bytes" />.
            All other properties read from and write to the underlying byte array
            with the exception of <see cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.DestinationTimestamp" />,
            which is not part of the packet on network and it is instead set locally after receiving the packet.
            </para>
            <para>
            Copied from <a href="https://guerrillantp.machinezoo.com/">GuerrillaNtp project</a>
            with permission from Robert Vazan (@robertvazan) under MIT license, see https://github.com/RevenantX/LiteNetLib/pull/236
            </para>
            </remarks>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.Bytes">
            <summary>
            Gets RFC4330-encoded SNTP packet.
            </summary>
            <value>
            Byte array containing RFC4330-encoded SNTP packet. It is at least 48 bytes long.
            </value>
            <remarks>
            This is the only real property. All other properties except
            <see cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.DestinationTimestamp" /> read from or write to this byte array.
            </remarks>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.LeapIndicator">
            <summary>
            Gets the leap second indicator.
            </summary>
            <value>
            Leap second warning, if any. Special value
            <see cref="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpLeapIndicator.AlarmCondition" /> indicates unsynchronized server clock.
            Default is <see cref="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpLeapIndicator.NoWarning" />.
            </value>
            <remarks>
            Only servers fill in this property. Clients can consult this property for possible leap second warning.
            </remarks>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.VersionNumber">
            <summary>
            Gets or sets protocol version number.
            </summary>
            <value>
            SNTP protocol version. Default is 4, which is the latest version at the time of this writing.
            </value>
            <remarks>
            In request packets, clients should leave this property at default value 4.
            Servers usually reply with the same protocol version.
            </remarks>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.Mode">
            <summary>
            Gets or sets SNTP packet mode, i.e. whether this is client or server packet.
            </summary>
            <value>
            SNTP packet mode. Default is <see cref="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpMode.Client" /> in newly created packets.
            Server reply should have this property set to <see cref="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpMode.Server" />.
            </value>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.Stratum">
            <summary>
            Gets server's distance from the reference clock.
            </summary>
            <value>
            <para>
            Distance from the reference clock. This property is set only in server reply packets.
            Servers connected directly to reference clock hardware set this property to 1.
            Statum number is incremented by 1 on every hop down the NTP server hierarchy.
            </para>
            <para>
            Special value 0 indicates that this packet is a Kiss-o'-Death message
            with kiss code stored in <see cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.ReferenceId" />.
            </para>
            </value>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.Poll">
            <summary>
            Gets server's preferred polling interval.
            </summary>
            <value>
            Polling interval in log2 seconds, e.g. 4 stands for 16s and 17 means 131,072s.
            </value>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.Precision">
            <summary>
            Gets the precision of server clock.
            </summary>
            <value>
            Clock precision in log2 seconds, e.g. -20 for microsecond precision.
            </value>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.RootDelay">
            <summary>
            Gets the total round-trip delay from the server to the reference clock.
            </summary>
            <value>
            Round-trip delay to the reference clock. Normally a positive value smaller than one second.
            </value>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.RootDispersion">
            <summary>
            Gets the estimated error in time reported by the server.
            </summary>
            <value>
            Estimated error in time reported by the server. Normally a positive value smaller than one second.
            </value>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.ReferenceId">
            <summary>
            Gets the ID of the time source used by the server or Kiss-o'-Death code sent by the server.
            </summary>
            <value>
            <para>
            ID of server's time source or Kiss-o'-Death code.
            Purpose of this property depends on value of <see cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.Stratum" /> property.
            </para>
            <para>
            Stratum 1 servers write here one of several special values that describe the kind of hardware clock they use.
            </para>
            <para>
            Stratum 2 and lower servers set this property to IPv4 address of their upstream server.
            If upstream server has IPv6 address, the address is hashed, because it doesn't fit in this property.
            </para>
            <para>
            When server sets <see cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.Stratum" /> to special value 0,
            this property contains so called kiss code that instructs the client to stop querying the server.
            </para>
            </value>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.ReferenceTimestamp">
            <summary>
            Gets or sets the time when the server clock was last set or corrected.
            </summary>
            <value>
            Time when the server clock was last set or corrected or <c>null</c> when not specified.
            </value>
            <remarks>
            This Property is usually set only by servers. It usually lags server's current time by several minutes,
            so don't use this property for time synchronization.
            </remarks>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.OriginTimestamp">
            <summary>
            Gets or sets the time when the client sent its request.
            </summary>
            <value>
            This property is <c>null</c> in request packets.
            In reply packets, it is the time when the client sent its request.
            Servers copy this value from <see cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.TransmitTimestamp" />
            that they find in received request packet.
            </value>
            <seealso cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.CorrectionOffset" />
            <seealso cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.RoundTripTime" />
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.ReceiveTimestamp">
            <summary>
            Gets or sets the time when the request was received by the server.
            </summary>
            <value>
            This property is <c>null</c> in request packets.
            In reply packets, it is the time when the server received client request.
            </value>
            <seealso cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.CorrectionOffset" />
            <seealso cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.RoundTripTime" />
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.TransmitTimestamp">
            <summary>
            Gets or sets the time when the packet was sent.
            </summary>
            <value>
            Time when the packet was sent. It should never be <c>null</c>.
            Default value is <see cref="P:System.DateTime.UtcNow" />.
            </value>
            <remarks>
            This property must be set by both clients and servers.
            </remarks>
            <seealso cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.CorrectionOffset" />
            <seealso cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.RoundTripTime" />
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.DestinationTimestamp">
            <summary>
            Gets or sets the time of reception of response SNTP packet on the client.
            </summary>
            <value>
            Time of reception of response SNTP packet on the client. It is <c>null</c> in request packets.
            </value>
            <remarks>
            This property is not part of the protocol and has to be set when reply packet is received.
            </remarks>
            <seealso cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.CorrectionOffset" />
            <seealso cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.RoundTripTime" />
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.RoundTripTime">
            <summary>
            Gets the round-trip time to the server.
            </summary>
            <value>
            Time the request spent traveling to the server plus the time the reply spent traveling back.
            This is calculated from timestamps in the packet as <c>(t1 - t0) + (t3 - t2)</c>
            where t0 is <see cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.OriginTimestamp" />,
            t1 is <see cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.ReceiveTimestamp" />,
            t2 is <see cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.TransmitTimestamp" />,
            and t3 is <see cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.DestinationTimestamp" />.
            This property throws an exception in request packets.
            </value>
        </member>
        <member name="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.CorrectionOffset">
            <summary>
            Gets the offset that should be added to local time to synchronize it with server time.
            </summary>
            <value>
            Time difference between server and client. It should be added to local time to get server time.
            It is calculated from timestamps in the packet as <c>0.5 * ((t1 - t0) - (t3 - t2))</c>
            where t0 is <see cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.OriginTimestamp" />,
            t1 is <see cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.ReceiveTimestamp" />,
            t2 is <see cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.TransmitTimestamp" />,
            and t3 is <see cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.DestinationTimestamp" />.
            This property throws an exception in request packets.
            </value>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.#ctor">
            <summary>
            Initializes default request packet.
            </summary>
            <remarks>
            Properties <see cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.Mode" /> and <see cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.VersionNumber" />
            are set appropriately for request packet. Property <see cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.TransmitTimestamp" />
            is set to <see cref="P:System.DateTime.UtcNow" />.
            </remarks>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.#ctor(System.Byte[])">
            <summary>
            Initializes packet from received data.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.FromServerResponse(System.Byte[],System.DateTime)">
            <summary>
            Initializes packet from data received from a server.
            </summary>
            <param name="bytes">Data received from the server.</param>
            <param name="destinationTimestamp">Utc time of reception of response SNTP packet on the client.</param>
            <returns></returns>
        </member>
        <member name="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpLeapIndicator">
            <summary>
            Represents leap second warning from the server that instructs the client to add or remove leap second.
            </summary>
            <seealso cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.LeapIndicator" />
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpLeapIndicator.NoWarning">
            <summary>
            No leap second warning. No action required.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpLeapIndicator.LastMinuteHas61Seconds">
            <summary>
            Warns the client that the last minute of the current day has 61 seconds.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpLeapIndicator.LastMinuteHas59Seconds">
            <summary>
            Warns the client that the last minute of the current day has 59 seconds.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpLeapIndicator.AlarmCondition">
            <summary>
            Special value indicating that the server clock is unsynchronized and the returned time is unreliable.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpMode">
            <summary>
            Describes SNTP packet mode, i.e. client or server.
            </summary>
            <seealso cref="P:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpPacket.Mode" />
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpMode.Client">
            <summary>
            Identifies client-to-server SNTP packet.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core._3rdparty.LiteNetLib_0._9._5._2.Utils.NtpMode.Server">
            <summary>
            Identifies server-to-client SNTP packet.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.AnyDeviceAuthorizer">
            <summary>
            Class <c>AnyDeviceAuthorizer</c> is an IDeviceAuthorizer that simply
            allow any organization to connect to the end-point hosting the server 
            session.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.ConnectionStatus">
            <summary>
            Type <c>ConnectionStatus</c> defines the state of a connection
            between two devices.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Device">
            <summary>
            Class <c>Device</c> is an implementation of Device using
            LiteNetLib. 
            
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.Device.LibraryMajorVersion">
            <summary>
            Server compatibility
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.DeviceManager">
            <summary>
            Class <c>DeviceManager</c> is an implementation of DeviceManager using
            LiteNetLib. 
            
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.DeviceManager.Log">
            <summary>
            Event log for device manager.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.DeviceManager.UpdateStatisticsInterval">
            <summary>
            Update statistics interval, in seconds.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.DeviceManager.SendAvailabilityInterval">
            <summary>
            Interval, in seconds, to send availability to local network.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.DeviceManager.ReconnectDeviceInterval">
            <summary>
            Interval, in seconds, to reconnect a lost outgoing connection.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.DeviceManager.TrafficStatisticsReporting">
            <summary>
            Traffic statistics reporting.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.DeviceManager.AllowedMissedAvailabilityReports">
            <summary>
            Maximum allowed missing availability reports/lifesigns.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.DeviceManager.MaxAllowedLifesignInterval">
            <summary>
            Maximum allowed milliseconds allowed in between lifesign reports from incoming connections.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.DeviceManager.SendLifesignInterval">
            <summary>
            Minimum milliseconds between lifesign reports from incoming connections.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.DeviceManager.UserName">
            <summary>
            User name of owner.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.DeviceManager.DeviceType">
            <summary>
            Owner device type.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.DeviceManager.TargetCycleTime">
            <summary>
            Cycle processing time in milliseconds.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceManager._schemaVersion">
            <summary>
            Schema used by device manager.
            </summary>
            <remarks>
            Will only allow clients to join with the same schema version.
            </remarks>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceManager.mAvailableDevices">
            <summary>
            List of available devices. (from reports and known devices)
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceManager.mPendingConnectionAttempts">
            <summary>
            Connections waiting to be invoked.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceManager.mKnownDevices">
            <summary>
            Connections waiting to be invoked.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceManager.mSendAvailabilityTimer">
            <summary>
            Keep track of when to send availability reports.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceManager.mSendLifesignTimer">
            <summary>
            Keep track of when to send availability reports.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceManager.mStatisticsHistoryTimer">
            <summary>
            Statistics history collection timer
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceManager.mCompositeListeners">
            <summary>
            Listener for all devices.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.DeviceManager.#ctor(Alteruna.Multiplayer.Core.DeviceType,System.String,Alteruna.Multiplayer.Core.LogBase)">
            <summary>
            Constructor
            </summary>
            <param name="type">Device type.</param>
            <param name="user">Username.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.DeviceManager.Start(System.Int32,System.Int32,System.Boolean,Alteruna.Multiplayer.Core.Transport.TransportType,System.Int32,Alteruna.Multiplayer.Core.Transport.TransportType)">
            <summary>
            Start device manager
            </summary>
            <param name="serverPort"></param>
            <param name="publishPort"></param>
            <param name="broadCastEnabled"></param>
            <param name="transportType">Transport layer.</param>
            <param name="secondaryPort">Port for secondary transport</param>
            <param name="secondaryTransportType">Secondary Transport layer.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.DeviceManager.AddKnownAvailableDevice(System.String,System.Int32,System.Boolean)">
            <summary>
            Manually add an available device. Manager will establish a connection and keep it alive
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.DeviceManager.AddKnownAvailableDevice(System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            Manually create and add an available device. Manager will establish a connection and keep it alive
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.DeviceManager.AddKnownAvailableDevice(Alteruna.Multiplayer.Core.Device)">
            <summary>
            Manually add an new available device. Manager will establish a connection and keep it alive
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.DeviceManager.GetLocalRooms(System.Collections.Generic.List{Alteruna.Multiplayer.Core.Room})">
            <summary>
            Populate list of available devices
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.DeviceManager.FindAvailableDevice(System.String,System.Int32)">
            <summary>
            Attempt to find a device in list of available devices by its IP and port
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.DeviceManager.FindAvailableDevice(System.Net.IPAddress,System.Int32)">
            <summary>
            Attempt to find a device in list of available devices by its IP and port
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.DeviceManager.FindAvailableDevice(Alteruna.Multiplayer.Core.Device)">
            <summary>
            Attempt to find a device in list of available devices by its IP and port
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.DeviceManager.SendProjectQuarry">
            <summary>
            Sends Project Quarry. When complete, <see cref="!:IDeviceListener.LicenseQueryResponse"/> is called for all CompositeListeners.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.DeviceManager.SendProjectQuarry(System.Action{Alteruna.API.GameClientApi.Project})">
            <summary>
            Sends Project Quarry. When complete, <see cref="!:IDeviceListener.LicenseQueryResponse"/> is called for all CompositeListeners and then callback is invoked.
            </summary>
            <param name="callback">Action is invoked when Quarry completes.</param>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.DeviceStatistics">
            <summary>
            Class <c>DeviceStatistics</c> defines a container of 
            statistics attributes for a given device.
            </summary>
            
        </member>
        <member name="M:Alteruna.Multiplayer.Core.DeviceStatistics.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.DeviceStatistics.Device">
            <summary>
            Device for which the collected statistics belong
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.DeviceStatistics.NetworkStatistics">
            <summary>
            Network statistics for given host
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.DeviceStatistics.ProcessorUsage">
            <summary>
            CPU usage in percent (0-100)
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.DeviceStatistics.MemoryConsumption">
            <summary>
            Host memory consumption in percent (0-100)
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.DeviceStatistics.NumberOfConnections">
            <summary>
            Current number of active connections
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.DeviceStatistics.BlockedConnections">
            <summary>
            Number of blocked connections since server application started
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.DeviceStatistics.TimeStamp">
            <summary>
            Timestamp in epoch/unix time. Seconds since 1970/1/1
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.DeviceStatistics.UptimeSeconds">
            <summary>
            Device uptime in seconds since start
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.DeviceStatistics.PeakConnectionsHistory">
            <summary>
            Hourly history of traffic and connections
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.DeviceStatistics.HistoryOffset">
            <summary>
            Offset to first history mark, in seconds
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.DeviceStatistics.Serialize(Alteruna.Multiplayer.Core.ITransportStreamWriter)">
            <summary>
            Serialize to processor
            </summary>
            
        </member>
        <member name="M:Alteruna.Multiplayer.Core.DeviceStatistics.Unserialize(Alteruna.Multiplayer.Core.ITransportStreamReader)">
            <summary>
            Unserialize from given processor
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.DeviceType">
            <summary>
            Type <c>DeviceType</c> defines supported devices that is capable
            of running a compiled unit built with Alteruna Trinuty.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceType.OSXEditor">
            <summary>
              <para>In the Unity editor on macOS.</para>
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceType.OSX">
            <summary>
              <para>In the player on macOS.</para>
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceType.Windows">
            <summary>
              <para>In the player on Windows.</para>
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceType.WindowsEditor">
            <summary>
              <para>In the Unity editor on Windows.</para>
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceType.IPhone">
            <summary>
              <para>In the player on the iPhone.</para>
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceType.Android">
            <summary>
              <para>In the player on Android devices.</para>
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceType.Linux">
            <summary>
              <para>In the player on Linux.</para>
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceType.LinuxEditor">
            <summary>
              <para>In the Unity editor on Linux.</para>
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceType.WebGL">
            <summary>
              <para>In the player on WebGL</para>
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceType.WSAX86">
            <summary>
              <para>In the player on Windows Store Apps when CPU architecture is X86.</para>
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceType.WSAX64">
            <summary>
              <para>In the player on Windows Store Apps when CPU architecture is X64.</para>
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceType.WSAARM">
            <summary>
              <para>In the player on Windows Store Apps when CPU architecture is ARM.</para>
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceType.PS4">
            <summary>
              <para>In the player on the Playstation 4.</para>
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceType.XboxOne">
            <summary>
              <para>In the player on Xbox One.</para>
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceType.tvOS">
            <summary>
              <para>In the player on the Apple's tvOS.</para>
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceType.Switch">
            <summary>
              <para>In the player on Nintendo Switch.</para>
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceType.Stadia">
            <summary>
              <para>In the player on Stadia.</para>
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceType.CloudRendering">
            <summary>
              <para>In the player on CloudRendering.</para>
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.DeviceType.PS5">
            <summary>
              <para>In the player on the Playstation 5.</para>
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Endpoint">
            <summary>
            Device endpoint.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Exceptions.LicenseException">
            <summary>
            Represents errors that occur during license operations.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Exceptions.NoControllerException">
            <summary>
            Represents errors that occur from missing multiplayer controller.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Exceptions.NoEndpointException">
            <summary>
            Represents errors that occur from missing endpoint.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Exceptions.NotInRoomException">
            <summary>
            The exception that is thrown when a user is not in a room.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Exceptions.RoomException">
            <summary>
            Represents errors that occur during room operations.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Exceptions.SessionException">
            <summary>
            Represents errors that occur during session operations.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Exceptions.UserException">
            <summary>
            Represents errors that occur during user operations.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Exceptions.UserIndexArgumentOutOfRangeException">
            <summary>
            The exception that is thrown when a user index from a argument is not a valid user.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Exceptions.UserIndexOutOfRangeException">
            <summary>
            The exception that is thrown when a user index is not a valid user.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.HistoryBuffer`1">
            <summary>
            Generic circular buffer
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.ICompatibilityVersion.CompatibilityVersion">
            <summary>
            The compatibility version of a session.
            </summary>
            <remarks>
            Clients with a different compatibility version will be denied access to session.
            </remarks>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.CompatibilityVersion.CompatibilityVersionString(Alteruna.Multiplayer.Core.ICompatibilityVersion)">
            <summary>
            returns the compatibility version string as hexadecimal split in the middle by minus
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.IDeviceAuthorizer">
            <summary>
            Interface <c>IDeviceAuthorizer</c> defines a generic interface for device
            authorization. Is used by parts of the system in order to authorize connection
            attempts from other devices belonging to given organizations and running a given
            application.
            
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.IDeviceListener">
            <summary>
            Interface <c>IDeviceListener</c> defines a generic interface for event subscription
            on a given device. Devices uses instances of IDeviceListener to report events
            occuring during the life time of the application.
            
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.IHostRelayer">
            <summary>
            Interface <c>IHostRelayer</c> defines a generic interface for host relaying.
            Host relaying is the process of seemlessy relay a connection attempt to
            another host and is part of Trinity's connection establishment process.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.IPrimarySessionInfo.RoomMode">
            <summary>
            Make incoming connections to join room id 0.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.ISerializable">
            <summary>
            Interface <c>ISerializable</c> defines a generic interface for packing and
            unpacking a stream of bytes. Subclasses implementing this interface
            will be able to orderly read and write primitive types from the processor
            to assemble needed information to reconstruct an instance of data it exchange. 
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.IAdaptiveSerializable">
            <summary>
            Interface <c>ISerializable</c> defines a generic interface for packing and
            unpacking a stream of bytes. Subclasses implementing this interface
            will be able to orderly read and write primitive types from the processor
            to assemble needed information to reconstruct an instance of data it exchange. 
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.IAdaptiveSerializable.Serialize(Alteruna.Multiplayer.Core.ITransportStreamWriter,Alteruna.Multiplayer.Core.MethodArguments.SerializeInfo)">
            <summary>
            Serialize data to a stream.
            </summary>
            <param name="processor">Writer stream.</param>
            <param name="info">Serialize info.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.IAdaptiveSerializable.Unserialize(Alteruna.Multiplayer.Core.ITransportStreamReader,Alteruna.Multiplayer.Core.MethodArguments.UnserializeInfo)">
            <summary>
            Unserialize data from a stream.
            </summary>
            <param name="processor">Reader stream.</param>
            <param name="info">Unserialize info.</param>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.IAdaptiveSerializable.IAdaptiveSerializableInfo">
            <summary>
            Common interface for serialization info.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.IAdaptiveSerializable.IAdaptiveSerializableInfo.LodLevel">
            <summary>
            Network LOD (Level of Detail) level.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.IAdaptiveSerializable.IAdaptiveSerializableInfo.ForceSync">
            <summary>
            Is force sync event.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.IServiceListener">
            <summary>
            Service event listener interface.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.IServiceStateListener">
            <summary>
            Service state event listener interface.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.IServiceStateListener.OnForceSync(Alteruna.Multiplayer.Core.ServiceState,System.UInt16)">
            <summary>
            Called before data is synced for a force sync packet.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.IServiceStateListener.OnForceSynced(Alteruna.Multiplayer.Core.ServiceState,System.UInt16)">
            <summary>
            Called after data is serialized for a force sync packet.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.IServiceStateListener.HasSynchroniable(System.Guid)">
            <summary>
            Whether Alteruna Multiplayer currently has a Synchronizable with the specified UniqueID registered.
            </summary>
            <param name="id">The UniqueID of the Synchronizable to look up.</param>
            <returns>True if the Synchronizable exists, else false.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.IServiceStateListener.GetSynchronizable(System.Guid)">
            <summary>
            Get a Synchronizable through its UniqueID.
            </summary>
            <param name="id">The UniqueID of the Synchronizable to get.</param>
            <returns>The Synchronizable or null.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.IServiceStateListener.TryGetSynchronizable(System.Guid,Alteruna.Multiplayer.Core.IAdaptiveSerializable@)">
            <summary>
            Get a IAdaptiveSerializable through its UniqueID.
            </summary>
            <param name="id">The UniqueID of the Synchronizable to get.</param>
            <param name="synchronizable">The Synchronizable or null.</param>
            <returns>True if the Synchronizable was found, else false.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.IServiceStateListener.GetAllSynchronizables(System.Collections.Generic.List{Alteruna.Multiplayer.Core.Packets.SynchronizableElement})">
            <summary>
            Get a list of all currently registered Synchronizables.
            </summary>
            <param name="synchronizables">The list to be appended with all Synchronizables.</param>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.ISessionEmptyListener">
            <summary>
            Interface <c>ISessionPopulationListener</c> defines a generic interface for event subscription
            related to population changes on a given session.
            
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.ISessionListener">
            <summary>
            Interface <c>ISessionListener</c> defines a generic interface for event subscription
            on a given session.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ISessionListener.OnSessionClosed(Alteruna.Multiplayer.Core.Session,Alteruna.Multiplayer.Core.ResponseCode)">
            <summary>
            Session closed
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ISessionListener.OnSessionJoinRejected``1(``0,Alteruna.Multiplayer.Core.ResponseCode)">
            <summary>
            Session join rejected
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ISessionListener.OnSessionJoined(Alteruna.Multiplayer.Core.Session,Alteruna.Multiplayer.Core.Device,System.UInt16,System.Collections.Generic.IEnumerable{Alteruna.Multiplayer.Core.User})">
            <summary>
            Owner of listener joined session
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ISessionListener.OnSessionReady(Alteruna.Multiplayer.Core.Session,Alteruna.Multiplayer.Core.Device,System.UInt16)">
            <summary>
            Room ready
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ISessionListener.OnSessionObserved(Alteruna.Multiplayer.Core.Session,Alteruna.Multiplayer.Core.Device,System.UInt16)">
            <summary>
            Owner start observing session
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ISessionListener.OnSessionLeft(Alteruna.Multiplayer.Core.Session,Alteruna.Multiplayer.Core.Device)">
            <summary>
            Owner left joined session
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ISessionListener.OnSessionTransferred(Alteruna.Multiplayer.Core.Session,Alteruna.Multiplayer.Core.Device)">
            <summery>
            Owner left joined session
            </summery>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ISessionListener.OnSessionUnobserved(Alteruna.Multiplayer.Core.Session,Alteruna.Multiplayer.Core.Device)">
            <summery>
            Owner left observing session
            </summery>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ISessionListener.OnOtherJoined(Alteruna.Multiplayer.Core.Session,System.UInt16,System.String)">
            <summery>
            Remote user joined session
            </summery>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ISessionListener.OnUsersAdded(Alteruna.Multiplayer.Core.Session,Alteruna.Multiplayer.Core.User[])">
            <summary>
            Users added from room join response before session ready
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ISessionListener.OnOtherLeft(Alteruna.Multiplayer.Core.Session,System.UInt16,System.String)">
            <summery>
            Remote user left session
            </summery>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ISessionListener.OnObserverJoined(Alteruna.Multiplayer.Core.Session,System.UInt16,System.String)">
            <summery>
            Remote user observed session
            </summery>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ISessionListener.OnObserverLeft(Alteruna.Multiplayer.Core.Session,System.UInt16,System.String)">
            <summery>
            Remote user stopped observing session
            </summery>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ISessionListener.OnUpdatedSessionList(Alteruna.Multiplayer.Core.Device,System.Collections.Generic.List{Alteruna.Multiplayer.Core.SessionInfo})">
            <summery>
            Updated session list
            </summery>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ISessionListener.OnSessionCreated``1(Alteruna.Multiplayer.Core.Device,``0,System.UInt16,System.Boolean,System.Boolean)">
            <summery>
            Session created callback
            </summery>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ISessionListener.OnLoadTest(Alteruna.Multiplayer.Core.Device,Alteruna.Multiplayer.Core.ISession.ISessionID)">
            <summery>
            Load test primitive received
            </summery>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ISessionListener.OnLoadTestReply(Alteruna.Multiplayer.Core.Device,Alteruna.Multiplayer.Core.ISession.ISessionID,System.UInt32,System.Single)">
            <summery>
            Load test reply received with sequence number and server processing time
            </summery>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ISessionListener.OnSessionRemoved(Alteruna.Multiplayer.Core.Device,Alteruna.Multiplayer.Core.ISession.ISessionID,Alteruna.Multiplayer.Core.ResponseCode)">
            <summery>
            Session removed callback
            </summery>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ISessionListener.OnSessionUserDisconnected``1(Alteruna.Multiplayer.Core.Device,``0,Alteruna.Multiplayer.Core.ResponseCode)">
            <summery>
            Session user disconnected
            </summery>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.ISession.ISessionCurrentUsers.CurrentUsers">
            <summary>
            Current number of users in the room.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.ISession.ISessionCustomDataRO.CustomData">
            <summary>
            Custom data for a room.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.ISession.ISessionDisconnectUser.UserId">
            <summary>
            Id of the user to disconnect.
            65534 is the value for all users, meaning that all users in the session will be disconnected.
            65535 is the value for all users except the host, meaning that all users in the session will be disconnected except the host.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.ISession.ISessionDisconnectUser.Reason">
            <summary>
            Specifies the reason for disconnecting a user from the session.
            This can represent various scenarios such as a kick, an error, or the session being closed.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.ISession.ISessionDisconnectUser.DisconnectReason">
            <summary>
            Enum representing the possible reasons for a disconnection in the session context.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.ISession.ISessionID.SessionID">
            <summary>
            The ID of this <c>Room</c>.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.ISession.ISessionIsPasswordProtected.IsPasswordProtected">
            <summary>
            Defines if this <c>Room</c> requires a pin to enter.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.ISession.ISessionJoin.JoinRoom">
            <summary>
            Whether to join the room after creating it.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.ISession.ISessionMaxUsers.MaxUsers">
            <summary>
            Maximum number of users allowed in the room.
            0 for default.
            </summary>
            <remarks>
            There is a global limit that is set in the controller.
            The absolut max is 65533 users.
            </remarks>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.ISession.ISessionName.DisplayName">
            <summary>
            The name of this <c>Room</c>.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.ISession.ISessionOnDemand.OnDemand">
            <summary>
            Defines if this <c>Room</c> will automatically close when empty.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.ISession.ISessionPin.PinCode">
            <summary>
            Pin code for the room.
            0 means no pin code.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ISession.SessionPinExtensions.IsPasswordProtected(Alteruna.Multiplayer.Core.ISession.ISessionPin)">
            <summary>
            Gets if this <c>Room</c> requires a pin to enter.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.ISession.ISessionPrivate.Private">
            <summary>
            Defines if this <c>Room</c> should appear in room lists.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.ISession.ISessionRoomData.SceneId">
            <summary>
            Base room scene id.
            -1 means no specified scene.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.ISession.ISessionRoomData.CustomData">
            <summary>
            Custom data for a room.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.ISession.ISessionSceneIdRO.SceneId">
            <summary>
            Base room scene id.
            -1 means no specified scene.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.ISession.ISessionState.State">
            <summary>
            State of the session / Room.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.ISynchronizationManager">
            <summary>
            Interface <c>ISynchronizationManager</c> defines a generic interface for a manager 
            responsible for managing a set of ISynchronizable instances.
            
            An ISynchronizationManager is normally the upper layer of a client and/or server
            implemented with Trinity and is more often part of the application.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.ITransportEndPoint">
            <summary>
            Interface <c>ISessionListener</c> defines a generic interface for event subscription
            on a given session.
            
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.ITransportLayer">
            <summary>
            Transport layer interface.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ITransportLayer.Start(Alteruna.Multiplayer.Core.ITransportLayerListener,System.Int32,System.Boolean,System.Int32,Alteruna.Multiplayer.Core.LogBase)">
            <summary>
            Start transport layer, return local server port
            </summary>
            <param name="listener"></param>
            <param name="serverPort"></param>
            <param name="broadCastEnabled"></param>
            <param name="mtuOverride"></param>
            <param name="log"></param>
            <returns>port</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ITransportLayer.Stop">
            <summary>
            Stop transport layer
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ITransportLayer.Broadcast(Alteruna.Multiplayer.Core.ISerializable,System.Int32)">
            <summary>
            Send broadcast
            </summary>
            <param name="serializable"></param>
            <param name="destinationPort"></param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ITransportLayer.Update">
            <summary>
            Update transport layer
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ITransportLayer.Connect(System.Net.IPAddress,System.Int32)">
            <summary>
            Connect
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.ITransportLayerListener">
            <summary>
            Interface <c>ISessionListener</c> defines a generic interface for event subscription
            on a given session.
            
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.ITransportStreamReader">
            <summary>
            Interface <c>ITransportStreamReader</c> defines a generic interface for reading 
            from a generic transport stream
            
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.ITransportStreamWriter">
            <summary>
            Interface <c>ITransportStreamReader</c> defines a generic interface for wrtiting 
            to a generic transport stream
            
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ITransportStreamWriter.PutRaw(System.Byte[])">
            <summary>
            Write byte array to packet stream without length prefix.
            </summary>
            <param name="value">Byte array.</param>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.IUshortResult">
            <seealso cref="T:Alteruna.Multiplayer.Core.IEnumResult"/>
            <seealso cref="T:Alteruna.Multiplayer.Core.UshortResultExtensions"/>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.IEnumResult">
            <seealso cref="T:Alteruna.Multiplayer.Core.IUshortResult"/>
            <seealso cref="T:Alteruna.Multiplayer.Core.UshortResultExtensions"/>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.UshortResultExtensions">
            <seealso cref="T:Alteruna.Multiplayer.Core.IEnumResult"/>
            <seealso cref="T:Alteruna.Multiplayer.Core.IUshortResult"/>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.InviteCode.EncodeInviteCode(System.UInt32,System.UInt16)">
            <summary>
            Encode a room id and pin code into an invite code.
            If the room have a pin code, it have to be provided for a valid link.
            </summary>
            <param name="roomID">Room id.</param>
            <param name="pin">pincode / password for the room.</param>
            <exception cref="T:Alteruna.Multiplayer.Core.Exceptions.NotInRoomException">Thrown when not in a room.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.InviteCode.GetChar(System.Int32)">
            <summary>
            Must be between 0 and 35 (inclusive)
            Can store 5 bits of data.
            </summary>
            <param name="i">integer between 0 and 35 (inclusive)</param>
            <returns>character A-Z 0-9</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.InviteCode.DecodeInviteCode(System.String)">
            <summary>
            Join a room using an invite code.
            </summary>
            <param name="code">Invite code.</param>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.ListUtility">
            <summary>
            Provides utility functions for working with lists, such as resizing
            and managing the capacity of the list.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ListUtility.Resize``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Resizes the given list to the specified new size.
            If the new size is greater than the current size, the list's capacity will be adjusted accordingly.
            If the new size is smaller, extra elements are removed from the list.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list to resize.</param>
            <param name="newSize">The desired size of the list after resizing.</param>
            <returns>The number of elements added to or removed from the list as a result of resizing.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ListUtility.ResizeTrim``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Resizes the given list to the specified new size and trims any excess capacity.
            If the new size is greater than the current size, the list's capacity will be adjusted accordingly.
            If the new size is smaller, extra elements are removed from the list, and the excess capacity is trimmed.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list to resize and trim.</param>
            <param name="newSize">The desired size of the list after resizing.</param>
            <returns>The number of elements added to or removed from the list as a result of resizing.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ListUtility.TrySetCapacity``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Attempts to set the capacity of the specified list to the given value.
            </summary>
            <remarks>
            If the new capacity is greater than the current capacity, the list's capacity is updated.
            If the current capacity is already equal to or greater than the specified value, no changes are made.
            </remarks>
            <typeparam name="T">The type of elements in the list.</typeparam>
            <param name="list">The list whose capacity is to be modified.</param>
            <param name="newCapacity">The desired capacity for the list.</param>
            <returns>True if the capacity was changed; otherwise, false.</returns>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.LogBase">
            <summary>
            Abstract class <c>LogBase</c> defines a generic interface for all
            system logging used internally within the Trinity framework. 
            May be extended in order to present logs in e.g a system console.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.LogBase.Severity">
            <summary>
            Log severity grades.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.LogBase.Present(Alteruna.Multiplayer.Core.LogBase.Severity,System.String)">
            <summary>
            Method Present must be overidden by sub classes in order to customize
            log presentation.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.MethodArguments.SerializeInfo">
            <summary>
            Info for serialization.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.MethodArguments.SerializeInfo.LodLevel">
            <inheritdoc />
        </member>
        <member name="P:Alteruna.Multiplayer.Core.MethodArguments.SerializeInfo.ForceSync">
            <inheritdoc />
        </member>
        <member name="T:Alteruna.Multiplayer.Core.MethodArguments.UnserializeInfo">
            <summary>
            Info for unserialization.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.MethodArguments.UnserializeInfo.LodLevel">
            <inheritdoc />
        </member>
        <member name="P:Alteruna.Multiplayer.Core.MethodArguments.UnserializeInfo.ForceSync">
            <inheritdoc />
        </member>
        <member name="T:Alteruna.Multiplayer.Core.MethodArguments.RoomArgs">
            <summary>
            Arguments for creating a room.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.MethodArguments.RoomArgs.DisplayName">
            <summary>
            The name of this <c>Room</c>.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.MethodArguments.RoomArgs.SceneId">
            <summary>
            Base room scene id.
            -1 means no specified scene.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.MethodArguments.RoomArgs.CustomData">
            <summary>
            Custom data for a room.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.MethodArguments.RoomArgs.MaxUsers">
            <summary>
            Maximum number of users allowed in the room.
            0 for default.
            </summary>
            <remarks>
            There is a global limit that is set in the controller.
            The absolut max is 65533 users.
            </remarks>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.MethodArguments.RoomArgs.PinCode">
            <summary>
            Pin code for the room.
            0 means no pin code.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.MethodArguments.RoomArgs.Private">
            <summary>
            Defines if this <c>Room</c> should appear in room lists.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.MethodArguments.RoomArgs.OnDemand">
            <summary>
            Defines if this <c>Room</c> will automatically close when empty.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.MethodArguments.RoomArgs.JoinRoom">
            <summary>
            Whether to join the room after creating it.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.MethodArguments.RoomArgs.Host">
            <summary>
            The host user id of a room. If set to 65535, there will be no explicit host, and instead the user with the lowest ID will be "host".
            </summary>
            <remarks>
            Note that by default, the "host" is not hosting the room but is just a user that has some additional privileges.
            </remarks>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.NetworkStatistics">
            <summary>
            Class <c>NetworkStatistics</c> is responible for measuring network traffic on 
            a device running software built with Trinity.
            Keeps track of peek load, momentary load and ackumulated traffic on both transmitting
            and receiving channels.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.NetworkStatistics.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.IPackageOrderValidator">
            <summary>
            Used to validate the order of packages.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.PackageOrderValidatorNone">
            <summary>
            Used instead of PackageOrderValidator when order validation is not needed and should always should be valid.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.PackageOrderValidator">
             <summary>
             Used to validate the order of packages.
             </summary>
             <remarks>
             Tracks order and can be used to verify that new data is newer than the last.
             this can acure when a pacgage is delayed and anothe pacgage arrives before the delayed one.
             </remarks>
             <example>
            	<code>
             public class TransformSynchronizable : Synchronizable
             {
             	private PackageOrderValidator myValidator;
            
             	public override void DisassembleData(Reader reader, byte LOD)
             	{
             		if (myValidator.Validate(reader))
             		{
             			// read new data
             		}
            			else
            			{
            				// this data have been delayed and might not be relevant anymore.
            			}
             	}
            
            		public override void AssembleData(Writer writer, byte LOD)
            		{
             		myValidator.Append(writer);
            			// Write data
            		}
             
             }
             </code>
             </example>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PackageOrderValidator.Validate(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <summary>
            Validate that given package id is not a recent previous package id.
            </summary>
            <param name="reader">Data reader.</param>
            <returns>True when the package id is newer than last.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PackageOrderValidator.Validate(System.Byte)">
            <summary>
            Validate that given package id is not a recent previous package id.
            </summary>
            <param name="incoming">Incoming package id.</param>
            <returns>True when the package id is newer than last.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PackageOrderValidator.Append(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer)">
            <summary>
            Append the package id and write it to the writer.
            </summary>
            <param name="writer">Data writer</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PackageOrderValidator.Append">
            <summary>
            Append the package id and return it.
            </summary>
            <returns>Appended package id.</returns>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.UserId">
            <summary>
            User Indexes to target multiple users.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.UserId.All">
            <summary>
            Use to target all except self.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.UserId.AllInclusive">
            <summary>
            Use to target all users, including self.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Reliability">
            <summary>
            Type <c>Reliability</c> defines modes of reliability
            for messages sent using Trinity Network Protocol 
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.PacketPriority">
            <summary>
            Type <c>PacketPriority</c> defines level of priority
            for messages sent using Trinity Network Protocol 
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.SessionID">
            <summary>
            Type <c>Session</c> defines constant for
            <value>Any</value> session. Used for filtering purposes to allow any
            organization to connect and use the provided functionality.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.PacketBase">
            <summary>
            Class <c>PacketBase</c> is the base class for all packet types
            representing the underlaying functional primitives as well as
            classes for synchronizing application states.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PacketBase.SetFlag(Alteruna.Multiplayer.Core.PacketFlags)">
            <summary>
            Set flags with OR operation.
            </summary>
            <param name="flag"></param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PacketBase.ClearFlag(Alteruna.Multiplayer.Core.PacketFlags)">
            <summary>
            Clear flags with mask.
            </summary>
            <param name="flag">mask on with flags should be cleared.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PacketBase.IsSet(Alteruna.Multiplayer.Core.PacketFlags)">
            <summary>
            Check if flag is set
            </summary>
            <param name="flag"></param>
            <returns>True when target flag is set to true.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PacketBase.Serialize(Alteruna.Multiplayer.Core.ITransportStreamWriter)">
            <summary>
            Serialize packet with packet processor
            </summary>
            <param name="processor">StreamWriter</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PacketBase.Unserialize(Alteruna.Multiplayer.Core.ITransportStreamReader)">
            <summary>
            Unserialize packet from packet processor
            </summary>
            <param name="processor">StreamReader</param>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.PacketProcessing.CompressionMethod">
            <summary>
            Compression types for data compression.
            </summary>
            <example>
            Here is an example of how to use compression in a <c>Synchronizable</c>.
            <code>
            using Alteruna;
            using UnityEngine;
            public class SyncCompressed : Synchronizable
            {
            	public string SData = "Hello, World!";
            	private string _oldSData;
            
            	public byte[] Data = new byte[512];
            	private byte[] _oldData;
            
            	// Set the old data to the current data so that only new data is sent.
            	private void Start()
            	{
            		_oldData = Data;
            		_oldSData = SData;
            	}
            
            	// Check if the data has changed, and if so, commit it.
            	private void Update()
            	{
            		if (Data != _oldData)
            		{
            			_oldData = Data;
            			Commit();
            		}
            		else if (SData != _oldSData)
            		{
            			_oldSData = SData;
            			Commit();
            		}
            
            		SyncUpdate();
            	}
            
            	// This is called when the data is being sent to the server.
            	public override void AssembleData(Writer writer, byte LOD)
            	{
            		// Mark the start of the compressed data
            		writer.StartCompress();
                
            		// Write the data
            		writer.Write(SData);
            		writer.Write(Data);
                
            		// Compress the data
            		var data = writer.EndCompress(CompressionMethod.NibbleZeroIndicator);
                
            		Debug.Log("We saved " + data + " bytes by compressing the data!");
            	}
            
            	// This is called when the data is being received from the server.
            	public override void DisassembleData(Reader reader, byte LOD)
            	{
            		// Decompress the data.
            		reader.Decompress(CompressionMethod.NibbleZeroIndicator);
                
            		// Read the string data.
            		SData = reader.ReadString();
            		_oldSData = SData;
                
            		// Read the byte array data.
            		Data = reader.ReadByteArray();
            		_oldData = Data;
            	}
            }
            </code>
            </example>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.PacketProcessing.CompressionMethod.None">
            <summary>
            No compression.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.PacketProcessing.CompressionMethod.GZip">
            <summary>
            Zip compression.
            Less effective on small amounts of data.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.PacketProcessing.CompressionMethod.RunLengthEncoding">
            <summary>
            Run-Length Encoding (RLE) compression.
            Effective form compressing data with many repeating bytes.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.PacketProcessing.CompressionMethod.Base64">
            <summary>
            Base64 encoding.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.PacketProcessing.CompressionMethod.NibbleZeroIndicator">
            <summary>
            Nibble Zero Indicator (NZI) compression.
            Inefficient for compressing data similar to ASCII and UTF8 strings.
            Works as well on small amounts of data as it does on large amounts of data.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.PacketProcessing.Compression.CompressionMethods">
            <summary>
            Compression methods for data compression.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PacketProcessing.Compression.CompressionMethods.Compress(Alteruna.Multiplayer.Core.PacketProcessing.CompressionMethod,System.Byte[])">
            <summary>
            Compress byte array with given compression method.
            </summary>
            <param name="compressionMethodMethod">compression method.</param>
            <param name="data">byte array of uncompressed data.</param>
            <returns>compressed data</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PacketProcessing.Compression.CompressionMethods.Decompress(Alteruna.Multiplayer.Core.PacketProcessing.CompressionMethod,System.Byte[])">
            <summary>
            Decompress byte array with given compression method.
            </summary>
            <param name="compressionMethodMethod">compression method.</param>
            <param name="data">byte array of compressed data.</param>
            <returns>decompressed data</returns>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.PacketProcessing.Compression.NibbleZeroIndicator">
            <summary>
            In-house compression method written by Simon Jonasson.
            This method is efficient at storing numeric values, but not so efficient at storing ASCII or UTF8 strings.
            
            We take advantage of the fact that numeric values
            commonly contains at least one nibble that is zero. (nibble = 4 bits = half a byte)
            A random byte has a 25% chance of having at least one zero nibble.
            By using a flag byte where each bit represents a nibble, we can store if the nibble is zero or not;
            then only write the non-zero nibbles.
            
            So for example, if we want to store the data { 0x00 0x00 0x00 0x00 }, the compressed data would be { 0x00 }.
            And if we want to store the data { 0x00 0x00 0x0A 0x01 }, the compressed data would be { 0x05 0xA1 }.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.PacketProcessing.EncryptionMethod.Scramble">
            <summary>
            Scrambles the data based on a key unique to your project.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.PacketProcessing.Encryption.ScrambleEncryption">
            <summary>
            Simple encryption that does not make increase the size of the data transmitted.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader">
            <summary>
            Class <c>Writer</c> is used to write data to be sent to other Users through a <c>Synchronizable</c>.
            </summary>
            <seealso cref="T:Alteruna.Multiplayer.Core.ITransportStreamReader"/>
            <seealso cref="N:Alteruna.Multiplayer.Core.PacketProcessing.Writer"/>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader.Decompress(Alteruna.Multiplayer.Core.PacketProcessing.CompressionMethod)">
            <summary>
            Compresses the data already written to the writer.
            If StartCompress has not been called, the data will be compressed from the start of the writer.
            </summary>
            <param name="method">Compression method used.</param>
            <seealso cref="T:Alteruna.Multiplayer.Core.PacketProcessing.CompressionMethod"/>
            <seealso cref="!:Writer.StartCompress"/>
            <seealso cref="!:Writer.EndCompress"/>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader.Decrypt(Alteruna.Multiplayer.Core.PacketProcessing.EncryptionMethod)">
            <summary>
            Decrypts the data already written to the writer.
            </summary>
            <param name="method">Encryption method used.</param>
            <seealso cref="T:Alteruna.Multiplayer.Core.PacketProcessing.EncryptionMethod"/>
            <seealso cref="!:Writer.StartEncrypt"/>
            <seealso cref="!:Writer.EndEncrypt"/>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader.DeserializePackedString``1(System.String)">
            <summary>
            Unpacks a string that has been packed using <see cref="!:Writer.SerializeAndPackString&lt;T&gt;"/>.
            </summary>
            <param name="data">string data.</param>
            <typeparam name="T">type</typeparam>
            <returns>Object of given type.</returns>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer">
            <summary>
            Class <c>Reader</c> is used to read data recieved from another User.
            </summary>
            <seealso cref="T:Alteruna.Multiplayer.Core.ITransportStreamWriter"/>
            <seealso cref="N:Alteruna.Multiplayer.Core.PacketProcessing.Reader"/>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer.StartCompress">
            <summary>
            Sets the current position of the writer as the start of the data to be compressed.
            Default to the start of the Writer.
            </summary>
            <seealso cref="T:Alteruna.Multiplayer.Core.PacketProcessing.CompressionMethod"/>
            <seealso cref="M:Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer.EndCompress(Alteruna.Multiplayer.Core.PacketProcessing.CompressionMethod)"/>
            <seealso cref="!:Reader.Decompress"/>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer.EndCompress(Alteruna.Multiplayer.Core.PacketProcessing.CompressionMethod)">
            <summary>
            Compresses the data already written to the writer.
            If StartCompress has not been called, the data will be compressed from the start of the writer.
            </summary>
            <param name="method">Compression method used.</param>
            <returns>Number of bytes saved by compression.</returns>
            <seealso cref="T:Alteruna.Multiplayer.Core.PacketProcessing.CompressionMethod"/>
            <seealso cref="M:Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer.StartCompress"/>
            <seealso cref="!:Reader.Decompress"/>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer.StartEncrypt">
            <summary>
            Sets the current position of the writer as the start of the data to be encrypted.
            Default to the start of the Writer.
            </summary>
            <seealso cref="T:Alteruna.Multiplayer.Core.PacketProcessing.EncryptionMethod"/>
            <seealso cref="M:Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer.EndEncrypt(Alteruna.Multiplayer.Core.PacketProcessing.EncryptionMethod)"/>
            <seealso cref="!:Reader.Decrypt"/>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer.EndEncrypt(Alteruna.Multiplayer.Core.PacketProcessing.EncryptionMethod)">
            <summary>
            Encrypts the data already written to the writer.
            If StartEncrypt has not been called, the data will be encrypted from the start of the writer.
            </summary>
            <param name="method">Encryption method used.</param>
            <returns>Number of bytes saved by encryption.</returns>
            <seealso cref="T:Alteruna.Multiplayer.Core.PacketProcessing.EncryptionMethod"/>
            <seealso cref="M:Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer.StartEncrypt"/>
            <seealso cref="!:Reader.Decrypt"/>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer.WriteObject(System.Object,System.Type)">
            <summary>
            Write an object of given type.
            </summary>
            <param name="value">object</param>
            <param name="type">Type may be ether a value type object, implementing IFormatter, or is serializable.</param>
            <exception cref="T:System.ArgumentNullException">Given object was null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown when given object was not serializable.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer.WriteObject``1(``0)">
            <summary>
            Write an object of given type.
            </summary>
            <param name="value">object</param>
            <typeparam name="T">Type may be ether a value type object, implementing IFormatter, or is serializable.</typeparam>
            <exception cref="T:System.ArgumentNullException">Given object was null</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Thrown when given object was not serializable.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer.WriteGeneric``1(``0)">
            <summary>
            identical to WriteObject
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer.SerializeAndPackString``1(``0)">
            <summary>
            Pack an object into a string that cane later be unpacked using <see cref="!:Reader.DeserializePackedString&lt;T&gt;"/>.
            </summary>
            <param name="obj">Given object to pack.</param>
            <typeparam name="T">Object Type.</typeparam>
            <returns>Packed string.</returns>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.HostAvailablePacket">
            <summary>
            Class <c>HostAvailablePacket</c> defines a protocol primitive
            sent by Trinity devices when a device is available and has 
            playroom that other devices can join.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.HostUnavailablePacket">
            <summary>
            Class <c>HostUnavailablePacket</c> defines a protocol primitive
            sent by Trinity devices when it is no longer available.
            This can occur when the device is about to shut down, or that the
            device no longer hosts a playroom.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.ConnectPacket">
            <summary>
            Class <c>ConnectPacket</c> defines a protocol primitive
            sent by Trinity devices when a connection attempt is initiated.
            Sent from the client to the playroom host.
            </summary>
            
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.ConnectReplyPacket">
            <summary>
            Class <c>ConnectReplyPacket</c> defines a protocol primitive
            sent by Trinity devices as a response to received <c>ConnectPacket</c> 
            Includes response codes indicating if the connection attempt was accepted
            or if and why the connection attempt was rejected.
            
            </summary>
            <seealso cref="T:Alteruna.Multiplayer.Core.Packets.ConnectPacket"/>
            
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.DirectMessagePackage">
            <summary>
            Class <c>DirectMessagePackage</c> defines the a message primitive
            with custom serializable data sent to a limited amount of receivers
            in a session.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.MulticastPacket">
            <summary>
            Class <c>MulticastPacket</c> defines the protocol primitive
            sent in order to load test servers routing capabilities
            </summary>
            
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.LifesignPacket">
             <summary>
             Class <c>MulticastPacket</c> defines the protocol primitive
             sent in order to load test servers routing capabilities
             </summary>
            
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.ProcedureCallFlags">
            <summary>
            Class <c>ProcedureCallFlags</c> defines the core attributes
            if a Trinity framework procedure call
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.ProcedureCallPacket">
            <summary>
            Class <c>ProcedureCallPacket</c> defines the core attributes
            for all Trinity framework procedure calls
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.ProcedureMulticastPacket">
            <summary>
            Class <c>ProcecureCallPacket</c> defines the core attributes
            for all Trinity framework procedure calls
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.ProcedureCallReplyPacket">
            <summary>
            Class <c>ProcedureCallReplyPacket</c> defines the core attributes
            for all Trinity framework procedure calls
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.ProcedureCallAckPacket">
            <summary>
            Class <c>ProcedureCallReplyPacket</c> defines the core attributes
            for all Trinity framework procedure calls
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.ResourceWaitPacket">
            <summary>
            Class <c>ResourceWaitPacket</c> defines a protocol primitive
            sent by Trinity devices in order to wait for exclusive access to
            an identified resource in a joined playroom.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.ResourceTryLockPacket">
            <summary>
            Class <c>ResourceTryLockPacket</c> defines a protocol primitive
            sent by Trinity devices in order to request exclusive access to
            an identified resource in a joined playroom. As a difference
            to <c>ResourceWaitPacket</c>, the request will return immediately
            indicating wheither the sending device acquired the lock or if
            the resource is currently locked by another device.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.ResourceLockReplyPacket">
            <summary>
            Class <c>ResourceLockReplyPacket</c> defines a protocol primitive
            sent by Trinity devices as a response to a <c>ResourceTryLockPacket</c>
            or a <c>ResourceWaitPacket</c> request.
            Returns lock acquisition result to the sender.
            </summary>
            <seealso cref="T:Alteruna.Multiplayer.Core.Packets.ResourceTryLockPacket"/>
            <seealso cref="T:Alteruna.Multiplayer.Core.Packets.ResourceWaitPacket"/>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionPacketBase">
            <summary>
            Class <c>SessionPacketBase</c> defines the core attributes
            that all session related primitives must include.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionUpdateStatePacket">
            <summary>
            Class <c>SessionUpdateStatePacket</c> defines the protocol primitive
            sent by devices to update the session state.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionRenamePacket">
            <summary>
            Class <c>SessionUpdateStatePacket</c> defines the protocol primitive
            sent by devices to update the session name.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionGetPacket">
            <summary>
            Class <c>SessionGetPacket</c> defines the protocol primitive
            sent by devices to request a list of session/playrooms from a host.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionLeavePacket">
            <summary>
            Class <c>SessionLeavePacket</c> defines the protocol primitive
            sent by devices as a request to leave a currently joined session.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionLeftPacket">
            <summary>
            Class <c>SessionLeftPacket</c> defines the protocol primitive
            sent to all joined devices in a session when a device has left 
            the session. Sent to all other devices that are still joined.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionJoinedPacket">
            <summary>
            Class <c>SessionJoinedPacket</c> defines the protocol primitive
            sent to all joined devices in a session when a new device has joined 
            the session. 
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionObservedPacket">
            <summary>
            Class <c>SessionObservedPacket</c> defines the protocol primitive
            sent to all joined devices in a session when a new device has started
            to observe the session. 
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionJoinPacket">
            <summary>
            Class <c>SessionJoinPacket</c> defines the protocol primitive
            sent to a playroom host when a device wish to join a hosted session.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionJoinReplyPacket">
            <summary>
            Class <c>SessionJoinReplyPacket</c> defines the protocol primitive
            sent as a response to received <c>SessionJoinPacket</c> indicating
            if the join request was accepted or why it was rejected.
            </summary>
            <seealso cref="T:Alteruna.Multiplayer.Core.Packets.SessionJoinPacket"/>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionObservePacket">
            <summary>
            Class <c>SessionObservePacket</c> defines the protocol primitive
            sent to a playroom host when a device wish to observe a hosted session.
            An observe request, as a difference from a join request, indicates that
            the observer do not commit its application state. An observer solely 
            receives synchronization primities and updates its application state
            accordingly.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionObserveReplyPacket">
            <summary>
            Class <c>SessionObserveReplyPacket</c> defines the protocol primitive
            sent as a response to received <c>SessionObservePacket</c> indicating
            if the join request was accepted or why it was rejected.
            </summary>
            <seealso cref="T:Alteruna.Multiplayer.Core.Packets.SessionObservePacket"/>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionCreatePacket">
            <summary>
            Class <c>SessionCreatePacket</c> defines the protocol primitive
            sent to a playroom host to request a new session/playroom to be 
            created.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionCreateReplyPacket">
            <summary>
            Class <c>SessionCreateReplyPacket</c> defines the protocol primitive
            sent as a response to <c>SessionCreatePacket</c>.
            </summary>
            <seealso cref="T:Alteruna.Multiplayer.Core.Packets.SessionCreatePacket"/>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionGetReplyPacket">
            <summary>
            Class <c>SessionGetReplyPacket</c> defines the protocol primitive
            sent as a response to <c>SessionGetPacket</c>. Includes information
            about the available sessions in the host.
            </summary>
            <seealso cref="T:Alteruna.Multiplayer.Core.Packets.SessionGetPacket"/>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionTransferPacket">
            <summary>
            Class <c>SessionTransferPacket</c> defines the protocol primitive
            sent in order to request that hosted session to be transfered
            to the receving host. 
            </summary>
            <seealso cref="T:Alteruna.Multiplayer.Core.Packets.SessionTransferReplyPacket"/>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionTransferReplyPacket">
            <summary>
            Class <c>SessionTransferReplyPacket</c> defines the protocol primitive
            sent as a response to a received <c>SessionTransferPacket</c>.
            Upon success, the receiving host has taken over the session and reports
            the session ID of the transfered session on the new host.
            </summary>
            <seealso cref="T:Alteruna.Multiplayer.Core.Packets.SessionTransferPacket"/>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionMigratePacket">
            <summary>
            Class <c>SessionMigratePacket</c> defines the protocol primitive
            sent as a final step in a session tranfer process.
            When a session has been transfered to a new host. The device
            that initiated the session tranfer process must send a <c>SessionMigratePacket</c>
            to all other (except the new transfered host) devices in the session in order
            for them to connect and migrate to the new host.
            </summary>
            <seealso cref="T:Alteruna.Multiplayer.Core.Packets.SessionTransferPacket"/>
            <seealso cref="T:Alteruna.Multiplayer.Core.Packets.SessionTransferReplyPacket"/>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionDisconnectUserPacket">
            <summary>
            Class <c>SessionDisconnectUserPacket</c> defines the protocol primitive
            sent in order to remotely remove a user from remove session
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionDisconnectUserReplyPacket">
            <summary>
            Class <c>SessionDisconnectUserReplyPacket</c> defines the protocol primitive
            sent as a reply to a user disconnect request 
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionRemovePacket">
            <summary>
            Class <c>SessionRemovePacket</c> defines the protocol primitive
            sent in order to remotely remove a session from a server
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionRemoveReplyPacket">
            <summary>
            Class <c>SessionRemoveReplyPacket</c> defines the protocol primitive
            sent as a reply to a remove request 
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.QueryDeviceStatPacket">
            <summary>
            Class <c>QueryDeviceStatPacket</c> defines the protocol primitive
            sent in order to request device statistics
            </summary>
            
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.QueryDeviceStatReplyPacket">
            <summary>
            Class <c>QueryDeviceStatReplyPacket</c> defines the protocol primitive
            sent as a reply to a received <c>QueryDeviceStatPacket</c>. Carries device statistics.
            </summary>
            
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.ICodecRequest">
            <summary>
            Interface <c>ICodecRequest</c> defines a interface to receiving
            a <c>ISerializable</c> for a given globally unique identifier.
            </summary>
            <seealso cref="T:Alteruna.Multiplayer.Core.ISerializable"/>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Packets.ICodecRequest.GetCodecForId(System.Guid)">
            <summary>
            Get <c>AdaptiveSerializable</c> for a given codec id.
            </summary>
            <param name="codecId">id</param>
            <returns>Adaptive serializable</returns>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionForceSyncPacket">
            <summary>
            Class <c>SessionForceSyncPacket</c> defines the protocol primitive
            sent from a host to selected device in order to force the device
            to synchronize all its available states.
            Normally sent to an already joined device in a session when a new device has joined. 
            Primarily in order to ensure that the new device is updated with the current
            state.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SynchronizableElement">
            <summary>
            Struct <c>SynchronizableElement</c> models an element
            represented by a globally unique identifier and an implementation
            of an <c>ISerializable</c>
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionForceSyncReplyPacket">
            <summary>
            Class <c>SessionForceSyncReplyPacket</c> defines the protocol primitive
            sent from a host to selected device in order to force the device
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.SessionSyncPacket">
            <summary>
            Class <c>SessionSyncPacket</c> defines the protocol primitive
            sent from a client to the device hosting the session. Carries 
            a collection of synchronizables that it intend to update.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.LoadTestPacket">
            <summary>
            Class <c>TestPacket</c> defines the protocol primitive
            sent in order to load test servers routing capabilities
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Packets.LoadTestReplyPacket">
            <summary>
            Class <c>LoadTestReplyPacket</c> defines the protocol primitive
            sent as a reply to a received <c>LoadTestPacket</c>. Carries same payload as 
            request and is only sent to originator.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.PacketType">
            <summary>
            Class <c>Playroom</c> abstracts an available playroom with
            a host and alphanumeric ID/name.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.ProcedureParameters">
            <summary>
            Parameters containing data to be sent together with Remote Procedure Calls.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.ResponseCode">
            <summary>
            <c>ResponsoCodes</c> enumation of all valid return codes
            that may be reported from operations in Trinity Network Protocol.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Room">
            <summary>
            The <c>Room</c> class defines a room in the network.
            Users can join and leave rooms and send data to all other users in the same room.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.Room.DisplayName">
            <summary>
            The name of this <c>Room</c>.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.Room.SessionID">
            <summary>
            The ID of this <c>Room</c>.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.Room.SceneId">
            <summary>
            Base room scene id.
            -1 means no specified scene.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.Room.CustomData">
            <summary>
            Custom data for a room.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.Room.Users">
            <summary>
            The Users currently in this <c>Room</c>.
            Only gets populated if in the same <c>Room</c>.
            </summary>
            <seealso cref="P:Alteruna.Multiplayer.Core.Room.CurrentUsers"/>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.Room.MaxUsers">
            <summary>
            The maximum allowed number of Users within this <c>Room</c>
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.Room.Private">
            <summary>
            Defines if this <c>Room</c> should appear in room lists.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.Room.Local">
            <summary>
            Defines if this <c>Room</c> is hosted locally.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.Room.IsPasswordProtected">
            <summary>
            Defines if this <c>Room</c> requires a pin to enter.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.Room.OnDemand">
            <summary>
            Defines if this <c>Room</c> will automatically close when empty.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.Room.IsLocked">
            <summary>
            Get if this <c>Room</c> is locked.
            True when the room state is busy.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Room.GetUserCount">
            <summary>
            Amount of users in this <c>Room</c>.
            </summary>
            <returns>User count.</returns>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.Room.CurrentUsers">
            <summary>
            Amount of users in this <c>Room</c>.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Room.Join">
            <summary>
            Attempt to join this <c>Room</c>.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Room.Join(System.UInt16)">
            <summary>
            Attempt to join this <c>Room</c> using a pin.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Room.Destroy">
            <summary>
            Destroy room from server.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Room.Leave">
            <summary>
            Send to leave request to current <c>Room</c>.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Room.KickUser(System.UInt16)">
            <summary>
            Kick user from current room.
            </summary>
            <param name="userId">User index.</param>
            <exception cref="T:Alteruna.Multiplayer.Core.Exceptions.UserIndexArgumentOutOfRangeException">Thrown when given user index was not found.</exception>
            <exception cref="T:Alteruna.Multiplayer.Core.Exceptions.NotInRoomException">Thrown when not in room.</exception>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Service">
            <summary>
            Alteruna service class.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.Service.IsAuthenticated">
            <summary>Get if the project is authenticated.</summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Service.JoinOwnRoom(Alteruna.Multiplayer.Core.MethodArguments.RoomArgs)">
            <summary>
            Join local room.
            Can create room if it does not exist and room args are given.
            </summary>
            <param name="createRoomArgs">Args for new room.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Service.JoinMatchmaking">
            <summary>
            Join a Room through matchmaking.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Service.JoinMatchmaking(System.UInt16)">
            <summary>
            Join a Room through matchmaking using a pin.
            </summary>
            <param name="pin">The pin to join the Room with.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Service.JoinOnDemandRoom">
            <summary>
            Create and Join a Room.
            The Room will close when the last player leaves the room.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Service.JoinOnDemandRoom(System.UInt32)">
            <summary>
            Join Room by id.
            The Room will close when the last player leaves the room.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Service.CreateRoom(System.String,System.UInt16,System.Boolean,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Create a new room.
            </summary>
            <param name="displayName">name of the room.</param>
            <param name="maxUsers">Maximum number of users in the room.</param>
            <param name="privateRoom">Prevent room from appearing in room lists.</param>
            <param name="pin">Pin code. Zero mens no pin code.</param>
            <param name="joinRoom">Join room when creating it.</param>
            <param name="onDemand">Close room when lats client leaves.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Service.LockRoom">
            <summary>
            Lock current room. 
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Service.UnlockRoom(System.Boolean)">
            <summary>
            Unlock current room.
            </summary>
            <param name="matchmaking">Set state for matchmaking.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Service.SetRoomName(System.String)">
            <summary>
            Rename currently joined room.
            </summary>
            <param name="name">New room name.</param>
            <exception cref="T:Alteruna.Multiplayer.Core.Exceptions.NotInRoomException">Thrown when not in room.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Service.LeaveCurrentRoom">
            <summary>
            Send to leave request to current room.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Service.KickUser(System.UInt16)">
            <summary>
            Kick user from current room.
            </summary>
            <param name="userId">User index.</param>
            <exception cref="T:Alteruna.Multiplayer.Core.Exceptions.UserIndexArgumentOutOfRangeException">Thrown when given user index was not found.</exception>
            <exception cref="T:Alteruna.Multiplayer.Core.Exceptions.NotInRoomException">Thrown when not in room.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Service.RefreshAvailableRooms(Alteruna.Multiplayer.Core.Service.RefreshAvailableRoomsMode,Alteruna.Multiplayer.Core.Service.RefreshAvailableRoomsArgs)">
            <summary>
            Refresh the AvailableRooms list containing the currently available Rooms on the server.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Service.RefreshAvailableRooms">
            <summary>
            Refresh Available Rooms using
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Service.RefreshAvailableRoomsMode">
            <summary>Flag for what to check</summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.Service.RefreshAvailableRoomsMode.FromConnection">
            <summary>Get Rooms from current active connection.</summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.Service.RefreshAvailableRoomsMode.FromRemote">
            <summary>
            Get Room info from all servers.
            Only for Single Room Mode
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.RemoteProcedure">
            <summary>
            RPC delegate.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.RemoteProcedureReply">
            <summary>
            RPC reply delegate.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.RemoteProcedureAck">
            <summary>
            RPC ack delegate.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.ServiceState">
            <summary>
            Handle states and events for alternate service.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ServiceState.JoinOwnRoom(Alteruna.Multiplayer.Core.SessionManager,Alteruna.Multiplayer.Core.MethodArguments.RoomArgs)">
            <summary>
            Join local room.
            Can create room if it does not exist and room args are given.
            </summary>
            <param name="manager">Synchronization manager.</param>
            <param name="createRoomArgs">Args for new room.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ServiceState.Sync(System.Guid,Alteruna.Multiplayer.Core.IAdaptiveSerializable,System.Collections.Generic.List{System.UInt16},Alteruna.Multiplayer.Core.Reliability)">
            <summary>
            Serialize and route a package.
            </summary>
            <param name="id">UID of a registered target.</param>
            <param name="serializable">Handler of data read and write.</param>
            <param name="users">Target users.</param>
            <param name="reliability">Reliability used for routing.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ServiceState.Sync(Alteruna.Multiplayer.Core.Packets.SynchronizableElement,System.Collections.Generic.List{System.UInt16},Alteruna.Multiplayer.Core.Reliability)">
            <summary>
            Serialize and route a package.
            </summary>
            <param name="synchronizableElement">Content.</param>
            <param name="users">Target users.</param>
            <param name="reliability">Reliability used for routing.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ServiceState.Sync(System.Guid,Alteruna.Multiplayer.Core.IAdaptiveSerializable,Alteruna.Multiplayer.Core.Reliability)">
            <summary>
            Serialize and route a package.
            </summary>
            <param name="id">UID of a registered target.</param>
            <param name="serializable">Handler of data read and write.</param>
            <param name="reliability">Reliability used for routing.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ServiceState.Sync(Alteruna.Multiplayer.Core.Packets.SynchronizableElement,Alteruna.Multiplayer.Core.Reliability)">
            <summary>
            Serialize and route a package.
            </summary>
            <param name="synchronizableElement">Content.</param>
            <param name="reliability">Reliability used for routing.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ServiceState.InvokeRemoteProcedure(System.String,Alteruna.Multiplayer.Core.UserId,Alteruna.Multiplayer.Core.ProcedureParameters,Alteruna.Multiplayer.Core.ISerializable,Alteruna.Multiplayer.Core.Reliability,Alteruna.Multiplayer.Core.RemoteProcedureReply,Alteruna.Multiplayer.Core.RemoteProcedureAck)">
            <summary>
            Invoke a Remote Procedure Call (RPC).
            </summary>
            <param name="name">The name of the RPC to invoke.</param>
            <param name="toUserID">The UserID of the User on which to call the procedure.</param>
            <param name="parameters">The parameters to be sent to the RPC.</param>
            <param name="userData">Alternative to the parameters.</param>
            <param name="reliability">The reliability at which to invoke the RPC.</param>
            <param name="replyCallback">RPC replay callback.</param>
            <returns>RPC call id of the RPC. Default is 0.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ServiceState.InvokeRemoteProcedure(System.String,System.UInt16,Alteruna.Multiplayer.Core.ProcedureParameters,Alteruna.Multiplayer.Core.ISerializable,Alteruna.Multiplayer.Core.Reliability,Alteruna.Multiplayer.Core.RemoteProcedureReply,Alteruna.Multiplayer.Core.RemoteProcedureAck)">
            <summary>
            Invoke a Remote Procedure Call (RPC).
            </summary>
            <param name="name">The name of the RPC to invoke.</param>
            <param name="toUserID">The UserID of the User on which to call the procedure.</param>
            <param name="parameters">The parameters to be sent to the RPC.</param>
            <param name="userData">Alternative to the parameters.</param>
            <param name="reliability">The reliability at which to invoke the RPC.</param>
            <param name="replyCallback">RPC replay callback.</param>
            <returns>RPC call id of the RPC. Default is 0.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ServiceState.MulticastRemoteProcedure(System.String,System.Collections.Generic.List{System.UInt16},Alteruna.Multiplayer.Core.ProcedureParameters,Alteruna.Multiplayer.Core.ISerializable,Alteruna.Multiplayer.Core.Reliability,Alteruna.Multiplayer.Core.RemoteProcedureReply,Alteruna.Multiplayer.Core.RemoteProcedureAck)">
            <summary>
            Invoke a Remote Procedure Call (RPC) for multiple Users.
            </summary>
            <param name="name">The name of the RPC to invoke.</param>
            <param name="toUsers">The UserIDs of the Users on which to call the procedure.</param>
            <param name="parameters">The parameters to be sent to the RPC.</param>
            <param name="userData">The user data to be sent to the RPC.</param>
            <param name="reliability">The reliability at which to invoke the RPC.</param>
            <param name="replyCallback">RPC replay callback.</param>
            <returns>The callID of the RPC.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ServiceState.RegisterRemoteProcedure(System.String,Alteruna.Multiplayer.Core.RemoteProcedure)">
            <summary>
            Register a Remote Procedure.
            </summary>
            <param name="name">The name of the procedure.</param>
            <param name="callback">The function to call through the procedure.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ServiceState.ReplyRemoteProcedure(System.UInt32,System.UInt16,Alteruna.Multiplayer.Core.ProcedureParameters,Alteruna.Multiplayer.Core.ISerializable)">
            <summary>
            Reply to a Remote Procedure Called by another User.
            </summary>
            <param name="callID">The callID of the RPC to reply to.</param>
            <param name="result">The result of the procedure.</param>
            <param name="parameters">The parameters to be sent with the reply.</param>
            <param name="userData">Alternative to parameters.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ServiceState.GetCodecForId(System.Guid)">
            <summary>
            Get <c>AdaptiveSerializable</c> for a given codec id.
            </summary>
            <param name="codecId">id</param>
            <returns>Adaptive serializable</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ServiceState.TryGetCodecForId(System.Guid,Alteruna.Multiplayer.Core.IAdaptiveSerializable@)">
            <summary>
            Get a <c>AdaptiveSerializable</c> for a given codec id.
            </summary>
            <param name="codecId">id</param>
            <param name="codec">The IAdaptiveSerializable or null.</param>
            <returns>True if the IAdaptiveSerializable was found, else false.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.ServiceStateCoreBridge.GetHash(System.String)">
            <summary>
            Get hash of name
            Starting with .NET Core and .NET 5+, the behavior of string.GetHashCode() is deterministic by default.
            to ensure consistency we use SHA256 instead of GetHashCode().
            </summary>
            <param name="s">input</param>
            <returns>Hash</returns>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.SessionState">
            <summary>
            Enum <c>SessionState</c> models attributes of a session, such as its ID,
            maximum number of users and current quota.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.SessionInfo">
            <summary>
            Struct <c>SessionInfo</c> models attributes of a session, such as its ID,
            maximum number of users and current quota.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Session">
            <summary>
            Class <c>Session</c> defines a playroom of joined devices sharing synchronizing 
            their state.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Session.Leave(Alteruna.Multiplayer.Core.Device)">
            <summary>
            Remove device, request to leave.
            Serverside.
            </summary>
            <param name="device">target device</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Session.Route(Alteruna.Multiplayer.Core.ISerializable,Alteruna.Multiplayer.Core.Device,Alteruna.Multiplayer.Core.Reliability)">
            <summary>
            Route to all devices (excluding sender)
            </summary>
            <param name="fromDevice">sender</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Session.Route(System.Byte[],System.Int32,System.Int32,Alteruna.Multiplayer.Core.Device,Alteruna.Multiplayer.Core.Reliability)">
            <summary>
            Route incoming data by passing all bytes in datagram to all devices (excluding sender)
            </summary>
            <param name="fromDevice">sender</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Session.OnPacketReceived(Alteruna.Multiplayer.Core.ITransportStreamReader,Alteruna.Multiplayer.Core.Device,Alteruna.Multiplayer.Core.Reliability)">
            <summary>
            Packet received on individual session level, either sync or leave
            </summary>
            <param name="processor"></param>
            <param name="device"></param>
            <param name="reliability"></param>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.SessionManager">
            <summary>
            Class <c>SessionManager</c> manages a collection of <c>Session</c> instances and is primarily
            responsible for routing incoming and outgoing traffic to the approriate <c>Session</c> instance.
            </summary>
            <seealso cref="T:Alteruna.Multiplayer.Core.Session"/>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.SessionManager.RoomMode">
            <summary>
            Make incoming connections to join room id 0.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.SessionManager.Join(Alteruna.Multiplayer.Core.ISynchronizationManager,Alteruna.Multiplayer.Core.MethodArguments.RoomArgs)">
            <summary>
            Join local room.
            Can create room if it does not exist and room args are given.
            </summary>
            <param name="manager">Synchronization manager.</param>
            <param name="createRoomArgs">Args for new room.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.SessionManager.Leave(System.UInt16)">
            <summary>
            Kick user by id.
            </summary>
            <param name="userId">User index.</param>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Transport.LNL.TransportEndPoint">
            <summary>
            Class <c>TransportEndPoint</c> is an implementation of ITransportEndPoint using
            LiteNetLib. 
            
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Transport.LNL.TransportLayer">
            <summary>
            Class <c>TransportLayer</c> is an implementation of ITransportLayer using
            LiteNetLib. 
            
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Transport.LNL.TransportStreamReader">
            <summary>
            Class <c>TransportStreamReader</c> is an implementation of ITransportStreamReader using
            LiteNetLib. 
            
            </summary>
            
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Transport.LNL.TransportStreamWriter">
            <summary>
            Class <c>TransportStreamWriter</c> is an implementation of ITransportStreamWriter using
            LiteNetLib. 
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Transport.TCP.EndPoint">
            <summary>
            Class <c>EndPoint</c> is an implementation of ITransportEndPoint using
            LiteNetLib. 
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Transport.TCP.EndPoint.SendRaw(System.Byte[])">
            <summary>
            sending raw data without formatting.
            Only use this if you know what you are doing.
            </summary>
            <param name="rawData">raw pre formatted data</param>
            <returns>lenght</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Transport.TCP.Package.ReadAndAccept(System.IO.Stream,System.Int32,Alteruna.Multiplayer.Core.Transport.TCP.Package@,System.Byte[]@,Alteruna.Multiplayer.Core.LogBase)">
            <summary>
            Read package, but switch protocol on "GE" (get) message.
            Only use when expecting a possible protocol switch.
            </summary>
            <param name="stream"></param>
            <param name="streamLen"></param>
            <param name="package"></param>
            <param name="data"></param>
            <param name="log"></param>
            <returns>try when switch protocol</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Transport.TCP.Package.ReadWithGivenHead(System.Byte[],System.IO.Stream,System.Int32,Alteruna.Multiplayer.Core.LogBase)">
            <summary>
            
            </summary>
            <param name="header">byte[2] type anf lenght</param>
            <param name="stream"></param>
            <param name="streamLen"></param>
            <param name="log"></param>
            <exception cref="T:System.Exception">type not defined</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">data length is negative or zero</exception>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Transport.TCP.PackageType">
            <summary>
            WebSocket OpCodes
            </summary>
            <remarks>
            x0 denotes a continuation frame.
            x1 denotes a text frame.
            x2 denotes a binary frame.
            x3-7 are reserved for further non-control frames.
            x8 denotes a connection close.
            x9 denotes a ping.
            xA denotes a pong.
            xB-F are reserved for further control frames.
            </remarks>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.Transport.TransportType">
            <summary>
            Implemented network transportation layers.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.Transport.TransportType.Default">
            <summary>
            Can send unreliable or reliable.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.Transport.TransportType.TCP">
            <summary>
            Only send as reliable TCP.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.Transport.TransportType.TCPS">
            <summary>
            Secure TCP. Server only.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Core.Transport.TransportType.WebSocket">
            <summary>
            Compatible with <see cref="F:Alteruna.Multiplayer.Core.Transport.TransportType.TCP"/>.
            Only Works in browser.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.Transport.WebSocket.EndPoint.FormatAddressRawUnsafe(System.String)">
            <summary>
            Unsafe formating of the address. This is used when the address is not in the format of ws:// or wss://.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="T:Alteruna.Multiplayer.Core.User">
            <summary>
            User class containing index and name.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.User.IsHost">
            <summary>
            Get if user is considered being the host.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.User.Name">
            <summary>
            Name of user
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Core.User.Index">
            <summary>
            Index of user
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Core.User.ValidateName(System.String)">
            <summary>
            Makes a valid name.
            </summary>
            <returns>Non-null or empty string limited in lenght</returns>
        </member>
        <member name="T:Alteruna.Multiplayer.UtcTime">
            <summary>
            Useful time related fields using global time.
            Note that its its common for the system time to be inaccurate, expect a difference by 5 seconds.
            If the machine time is not automatically updated, it can be up to much more.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.UtcTime.Now">
            <summary>Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).</summary>
            <returns>An object whose value is the current UTC date and time.</returns>
            <footer><a href="https://docs.microsoft.com/en-us/dotnet/api/System.DateTime.UtcNow?view=netcore-5.0">`DateTime.UtcNow` on docs.microsoft.com</a></footer>
        </member>
        <member name="P:Alteruna.Multiplayer.UtcTime.Seconds">
            <summary>
            Get the number of seconds that have elapsed since 1970-01-01T00:00:00.000Z in Coordinated Universal Time.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Alteruna.Multiplayer.UtcTime.SecondsFloat" -->
        <member name="P:Alteruna.Multiplayer.UtcTime.Milliseconds">
            <summary>
            Get the number of milliseconds that have elapsed since 1970-01-01T00:00:00.000Z in Coordinated Universal Time.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.UtcTime.MillisecondsFloat">
            <summary>
            Get Coordinated Universal Time in milliseconds casted to float with modulus to avoid losing precision.
            The value will loop on 16777215 milliseconds in order to avoid losing precision.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.AttributesSync">
             <summary>
             Synchronize methods and fields using attributes.
             </summary>
             <example>
            	Here is how you can easily synchronize a field using attributes.
             There is a small performance overhead on using attributes instead of writing your own synchronizable.
             
            	<code>
             public class MyAttributesSyncClass : AttributesSync
             {
            		[SynchronizableField]
            		public string MyString;
             }
             </code>
            
             Unlike SynchronizableField, SynchronizableMethod have almost no overhead.
             They can be invoked in several ways.
            
             Parameters are easy to add, simply add them after the invocation method.
             Similar to how they are added in normal invocation.
            
             <code>
            	public class MessageAll : AttributesSync
            	{
            		public void SendRpc()
            		{
            			// Invoke method by name. alternatively, we can call by index.
            			BroadcastRemoteMethod(nameof(Message), "Hello, world!");
            		}
            	
            		// the SynchronizableMethod attribute marks methods available for remote invocation.
            		[SynchronizableMethod]
            		private void Message(string msg)
            		{
            			Debug.Log(msg);
            		}
            	}
             </code>
            
             Note that only serializable objects can be passed as argument.
            
            	Here is a simple example for syncing audio play using <c>BroadcastRemoteMethod</c>.
             
             <code>
            	public class PlayAudioSync : AttributesSync
            	{
            		// reference to AudioSource.
            		public AudioSource AudioSource;
            
            		// public method that we call in event or from external scripts
            		public void Play()
            		{
            			// Invoke method with index 0 on all clients including sender.
            			BroadcastRemoteMethod();
            		}
            	
            		// We define our synced method here.
            		// As we only define one we know this one have index 0.
            		[SynchronizableMethod]
            		private void PlayRemote()
            		{
            			AudioSource.Play();
            		}
            	}
             </code>
            
            	Using InvokeRemoteMethod, we can invoke RPC on one or more targets.
             The following example shows how we can send private messages to specified user(s).
            
             <code>
            	public class Message : AttributesSync
            	{
            		// id is index of user
            		public void SendMessageToUser(ushort id, string message)
            		{
            			// Invoke method by index.
            			InvokeRemoteMethod(0, id, message);
            		}
            
            		public void SendMessageToUser(ushort[] ids, string message)
            		{
            			// Invoke method by index.
            			InvokeRemoteMethod(0, ids, message);
            		}
            	
            		// Because this is the first method defined, we know its index is 0. The next one would have index of 1.
            		[SynchronizableMethod]
            		private void Message(string msg)
            		{
            			Debug.Log(msg);
            		}
            	}
             </code>
             
             </example>
        </member>
        <member name="F:Alteruna.Multiplayer.AttributesSync.Reliability">
            <summary>
            Chose how to send data. Reliable or Unreliable.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.AttributesSync.LocalMethodBehavior">
            <summary>
            Chose how local methods behave when sending.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.AttributesSync.LateUpdate">
            <summary>
            Handle changes fields.
            </summary>
            <remarks>
            If hidden, consider calling <c>Commit()</c> after changes
            </remarks>
            <example>
            Writing your own LateUpdate by hiding the base LateUpdate.
            
            <code>
            void LateUpdate()
            {
            	// Check for any uncommitted changes in fields.
            	base.LateUpdate();
            }
            </code>
            </example>
        </member>
        <member name="M:Alteruna.Multiplayer.AttributesSync.ForceSync">
            <summary>
            Force all fields to be synced as if they where changed.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.AttributesSync.Commit">
            <summary>
            Send all changes to all users.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.AttributesSync.BroadcastRemoteMethod(System.Int32,System.Object[])">
            <summary>
            Calls method with the <c>SynchronizableMethod</c> attribute on evey client including sender with given parameters.
            </summary>
            <param name="id">Id of method. Get the id by calling <see cref="M:Alteruna.Multiplayer.AttributesSync.GetMethodAttributeId(System.String)">GetMethodAttributeId(string)</see>.</param>
            <param name="parameters">Argument(s) of a target method</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when id is grater or equal to the amount of registered methods</exception>
            <exception cref="T:System.ArgumentException">Thrown when parameters count of target method does not match count of given parameters</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.AttributesSync.BroadcastRemoteMethod(System.String,System.Object[])">
            <summary>
            Calls method with the <c>SynchronizableMethod</c> attribute on evey client including sender with given parameters.
            with given parameters.
            </summary>
            <remarks>
            For a more optimized call method use InvokeRemoteMethod(int, params ... )
            </remarks>
            <param name="methodName">Name of target method.</param>
            <param name="parameters">Argument(s) of a target method</param>
            <exception cref="T:System.ArgumentException">Thrown when methodName does not mach a name of a registered method.</exception>
            <exception cref="T:System.ArgumentException">Thrown when parameters count of target method does not match count of given parameters</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.AttributesSync.InvokeRemoteMethod(System.Int32,Alteruna.Multiplayer.Core.UserId,System.Object[])">
            <summary>
            Invoke a method with the <c>SynchronizableMethod</c> attribute on target user
            with given parameters.
            </summary>
            <param name="id">Id of method. Get the id by calling <see cref="M:Alteruna.Multiplayer.AttributesSync.GetMethodAttributeId(System.String)">GetMethodAttributeId(string)</see>.</param>
            <param name="user">target user</param>
            <param name="parameters">Argument(s) of a target method</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when id is grater or equal to the amount of registered methods</exception>
            <exception cref="T:System.ArgumentException">Thrown when parameters count of target method does not match count of given parameters</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.AttributesSync.InvokeRemoteMethod(System.Int32,System.UInt16,System.Object[])">
            <summary>
            Invoke a method with the <c>SynchronizableMethod</c> attribute on target user
            with given parameters.
            </summary>
            <param name="id">Id of method. Get the id by calling <see cref="M:Alteruna.Multiplayer.AttributesSync.GetMethodAttributeId(System.String)">GetMethodAttributeId(string)</see>.</param>
            <param name="user">target user</param>
            <param name="parameters">Argument(s) of a target method</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when id is grater or equal to the amount of registered methods</exception>
            <exception cref="T:System.ArgumentException">Thrown when parameters count of target method does not match count of given parameters</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.AttributesSync.InvokeRemoteMethod(System.Int32,System.Collections.Generic.List{System.UInt16},System.Object[])">
            <summary>
            Invoke a method with the <c>SynchronizableMethod</c> attribute on target users
            with given parameters.
            </summary>
            <param name="id">Id of method. Get the id by calling <see cref="M:Alteruna.Multiplayer.AttributesSync.GetMethodAttributeId(System.String)">GetMethodAttributeId(string)</see>.</param>
            <param name="users">target users</param>
            <param name="parameters">Argument(s) of a target method</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when id is grater or equal to the amount of registered methods</exception>
            <exception cref="T:System.ArgumentException">Thrown when parameters count of target method does not match count of given parameters</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.AttributesSync.InvokeRemoteMethod(System.String,Alteruna.Multiplayer.Core.UserId,System.Object[])">
            <summary>
            Invoke a method with the <c>SynchronizableMethod</c> attribute on target user
            with given parameters.
            </summary>
            <remarks>
            For a more optimized call method use InvokeRemoteMethod(int, params ... )
            </remarks>
            <param name="methodName">Name of target method.</param>
            <param name="user">target user</param>
            <param name="parameters">Argument(s) of a target method</param>
            <exception cref="T:System.ArgumentException">Thrown when methodName does not mach a name of a registered method.</exception>
            <exception cref="T:System.ArgumentException">Thrown when parameters count of target method does not match count of given parameters</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.AttributesSync.InvokeRemoteMethod(System.String,System.UInt16,System.Object[])">
            <summary>
            Invoke a method with the <c>SynchronizableMethod</c> attribute on target user
            with given parameters.
            </summary>
            <remarks>
            For a more optimized call method use InvokeRemoteMethod(int, params ... )
            </remarks>
            <param name="methodName">Name of target method.</param>
            <param name="user">target user</param>
            <param name="parameters">Argument(s) of a target method</param>
            <exception cref="T:System.ArgumentException">Thrown when methodName does not mach a name of a registered method.</exception>
            <exception cref="T:System.ArgumentException">Thrown when parameters count of target method does not match count of given parameters</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.AttributesSync.InvokeRemoteMethod(System.String,System.Collections.Generic.List{System.UInt16},System.Object[])">
            <summary>
            Invoke a method with the <c>SynchronizableMethod</c> attribute on target users
            with given parameters.
            </summary>
            <remarks>
            For a more optimized call method use InvokeRemoteMethod(int, params ... )
            </remarks>
            <param name="methodName">Name of target method.</param>
            <param name="users">target user</param>
            <param name="parameters">Argument(s) of a target method</param>
            <exception cref="T:System.ArgumentException">Thrown when methodName does not mach a name of a registered method.</exception>
            <exception cref="T:System.ArgumentException">Thrown when parameters count of target method does not match count of given parameters</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.AttributesSync.GetMethodAttributeId(System.String)">
            <summary>
            Get index of method with the <c>SynchronizableMethod</c> attribute by name.
            </summary>
            <param name="methodName">Name of a method with the <c>SynchronizableMethod</c> attribute.</param>
            <returns>Index of method with the <c>SynchronizableMethod</c> attribute with target name.</returns>
            <exception cref="T:System.ArgumentException">Thrown when methodName does not mach a name of a registered method.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.AttributesSync.GetMethodAttributeName(System.Int32)">
            <summary>
            Get name of method with the <c>SynchronizableMethod</c> attribute by index.
            </summary>
            <param name="methodId">Index of method with the <c>SynchronizableMethod</c> attribute.</param>
            <returns>Name of method with the <c>SynchronizableMethod</c> attribute with target Index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">methodId is out of range or less than zero.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.AttributesSync.UncommittedFields">
            <summary>
            Check if there is any uncommitted changes to any fields.
            </summary>
            <returns>True when at least one field have uncommitted changes.</returns>
        </member>
        <member name="T:Alteruna.Multiplayer.AttributesSync.SynchronizableField">
            <summary>
            Synchronise target field.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.AttributesSync.SynchronizableMethod">
            <summary>
            Synchronise target Method.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.AttributesSync.Serialize(Alteruna.Multiplayer.Core.ITransportStreamWriter,Alteruna.Multiplayer.Core.MethodArguments.SerializeInfo)">
            <summary>
            Write changes to a <c>ITransportStreamWriter</c> processor.
            </summary>
            <param name="processor"></param>
            <param name="info"></param>
        </member>
        <member name="M:Alteruna.Multiplayer.AttributesSync.Unserialize(Alteruna.Multiplayer.Core.ITransportStreamReader,Alteruna.Multiplayer.Core.MethodArguments.UnserializeInfo)">
            <summary>
            Read changes from a <c>ITransportStreamReader</c> processor.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.AttributesSync.LocalBehavior">
            <summary>
            Behaviour of local invocation of remote methods.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.AttributesSync.LocalBehavior.Disabled">
            <summary>
            Block invocation on sender.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.AttributesSync.LocalBehavior.Invoke">
            <summary>
            Invoke method when invoking <c>BroadcastRemoteMethod</c> or <c>InvokeRemoteMethod</c>.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.AttributesSync.LocalBehavior.Reply">
            <summary>
            Methods get called from the server. Making the sender experience the same delay as all other clients.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Avatar">
             <summary>
             <c>Avatar</c> is used to represent a player in a Room.
             </summary>
             <remarks>
             <c>Avatar</c> is a <c>CommunicationBridge</c> and can be used to synchronize data between clients.<br/>
             <img src="../images/Alteruna.Avatar.png" />
             </remarks>
             <example>
            
             Avatars have events that can be used similar to OnEnable and OnDisable.
             The possession status can also be accessed with <c>Avatar.IsPossessed</c>
            
             <code>
             // Avatar reference
             public Avatar MyAvatar;
            
             void Awake() {
                 // Event for avatar possessed
                 MyAvatar.OnPossessed.AddListener(Possessed);
            
                 // OnUnpossessed is called on unposses and client disconnect.
             }
            
             // Log username on Possession
             void Possessed(User user) => Debug.Log("Possessed by " + user.Name);
             </code>
            
             When working with Avatars, the most useful information is to check for the controlled Avatar, this can be done using <c>Avatar.IsMe</c>.
             To make a fist person game, simply move the camera to the avatar with the <c>Avatar.IsMe</c> set to true. See following example.
             
             <code>
             public Avatar MyAvatar;
            
             void Awake() {
                 MyAvatar.OnPossessed.AddListener(Possessed);
             }
             
             void Possessed(User user) {
                 // Return if not user's client.
                 if (user != MyAvatar.Multiplayer.Me) return;
            
                 // Set camera as child to object
                 Camera myCamera = Camera.main;
                 myCamera.transform.position = transform.position + new Vector3(0, 0.4f, 0);
                 myCamera.transform.SetParent(transform);
             
                 // Lock cursor
                 Cursor.lockState = CursorLockMode.Locked;
                 Cursor.visible = false;
             }
             </code>
             
             </example>
        </member>
        <member name="P:Alteruna.Multiplayer.Avatar.IsMe">
            <summary>
            True when the <c>Avatar</c> represents the local player.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Avatar.IsOwner">
            <summary>
            True when the <c>Avatar</c> represents the local player.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Avatar.IsPossessor">
            <summary>
            True when the <c>Avatar</c> represents the local player.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Avatar.IsPossessed">
            <summary>
            True when possessed by a <c>User</c>.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Avatar.Possessor">
            <summary>
            <c>User</c> that posses the <c>Avatar</c>.
            Null when unprocessed.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Avatar.Owner">
            <summary>
            <c>User</c> that posses the <c>Avatar</c>.
            Null when unprocessed.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Avatar.PrefabType">
            <summary>
            -2 : disabled
            -1 : default prefab
            positive : custom prefab
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Avatar.OnPossessed">
            <summary>
            On Avatar get posses by new <c>User</c>.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Avatar.OnUnpossessed">
            <summary>
            On Avatar unpossess.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Avatar.ResetUIDs">
            <summary>
            Override all UIDs in all children.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Avatar.Possessed(Alteruna.Multiplayer.Core.User)">
            <summary>
            The possessed method can be used to set owner of a avatar.
            </summary>
            <param name="user">User possessing the Avatar.</param>
            <exception cref="T:System.NullReferenceException">Thrown when no Multiplayer controller was found.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Avatar.Possessed(System.Boolean,Alteruna.Multiplayer.Core.User)">
            <summary>
            The possessed method can be used to set owner of a avatar.
            </summary>
            <param name="isMe">Unused.</param>
            <param name="user">User possessing the Avatar.</param>
            <exception cref="T:System.NullReferenceException">Thrown when no Multiplayer controller was found.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Avatar.Serialize(Alteruna.Multiplayer.Core.ITransportStreamWriter)">
            <summary>
            Serializes transform and synchronizables.
            </summary>
            <param name="processor">ITransportStreamWriter</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Avatar.Unserialize(Alteruna.Multiplayer.Core.ITransportStreamReader)">
            <summary>
            Unserialize transform and synchronizables.
            </summary>
            <param name="processor">ITransportStreamReader</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Avatar.ToString">
            <summary>
            Get name and index in a string.
            Returns "Unprocessed" when IsPossessed is false.
            </summary>
            <returns>possessors User.ToString() when possessed, otherwise returns "Unpossessed".</returns>
        </member>
        <member name="T:Alteruna.Multiplayer.CommunicationBridge">
            <summary>
            Holds references and methods for communications with active <c>Multiplayer</c> component.
            Unlike <c>CommunicationBridgeUID</c>, this component does not have a unique identifier (UID).
            </summary>
            <example>
            The CommunicationBridge class can be used to get a Multiplayer reference and possession of avatars.
            <code>
            public class MyCommunicationBridge : CommunicationBridge
            {
            	private bool _isPossessed = false;
            	private bool _isPossessor = false;
            	private Avatar _avatar;
            	
            	// The possessed event is called after awake and before start when the avatar is initialized.
            	public override void Possessed(bool isMe, User user)
            	{
            		_isPossessed = true;
            		
            		// also known as is owner
            		_isPossessor = isMe;
            		
            		// Inside CommunicationBridge, we can access the Multiplayer component through the Multiplayer property.
            		// We can use it to get the avatar for a user.
            		_avatar = Multiplayer.GetAvatar(user.Index);
            	}
            
            	// When the player is removed form the game or the avatar is repossessed, we can manage it using the Unpossessed method.
            	public override void Unpossessed()
            	{
            		_isPossessed = false;
            		_isPossessor = false;
            		_avatar = null;
            	}
            }
            </code>
            </example>
            <seealso cref="T:Alteruna.Multiplayer.CommunicationBridgeUID"/>
        </member>
        <member name="F:Alteruna.Multiplayer.CommunicationBridge.Multiplayer">
            <summary>
            Reference to Multiplayer controller component.
            sets in <c>OnEnable</c> unless hidden.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.CommunicationBridge.OverrideCommunicationBridgeReference(Alteruna.Multiplayer.MultiplayerManager)">
            <summary>
            Override the <c>Multiplayer</c> reference.
            </summary>
            <param name="manager">Multiplayer Controller</param>
        </member>
        <member name="M:Alteruna.Multiplayer.CommunicationBridge.OnEnable">
            <summary>
            Collects <c>Multiplayer</c> reference.
            </summary>
            <seealso cref="M:Alteruna.Multiplayer.CommunicationBridge.SetMultiplayerComponent(System.Boolean)"/>
        </member>
        <member name="M:Alteruna.Multiplayer.CommunicationBridge.SetMultiplayerComponent(System.Boolean)">
            <summary>
            If the <c>Multiplayer</c> reference is null, set it to active <c>Multiplayer</c> component.
            <example>
            <code>
            void OnEnable() => SetMultiplayerComponent();
            </code>
            <c>SetMultiplayerComponent</c> call it in <c>OnEnable</c> unless hidden.
            </example>
            </summary>
            <param name="force">When set to true, it will ignore the current value of the <c>Multiplayer</c> reference</param>
            <returns>True when Multiplayer is not null.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.CommunicationBridge.Possessed(System.Boolean,Alteruna.Multiplayer.Core.User)">
            <summary>
            Called when <c>Avatar</c> is possessed by a user.
            </summary>
            <seealso cref="M:Alteruna.Multiplayer.CommunicationBridge.Unpossessed"/>
            <seealso cref="T:Alteruna.Multiplayer.Avatar"/>
            <param name="isMe">True when user is local player.</param>
            <param name="user">user possessing.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.CommunicationBridge.Unpossessed">
            <summary>
            Called when <c>Avatar</c> gets unpossessed.
            </summary>
            <seealso cref="M:Alteruna.Multiplayer.CommunicationBridge.Possessed(System.Boolean,Alteruna.Multiplayer.Core.User)"/>
            <seealso cref="T:Alteruna.Multiplayer.Avatar"/>
        </member>
        <member name="M:Alteruna.Multiplayer.CommunicationBridge.Reset">
            <summary>
            We set the <c>Multiplayer</c> reference when component is reset inorder to save performance in the spawn frame.
            </summary>
            <seealso cref="M:Alteruna.Multiplayer.CommunicationBridge.SetMultiplayerComponent(System.Boolean)"/>
        </member>
        <member name="T:Alteruna.Multiplayer.IAdaptiveSerializableUniqueID">
            <summary>
            Combines the IAdaptiveSerializable and the IUniqueID interface.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.CommunicationBridgeUID">
            <summary>
            Holds references and methods for communications with active <c>Multiplayer</c> and <c>UID</c> components.
            Can be used to as object reference when sending packages to other clients.
            </summary>
            <seealso cref="T:Alteruna.Multiplayer.CommunicationBridge"/>
        </member>
        <member name="P:Alteruna.Multiplayer.CommunicationBridgeUID.HasOwnership">
            <summary>
            Describes whether we have ownership of this Synchronizable.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.CommunicationBridgeUID.TakeOwnership(System.Boolean)">
            <summary>
            Attempt to take ownership of this <c>Synchronizable</c>
            </summary>
            <param name="singleAttempt">Attempt to take ownership once, or get put in queue for when the current owner releases their ownership.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.CommunicationBridgeUID.ReleaseOwnership">
            <summary>
            Release ownership of this <c>Synchronizable so that others can take ownership of it.</c>
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.CommunicationBridgeUID.OverrideUID(System.Guid,System.Boolean)">
            <summary>
            Override this <c>Synchronizables</c> current unique ID with a new Guid.
            </summary>
            <param name="newUID">The new Guid.</param>
            <param name="deregisterOld">Should this <c>Synchronizable</c> be deregistered from the <c>SerializableManager</c> before re-registering with the new ID?</param>
        </member>
        <member name="M:Alteruna.Multiplayer.CommunicationBridgeUID.GetUID">
            <summary>
            Get the UniqueID of this <c>Synchronizable</c>
            </summary>
            <returns>The UniqueID attached to this <c>Synchronizable</c></returns>
        </member>
        <member name="M:Alteruna.Multiplayer.CommunicationBridgeUID.OnEnable">
            <summary>
            Register the object to the multiplayer component.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.CommunicationBridgeUID.MakeUID">
            <summary>
            Initialize UID.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Configs.AlterunaApplicationData">
            <summary>
            Stores data needed for connection.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Configs.AlterunaConfig">
            <summary>
            Configuration for Alteruna.
            The settings are accessed from the project settings under Alteruna Multiplayer.
            </summary>
            <remarks>
            <img src="../images/Doc.Configs.ProjectConfigs.png" />
            </remarks>
        </member>
        <member name="P:Alteruna.Multiplayer.Configs.AlterunaConfig.SimpleAttributes">
            <summary>
            Simple attributes changed the method of invoking attributes for all clients.
            Simply calling the method will resolve in the attribute being invoked on all clients (inclusive).
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Configs.AlterunaConfig.Transport">
            <summary>
            Target network transportation layer to utilize.
            WebSocket only works in WebGL builds.
            TCP is compatible with WebSocket.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Configs.AlterunaConfig.WebSocketSecure">
            <summary>
            When true, the default WebSocket connection will be secure.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Configs.AlterunaConfig.EnableLOD">
            <summary>
            Enable the network level of detail system.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Configs.AlterunaConfig.AllowMultiplayerSingleton">
            <summary>
            Allow the usage of singleton for location the multiplayer reference.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Configs.AlterunaConfig.DisableCamerasOnNonOwnedAvatars">
            <summary>
            When true, cameras will be automatically disabled on avatars that are not owned by the local client.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Configs.AlterunaConfig.DefaultPort">
            <summary>
            Default hosting port.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Configs.AlterunaConfig.SimpleAttributeUsageOption">
            <summary>
            Simple attribute usage option.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.IUniqueID">
            <summary>
            Class <c>UniqueID</c> defines an application-wide unique ID for identifying objects deciding where to rout data in a Room.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.IUniqueID.UIDString">
            <summary>
            Get or set the Guid of the UID as strong
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.IUniqueID.UID">
            <summary>
            Get or set the Guid of the UID.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.IUniqueID.MakeUID">
            <summary>
            Initialize the UID.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.EnsureEventSystem.Ensure(System.Boolean)">
            <summary>
            Ensures that there is an EventSystem in the scene.
            </summary>
            <returns>True when new EventSystem was created.</returns>
        </member>
        <member name="T:Alteruna.Multiplayer.SingleClientEvent">
            <summary>
            Event used for when you want a something to only apply for a single client.
            </summary>
            <remarks>
            When on an avatar, the controller will be the avatar owner.
            Otherwise, the controller will be the client with the lowest user index.
            </remarks>
        </member>
        <member name="P:Alteruna.Multiplayer.SingleClientEvent.IsControlled">
            <summary>
            Gets if the local client is the controller.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.SingleClientEvent.OnClientChanged">
            <summary>
            Runs when the controlling client is changed.
            </summary>
            <remarks>
            True when controlled on this client.
            </remarks>
        </member>
        <member name="T:Alteruna.Multiplayer.UniqueAvatarChild">
            <summary>
            Instantiate a prefab as a child from a array.
            If avatar index goes beyond the length of the array, it will loop.
            </summary>
            <remarks>
            <img src="../images/Alteruna.UniqueAvatarChild.png" />
            </remarks>
        </member>
        <member name="F:Alteruna.Multiplayer.UniqueAvatarChild.Prefabs">
            <summary>
            The array of prefabs to spawn as children.
            When index exceeds the length, loop.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.UniqueAvatarChild.SetPrefab(System.UInt16)">
            <summary>
            Set child prefab to target id. Wraps around if <c>Prefabs</c> is less than id.
            If child prefab already is set, replace it.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Alteruna.Multiplayer.UniqueAvatarChild.SetPrefab(Alteruna.Multiplayer.Core.User)">
            <summary>
            Set child prefab to target user's index. Wraps around if <c>Prefabs</c> is less than id.
            If child prefab already is set, replace it.
            </summary>
            <param name="user">target index</param>
        </member>
        <member name="M:Alteruna.Multiplayer.UniqueAvatarChild.OverwritePrefab(UnityEngine.GameObject)">
            <summary>
            Instantiate a new child prefab and destroy exising object.
            </summary>
            <param name="obj">prefab or object ti use as new child</param>
        </member>
        <member name="M:Alteruna.Multiplayer.UniqueAvatarChild.GetAvatarChild">
            <summary>
            Get current avatar child object.
            </summary>
            <returns>avatar child game object</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.UniqueAvatarChild.TryGetAvatarChild(UnityEngine.GameObject@)">
            <summary>
            Attempt to get current avatar child object.
            </summary>
            <param name="avatarChild">avatar child game object</param>
            <returns>true when avatar child exists</returns>
        </member>
        <member name="T:Alteruna.Multiplayer.UniqueAvatarColor">
            <summary>
            Change Hue to a unique color based on avatar index.
            </summary>
            <remarks>
            <img src="../images/Alteruna.UniqueAvatarColor.png" />
            </remarks>
        </member>
        <member name="F:Alteruna.Multiplayer.UniqueAvatarColor.Saturation">
            <summary>
            Saturation of generated color.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.UniqueAvatarColor.Sprites">
            <summary>
            References to sprite renderers to be affected by hue changes.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.UniqueAvatarColor.Renderers">
            <summary>
            References to mesh renderers to be affected by hue changes.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.UniqueAvatarColor.UpdateHue">
            <summary>
            Manually update color of objects referenced inside the <c>UniqueAvatarColor</c>.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.UniqueAvatarColor.UpdateHue(System.UInt16)">
            <summary>
            Manually set color of objects referenced inside the <c>UniqueAvatarColor</c>.
            </summary>
            <param name="index">User index</param>
        </member>
        <member name="M:Alteruna.Multiplayer.UniqueAvatarColor.HueFromId(UnityEngine.Color,System.Int32)">
            <summary>
            Set hue of a color based on ID.
            </summary>
            <param name="color">Base color.</param>
            <param name="id">Color ID.</param>
            <returns>Color with new hue.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.UniqueAvatarColor.HueFromId(UnityEngine.Color,System.Int32,System.Single)">
            <summary>
            Set hue of a color based on ID.
            </summary>
            <param name="color">Base color.</param>
            <param name="id">Color ID.</param>
            <param name="saturation">Saturation of returned color.</param>
            <returns>Color with new hue with given saturation and value.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.UniqueAvatarColor.HueFromId(UnityEngine.Color,System.Int32,System.Single,System.Single)">
            <summary>
            Set hue of a color based on ID.
            </summary>
            <param name="color">Base color.</param>
            <param name="id">Color ID.</param>
            <param name="saturation">Saturation of returned color.</param>
            <param name="value">Value of returned color.</param>
            <returns>Color with new hue with given saturation and value.</returns>
        </member>
        <member name="T:Alteruna.Multiplayer.MultiplayerManager">
            <summary>
            The component <c>Multiplayer</c> gives access to all functionality and communication for Alteruna Multiplayer.
            </summary>
            <remarks>
            <img src="../images/Alteruna.Multiplayer.png" />
            </remarks>
        </member>
        <member name="P:Alteruna.Multiplayer.MultiplayerManager.Instance">
            <summary>
            Static singleton instance of the <c>Multiplayer</c> component.
            Note that this feature may not work as intended when used in combination with the multi-client tool.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.LogLevel">
            <summary>
            The lowest level of logs to print to the console.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.Buckets">
            <summary>
            A list containing all of the existing Buckets in the application.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager._maxPlayers">
            <summary>
            The global maximum amount of players allowed in a single Room.
            Rooms can be created with a lower player limit, but not higher.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.MultiplayerManager.MaxPlayers">
            <summary>
            The global maximum amount of players allowed in a single Room.
            Rooms can be created with a lower player limit, but not higher.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.ConnectOnStart">
            <summary>
            Determines whether the multiplayer session will attempt to establish a connection automatically when the application starts.
            </summary>
            <remarks>
            If false, Connection can manually be started with <see cref="M:Alteruna.Multiplayer.MultiplayerManager.Connect"/>, <see cref="M:Alteruna.Multiplayer.MultiplayerManager.JoinLan"/>, or <see cref="M:Alteruna.Multiplayer.MultiplayerManager.Host"/>.
            </remarks>
        </member>
        <member name="P:Alteruna.Multiplayer.MultiplayerManager.InRoom">
            <summary>
            Whether currently connected to a Room.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.MultiplayerManager.IsConnected">
            <summary>
            Whether currently connected to a server.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.MultiplayerManager.IsConnecting">
            <summary>
            Whether currently connecting to a server.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.MultiplayerManager.CurrentRoom">
            <summary>
            The Room we are currently connected to.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.MultiplayerManager.Me">
            <summary>
            The User representing the local player.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.MultiplayerManager.AvailableRooms">
            <summary>
            A list of all the currently available Rooms on the server.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.MultiplayerManager.NetworkStatistics">
            <summary>
            Statistic on network data send and received in Kilobytes unless defined.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.AvatarSpawning">
            <summary>
            Avatar spawning behavior.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.AvatarPrefab">
            <summary>
            The prefab to spawn as an Avatar if SpawnAvatarOnJoin is true.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.AvatarSpawnLocation">
            <summary>
            The location at which to spawn Avatars.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.SpawnAvatarPerIndex">
            <summary>
            Weather Avatars should be spawned in different locations based on their index in the Room.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.MultiplayerManager.LowestUserIndex">
            <summary>
            The index of the user with the lowest index.
            Updates after the other joined and room joined events.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.AvatarSpawnLocations">
            <summary>
            An indexed list of the locations at which to spawn Avatars.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnStarted">
            <summary>
            Event invoked after Alteruna services started.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnConnected">
            <summary>
            Event invoked after successfully connecting to a server.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnDisconnected">
            <summary>
            Event invoked after disconnecting from a server.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnNetworkError">
            <summary>
            Event invoked if any network related errors occur.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnRoomCreated">
            <summary>
            Event invoked after successfully joining a Room.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnRoomJoined">
            <summary>
            Event invoked after successfully joining a Room.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnRoomLeft">
            <summary>
            Event invoked on successfully leaving a room.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnRoomListUpdated">
            <summary>
            Event invoked when the AvailableRooms list is modified.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnOtherUserJoined">
            <summary>
            Event invoked when other User joined the Room.
            When joining a room, this event will be invoked for every User already in the Room.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnOtherUserLeft">
            <summary>
            Event invoked after another User left the Room.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnJoinRejected">
            <summary>
            Event invoked on join event rejected with a rejection reason.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnPacketSent">
            <summary>
            Send packet event.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnPacketReceived">
            <summary>
            Receive packet event.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnLockRequested">
            <summary>
            Event invoked on ownership requests.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnLockAcquired">
            <summary>
            Event invoked when successfully receives ownership for any object.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnLockDenied">
            <summary>
            Event invoked when an attempt to gain ownership over a object is denied.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnLockUnlocked">
            <summary>
            Event invoked when a object releases its ownership.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnForceSynced">
            <summary>
            On client request a force sync package.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnForceSync">
            <summary>
            Called before data is synced for a force sync packet.
            </summary>
            <remarks>
            In most cases, <see cref="F:Alteruna.Multiplayer.MultiplayerManager.OnRoomJoined">OnRoomJoined</see> is preferred over OnForceSync.
            </remarks>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnRpcReceived">
            <summary>
            On remote procedure call received.
            Multiplayer, name, sender
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnRpcSent">
            <summary>
            On remote procedure call sent.
            Multiplayer, name, target, isMulticast
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnRpcRegistered">
            <summary>
            On remote procedure call registered.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.OnForceSyncReply">
            <summary>
            Invoked when received force sync data from other player.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.MultiplayerManager.Latency">
            <summary>
            Connection latency.
            When no connection is established, last connection will be returned.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager._sceneObjects">
            <summary>
            Temporary storage for scene objects when <see cref="M:Alteruna.Multiplayer.MultiplayerManager.LoadScene(System.Func{UnityEngine.SceneManagement.Scene},System.Boolean)"/> is called.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager._suppressWarningAlreadyRegisteredOnLoadScene">
            <summary>
            Temporary bool that sets to true when <see cref="M:Alteruna.Multiplayer.MultiplayerManager.LoadScene(System.Func{UnityEngine.SceneManagement.Scene},System.Boolean)"/> is called.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager._isQuitting">
            <summary>
            True when the application is quitting.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.MultiplayerManager.Random">
            <summary>
            We use this for random to avoid modifying seeds of the game.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetDebuggingInfo(System.Boolean,System.Boolean)">
            <summary>
            Get debugging info.
            Includes settings, device info, etc.
            </summary>
            <param name="includeQuarryData">The quarry data can contain important information about your application.</param>
            <param name="includeAppID">Application id can be sensitive. When false consider also having <c>includeQuarryData</c> as false as well.</param>
            <returns>Debuting information</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.Host">
            <summary>
            Host a local server.
            </summary>
            <exception cref="T:Alteruna.Exceptions.AlterunaException">Thrown when already connected.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetConfigs(Alteruna.Multiplayer.Configs.AlterunaConfig@)">
            <summary>
            Get configs.
            </summary>
            <param name="alterunaConfig">configs (not null)</param>
            <returns>false when launch not ready.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.Connect">
            <summary>
            Connect to the Alteruna service manually when the config ConnectOnStart is disabled.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.JoinLan">
            <summary>
            Join a LAN server.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.JoinLan(System.UInt16)">
            <summary>
            Join a LAN server on a specific port.
            </summary>
            <param name="port">The port to connect to.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.SoftReset">
            <summary>
            Reset some internal fields regrading connection to their default values.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.SetUsername(System.String)">
            <summary>
            Sets new username for non-connected user.
            </summary>
            <param name="name">new username</param>
            <returns>True on success.</returns>
            <example>
            Setting the username before connecting to endpoint:
            <code>
            public class MyUsernameClass : Alteruna.CommunicationBridge
            {
            	void Awake()
            	{
            		Multiplayer.SetUsername("MyUsername");
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.JoinRoom(Alteruna.Multiplayer.Core.Room)">
            <summary>
            Join an available Room.
            </summary>
            <param name="room">The Room to join.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.JoinRoom(Alteruna.Multiplayer.Core.Room,System.UInt16)">
            <summary>
            Join an available Room using a pin.
            </summary>
            <param name="room">The Room to join.</param>
            <param name="pin">The pin to join the Room with.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.JoinOnDemandRoom">
            <summary>
            Create and Join a Room.
            The Room will close when the last player leaves the room.
            Use <c>CreateRoom</c> for more control.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.JoinOnDemandRoom(System.UInt32)">
            <summary>
            Join Room by id.
            The Room will close when the last player leaves the room.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.JoinFirstAvailable(System.Boolean)">
            <summary>
            Join any available room.
            Only join rooms that is not full, does not have pin code, and is not invite only.
            </summary>
            <param name="onlyJoinDemandRooms"></param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.JoinMatchmaking">
            <summary>
            Join a Room through matchmaking.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.JoinMatchmaking(System.UInt16)">
            <summary>
            Join a Room through matchmaking using a pin.
            </summary>
            <param name="pin">The pin to join the Room with.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.CreateRoom(System.String,System.Boolean,System.UInt16,System.Boolean,System.Boolean,System.UInt16)">
            <summary>
            Create a new room.
            </summary>
            <param name="displayName">name of the room.</param>
            <param name="inviteOnly">Prevent room from appearing in room lists. Also known as private room.</param>
            <param name="pin">Pin code. Zero mens no pin code.</param>
            <param name="onDemand">Close room when lats client leaves.</param>
            <param name="joinRoom">Join room when creating it.</param>
            <param name="maxUsers">Maximum number of users in the room.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.CreateRoom(Alteruna.Multiplayer.Core.MethodArguments.RoomArgs)">
            <summary>
            Create room.
            </summary>
            <param name="args">arguments</param>
            <example>
            CreateRoom(new RoomArgs() { RoomName = "CoolRoom", PinCode = 1234 });
            </example>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.CreateRoom">
            <summary>
            Create room.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.CreatePrivateRoom(System.String,System.UInt16,System.Boolean,System.Boolean)">
            <summary>
            Create a new private room.
            </summary>
            <param name="displayName">name of the room.</param>
            <param name="maxUsers">Maximum number of users in the room.</param>
            <param name="onDemand">Close room when lats client leaves.</param>
            <param name="joinRoom">Join room when creating it.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.CreatePrivateRoom(Alteruna.Multiplayer.Core.MethodArguments.RoomArgs)">
            <summary>
            Create a new private room.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.LockRoom">
            <summary>
            Lock current room. 
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.UnlockRoom(System.Boolean)">
            <summary>
            Unlock current room.
            </summary>
            <param name="matchmaking">Set state for matchmaking.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.SetRoomName(System.String)">
            <summary>
            Rename currently joined room.
            </summary>
            <param name="roomName">New room name.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.JoinWithInviteCode(System.String)">
            <summary>
            Join a room using an invite code.
            </summary>
            <param name="code">Invite code.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.RefreshRoomList">
            <summary>
            Refresh the AvailableRooms list containing the currently available Rooms on the server.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetUser">
            <summary>
            Get your own User.
            </summary>
            <returns>User or null</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetUser(System.UInt16)">
            <summary>
            Get User by index.
            </summary>
            <param name="userIndex">Index of user.</param>
            <returns>User or null</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetUser(System.Int32)">
            <summary>
            Get User by index.
            </summary>
            <param name="userIndex">Index of user.</param>
            <returns>User or null</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetUser(System.String)">
            <summary>
            Get User by name.
            </summary>
            <param name="userName">name of user.</param>
            <returns>User or null</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetUsers">
            <summary>
            Get all Users from current room.
            </summary>
            <returns>User list</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetAvatar">
            <summary>
            Get locally spawned Avatar.
            </summary>
            <returns>Avatar or null</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetAvatar(System.UInt16)">
            <summary>
            Get Avatar by index.
            </summary>
            <param name="userIndex">Index of the Avatar's possessor.</param>
            <returns>Avatar or null</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetAvatar(System.String)">
            <summary>
            Get Avatar by name.
            </summary>
            <param name="userName">name of the Avatar's possessor.</param>
            <returns>Avatar or null</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetAvatars">
            <summary>
            Get all Users from current room.
            </summary>
            <returns>Avatar list</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.LoadScene(System.String,System.Boolean)">
            <summary>
            Load a scene by name and move Multiplayer object and all Avatars to the new scene.
            </summary>
            <param name="sceneName">Name of target scene.</param>
            <param name="spawnAvatarOnLoad">Spawns your <see cref="T:Alteruna.Multiplayer.Avatar"/> after scene is loaded if true.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.LoadScene(System.Int32,System.Boolean)">
            <summary>
            Load a scene by index and move Multiplayer object and all Avatars to the new scene.
            </summary>
            <param name="sceneId">Build index of target scene.</param>
            <param name="spawnAvatarOnLoad">Spawns your <see cref="T:Alteruna.Multiplayer.Avatar"/> after scene is loaded if true.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.RegisterSynchronizable(Alteruna.Multiplayer.IAdaptiveSerializableUniqueID)">
            <summary>
            Register a Synchronizable to be synchronized through Alteruna Multiplayer.
            </summary>
            <param name="id">The UniqueID of the Synchronizable.</param>
            <param name="synchronizable">The Synchronizable to be registered.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.DeregisterCodec(System.Guid)">
            <summary>
            Deregister a Synchronizable from Alteruna Multiplayer, so that it is no longer being synchronized.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.Sync(System.Guid,Alteruna.Multiplayer.Core.Reliability)">
            <summary>
            Synchronize a specific Synchronizable through Alteruna Multiplayer.
            </summary>
            <param name="uid">The UniqueID of the Synchronizable to synchronize.</param>
            <param name="reliability">The reliability of the packet.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.Sync(Alteruna.Multiplayer.IUniqueID,Alteruna.Multiplayer.Core.Reliability)">
            <summary>
            Synchronize a specific Synchronizable through Alteruna Multiplayer.
            </summary>
            <param name="uniqueId">Object implementing the IUniqueID interface.</param>
            <param name="reliability">The reliability of the packet.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.Sync(Alteruna.Multiplayer.IAdaptiveSerializableUniqueID,Alteruna.Multiplayer.Core.Reliability)">
            <summary>
            Synchronize a specific Synchronizable through Alteruna Multiplayer.
            </summary>
            <param name="adaptiveSerializableUniqueId">Object implementing the IAdaptiveSerializableUniqueID interface.</param>
            <param name="reliability">The reliability of the packet.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.Sync(Alteruna.Multiplayer.CommunicationBridgeUID,Alteruna.Multiplayer.Core.Reliability)">
            <summary>
            Synchronize a specific Synchronizable through Alteruna Multiplayer.
            </summary>
            <param name="communicationBridgeUid">Class inherent from CommunicationBridgeUID.</param>
            <param name="reliability">The reliability of the packet.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.Sync(System.Guid,System.Collections.Generic.List{System.UInt16},Alteruna.Multiplayer.Core.Reliability)">
            <summary>
            Synchronize a specific Synchronizable through Alteruna Multiplayer.
            </summary>
            <param name="id">The UniqueID of the Synchronizable to synchronize.</param>
            <param name="users">The Users to synchronize the Synchronizable to.</param>
            <param name="reliability">The reliability of the packet.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.Sync(Alteruna.Multiplayer.CommunicationBridgeUID,System.Collections.Generic.List{System.UInt16},Alteruna.Multiplayer.Core.Reliability)">
            <summary>
            Synchronize a specific Synchronizable through Alteruna Multiplayer.
            </summary>
            <param name="communicationBridgeUid">Class inherent from CommunicationBridgeUID.</param>
            <param name="users">The Users to synchronize the Synchronizable to.</param>
            <param name="reliability">The reliability of the packet.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.SendToBucket(System.Guid,System.Int32)">
            <summary>
            Synchronize a specific UID to all Users within a specific bucket.
            </summary>
            <param name="id">The UniqueID of the Synchronizable to synchronize.</param>
            <param name="bucketIndex">The index of the bucket to synchronize the Synchronizable in.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.SendToBucket(Alteruna.Multiplayer.IUniqueID,System.Int32,Alteruna.Multiplayer.Core.Reliability)">
            <summary>
            Synchronize a specific object implementing IUniqueID to all Users within a specific bucket.
            </summary>
            <param name="uniqueId">Object implementing the IUniqueID interface.</param>
            <param name="bucketIndex">The index of the bucket to synchronize the Synchronizable in.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.SendToBucket(Alteruna.Multiplayer.IAdaptiveSerializableUniqueID,System.Int32,Alteruna.Multiplayer.Core.Reliability)">
            <summary>
            Synchronize a specific object implementing IAdaptiveSerializableUniqueID to all Users within a specific bucket.
            </summary>
            <param name="adaptiveSerializableUniqueID">Object implementing the IAdaptiveSerializableUniqueID interface.</param>
            <param name="bucketIndex">The index of the bucket to synchronize the Synchronizable in.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.SendToBucket(Alteruna.Multiplayer.CommunicationBridgeUID,System.Int32,Alteruna.Multiplayer.Core.Reliability)">
            <summary>
            Synchronize a specific CommunicationBridgeUID to all Users within a specific bucket.
            </summary>
            <param name="communicationBridgeUid">Class inherent from CommunicationBridgeUID.</param>
            <param name="bucketIndex">The index of the bucket to synchronize the Synchronizable in.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetAllSynchronizables(System.Collections.Generic.List{Alteruna.Multiplayer.Core.Packets.SynchronizableElement})">
            <summary>
            Get a list of all currently registered Synchronizables.
            </summary>
            <param name="synchronizables">The list to be appended with all Synchronizables.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetAllSynchronizables">
            <summary>
            Get a list of all currently registered Synchronizables.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetSynchronizable(Alteruna.Multiplayer.IUniqueID)">
            <summary>
            Get a Synchronizable through its UniqueID.
            </summary>
            <param name="id">Specified IUniqueID object to get the UID from.</param>
            <returns>The Synchronizable or null.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetSynchronizable(System.Guid)">
            <summary>
            Get a Synchronizable through its UniqueID.
            </summary>
            <param name="id">The UniqueID of the Synchronizable to get.</param>
            <returns>The Synchronizable or null.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.TryGetSynchronizable(Alteruna.Multiplayer.IUniqueID,Alteruna.Multiplayer.Core.IAdaptiveSerializable@)">
            <summary>
            Get a Synchronizable through its UniqueID.
            </summary>
            <param name="id">Specified IUniqueID object to get the UID from.</param>
            <param name="synchronizable">The Synchronizable or null.</param>
            <returns>True if the Synchronizable was found, else false.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.TryGetSynchronizable(System.Guid,Alteruna.Multiplayer.Core.IAdaptiveSerializable@)">
            <summary>
            Get a Synchronizable through its UniqueID.
            </summary>
            <param name="id">The UniqueID of the Synchronizable to get.</param>
            <param name="synchronizable">The Synchronizable or null.</param>
            <returns>True if the Synchronizable was found, else false.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetGameObjectById(Alteruna.Multiplayer.IUniqueID)">
            <summary>
            Get a Unity GameObject through its UniqueID.
            </summary>
            <param name="id">Specified IUniqueID object to get the UID from.</param>
            <returns>GameObject or null.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetGameObjectById(System.Guid)">
            <summary>
            Get a Unity GameObject through its UID.
            </summary>
            <param name="id">Specified UID.</param>
            <returns>GameObject or null.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetComponentById(Alteruna.Multiplayer.IUniqueID)">
            <summary>
            Get a Unity Component through its UID.
            </summary>
            <param name="id">Specified UID.</param>
            <returns>GameObject or null.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetComponentById(System.Guid)">
            <summary>
            Get a Unity Component through its UID.
            </summary>
            <param name="id">Specified UID.</param>
            <returns>GameObject or null.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetObjectById``1(Alteruna.Multiplayer.IUniqueID)">
            <summary>
            Get a object inheriting from IAdaptiveSerializableUniqueID through its UID.
            </summary>
            <param name="id">Specified UID.</param>
            <returns>GameObject or null.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetObjectById``1(System.Guid)">
            <summary>
            Get a object inheriting from IAdaptiveSerializableUniqueID through its UID.
            </summary>
            <param name="id">Specified UID.</param>
            <returns>GameObject or null.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.IsRegistered(Alteruna.Multiplayer.IUniqueID)">
            <summary>
            Check is specified the UniqueID registered.
            </summary>
            <param name="id">Specified IUniqueID object to get the UID from.</param>
            <returns>True if specified UID is registered.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.IsRegistered(System.Guid)">
            <summary>
            Check is specified UID registered.
            </summary>
            <param name="id">Specified UID.</param>
            <returns>True if specified UID is registered.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.WaitLockResource(System.Guid)">
            <summary>
            Wait until the Synchronizable with the specified UniqueID becomes available for ownership.
            </summary>
            <param name="id">The UniqueID of the Synchronizable.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.TryLockResource(System.Guid)">
            <summary>
            Attempt to gain ownership of a Synchronizable with the specified UniqueID.
            </summary>
            <param name="id">The UniqueID of the Synchronizable.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.UnlockResource(System.Guid)">
            <summary>
            Release ownership of the Synchronizable with the specified UniqueID.
            </summary>
            <param name="id">The UniqueID of the Synchronizable.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.InvokeRemoteProcedure(System.String,System.UInt16,Alteruna.Multiplayer.Core.ProcedureParameters,Alteruna.Multiplayer.Core.ISerializable,Alteruna.Multiplayer.Core.Reliability,Alteruna.Multiplayer.Core.RemoteProcedureReply,Alteruna.Multiplayer.Core.RemoteProcedureAck)">
            <summary>
            Invoke a Remote Procedure Call (RPC).
            </summary>
            <param name="name">The name of the RPC to invoke.</param>
            <param name="toUserID">The UserID of the User on which to call the procedure.</param>
            <param name="parameters">The parameters to be sent to the RPC.</param>
            <param name="userData">The user data to be sent to the RPC.</param>
            <param name="reliability">The reliability at which to invoke the RPC.</param>
            <param name="replyCallback">The callback gotten from the RPC.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.InvokeRemoteProcedure(System.String,Alteruna.Multiplayer.Core.UserId,Alteruna.Multiplayer.Core.ProcedureParameters,Alteruna.Multiplayer.Core.ISerializable,Alteruna.Multiplayer.Core.Reliability,Alteruna.Multiplayer.Core.RemoteProcedureReply,Alteruna.Multiplayer.Core.RemoteProcedureAck)">
            <summary>
            Invoke a Remote Procedure Call (RPC).
            </summary>
            <param name="name">The name of the RPC to invoke.</param>
            <param name="toUserID">The UserID of the User on which to call the procedure.</param>
            <param name="parameters">The parameters to be sent to the RPC.</param>
            <param name="userData">Alternative to the parameters.</param>
            <param name="reliability">The reliability at which to invoke the RPC.</param>
            <param name="replyCallback">RPC replay callback.</param>
            <returns>The callID of the RPC.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.MulticastRemoteProcedure(System.String,System.Collections.Generic.List{System.UInt16},Alteruna.Multiplayer.Core.ProcedureParameters,Alteruna.Multiplayer.Core.ISerializable,Alteruna.Multiplayer.Core.Reliability,Alteruna.Multiplayer.Core.RemoteProcedureReply,Alteruna.Multiplayer.Core.RemoteProcedureAck)">
            <summary>
            Invoke a Remote Procedure Call (RPC) for multiple Users.
            </summary>
            <param name="name">The name of the RPC to invoke.</param>
            <param name="toUsers">The UserIDs of the Users on which to call the procedure.</param>
            <param name="parameters">The parameters to be sent to the RPC.</param>
            <param name="userData">The user data to be sent to the RPC.</param>
            <param name="reliability">The reliability at which to invoke the RPC.</param>
            <param name="replyCallback">RPC replay callback.</param>
            <returns>The callID of the RPC.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.RegisterRemoteProcedure(System.String,Alteruna.Multiplayer.Core.RemoteProcedure)">
            <summary>
            Register a Remote Procedure.
            </summary>
            <param name="procedureName">The name of the procedure.</param>
            <param name="callback">The function to call through the procedure.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.RegisterRemoteProcedureUnsafe(System.String,Alteruna.Multiplayer.Core.RemoteProcedure)">
            <summary>
            Register a Remote Procedure with the assumption that service is initialized.
            </summary>
            <param name="procedureName">The name of the procedure.</param>
            <param name="callback">The function to call through the procedure.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.ReplyRemoteProcedure(System.UInt32,System.UInt16,Alteruna.Multiplayer.Core.ProcedureParameters,Alteruna.Multiplayer.Core.ISerializable)">
            <summary>
            Reply to a Remote Procedure Called by another User.
            </summary>
            <param name="callID">The callID of the RPC to reply to.</param>
            <param name="result">The result of the procedure.</param>
            <param name="parameters">The parameters to be sent with the reply.</param>
            <param name="userData">Alternative to parameters.</param>
        </member>
        <member name="P:Alteruna.Multiplayer.MultiplayerManager.UIDString">
            <summary>
            Get the unique identifier of the Alteruna Multiplayer instance as a string.
            </summary>
            <remarks>
            Read-only property. Setting this property has no effect.
            </remarks>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.Disconnect">
            <summary>
            Disconnect from the Alteruna Multiplayer service and reset the local state.
            </summary>
            <remarks>
            It's not recommended reusing the same Alteruna Multiplayer instance. Use with caution.
            </remarks>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.SpawnAvatar">
            <summary>
            Spawn your avatar.
            </summary>
            <returns>Spawned Avatar.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.SpawnAvatar(UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Spawn Avatar using position and rotation.
            </summary>
            <param name="pos">Position</param>
            <param name="rot">Rotation</param>
            <returns>Spawned Avatar.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.SpawnAvatar(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Spawn Avatar using position and rotation.
            </summary>
            <param name="pos">Position</param>
            <param name="rot">Rotation</param>
            <returns>Spawned Avatar.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.SpawnAvatar(UnityEngine.Transform)">
            <summary>
            Spawn Avatar at the position and oration of a transform.
            </summary>
            <param name="transform">Target Transform.</param>
            <returns>Spawned Avatar.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.SpawnAvatar(Alteruna.Multiplayer.Core.User)">
            <summary>
            Instantiate the Avatar prefab.
            </summary>
            <param name="user">owner</param>
            <returns>Avatar GameObject with position, rotation, scene, and layer of its spawn location</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.SpawnAvatar(System.UInt16,System.Boolean)">
            <summary>
            Instantiate the Avatar prefab.
            </summary>
            <param name="userIndex">Index used when <c>SpawnAvatarPerIndex</c> is true.</param>
            <returns>Avatar GameObject with position, rotation, scene, and layer of its spawn location</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetLowestUserId">
            <summary>
            Get lowest User ID. Default is 0.
            </summary>
            <returns><c>lowest User ID. 0 if not in room.</c></returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.SwapUserHost(System.UInt16,System.UInt16)">
            <summary>
            Set user by old id to IsHost to false and new id to IsHost to true.
            </summary>
            <param name="oldLowest">old user id.</param>
            <param name="newLowest">new user id.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.IsLowestUserId">
            <summary>
            Get if you are the primary client in a room.
            </summary>
            <returns>True when in room and client index equals <c>LowestUserIndex</c>.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.MultiplayerManager.GetLastBlockResponse">
            <summary>
            Get reason for connection block.
            </summary>
            <returns>Empty string or reason.</returns>
        </member>
        <member name="T:Alteruna.Multiplayer.Bucket">
            <summary>
            Class <c>Bucket</c> is a collection of players used to define NetLOD behaviour.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Bucket.Name">
            <summary>
            The name of the bucket.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Bucket.NetLOD">
            <summary>
            The LOD level of the bucket.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Bucket.Users">
            <summary>
            The users currently in this bucket.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.AvatarBehavior">
            <summary>
            Behavior for avatar spawning.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.NameGenerator">
            <summary>
            Class <c>NameGenerator</c> generates names from a random animal and adjective.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.NameGenerator.Name">
            <summary>
            Last name generated by the Generate() method.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.NameGenerator.Generate">
            <summary>
            Generate a new name from <c>Adjectives</c> and <c>Nouns</c> and store the result in <c>Name</c>.
            </summary>
            <returns>New random name.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.NameGenerator.GenerateStatic">
            <summary>
            Generate using static method and default values.
            </summary>
            <returns>New random name.</returns>
        </member>
        <member name="T:Alteruna.Multiplayer.UnityWriter">
            <summary>
            Class <c>UnityWriter</c> is used to write Unity types to a <c>Writer</c>.
            </summary>
            <seealso cref="T:Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer" />
        </member>
        <member name="M:Alteruna.Multiplayer.UnityWriter.Write(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,UnityEngine.Vector3Int)">
            <summary>
            Write a Vector3Int to a Writer.
            </summary>
            <param name="writer">Writer</param>
            <param name="vector">Value</param>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityWriter.Write(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,UnityEngine.Vector2Int)">
            <summary>
            Write a Vector2Int to a Writer.
            </summary>
            <param name="writer">Writer</param>
            <param name="vector">Value</param>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityWriter.Write(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,UnityEngine.Vector4)">
            <summary>
            Write a Vector4 to a Writer.
            </summary>
            <param name="writer">Writer</param>
            <param name="vector">Value</param>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityWriter.Write(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,UnityEngine.Vector3)">
            <summary>
            Write a Vector3 to a Writer.
            </summary>
            <param name="writer">Writer</param>
            <param name="vector">Value</param>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityWriter.Write(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,UnityEngine.Vector2)">
            <summary>
            Write a Vector2 to a Writer.
            </summary>
            <param name="writer">Writer</param>
            <param name="vector">Value</param>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityWriter.Write(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,UnityEngine.Quaternion)">
            <summary>
            Write a Quaternion to a Writer.
            </summary>
            <param name="writer">Writer</param>
            <param name="quaternion">Value</param>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityWriter.Write(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,UnityEngine.Color)">
            <summary>
            Write a Color (RGBA) to a Writer.
            </summary>
            <param name="writer">Writer</param>
            <param name="color">Value</param>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityWriter.Write(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,UnityEngine.Color32)">
            <summary>
            Write a Color32 (RGBA) to a Writer.
            </summary>
            <param name="writer">Writer</param>
            <param name="color">Value</param>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityWriter.Write(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,UnityEngine.Rect)">
            <summary>
            Write a Rect to a Writer.
            </summary>
            <param name="writer">Writer</param>
            <param name="rect">Value</param>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityWriter.Write(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,UnityEngine.RectInt)">
            <summary>
            Write a RectInt to a Writer.
            </summary>
            <param name="writer">Writer</param>
            <param name="rect">Value</param>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityWriter.Write(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,UnityEngine.Bounds)">
            <summary>
            Write a Bounds to a Writer.
            </summary>
            <param name="writer">Writer</param>
            <param name="bounds">Value</param>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityWriter.Write(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,UnityEngine.BoundsInt)">
            <summary>
            Write a BoundsInt to a Writer.
            </summary>
            <param name="writer">Writer</param>
            <param name="bounds">Value</param>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityWriter.Write(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,UnityEngine.Ray)">
            <summary>
            Write a Ray to a Writer.
            </summary>
            <param name="writer">Writer</param>
            <param name="ray">Value</param>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityWriter.Write(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,UnityEngine.Ray2D)">
            <summary>
            Write a Ray2D to a Writer.
            </summary>
            <param name="writer">Writer</param>
            <param name="ray">Value</param>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityWriter.Write(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,UnityEngine.Plane)">
            <summary>
            Write a Plane to a Writer.
            </summary>
            <param name="writer">Writer</param>
            <param name="plane">Value</param>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityWriter.Write(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,UnityEngine.Pose)">
            <summary>
            Write a Pose to a Writer.
            </summary>
            <param name="writer">Writer</param>
            <param name="pose">Value</param>
        </member>
        <member name="T:Alteruna.Multiplayer.UnityReader">
            <summary>
            Class <c>UnityReader</c> is used to write Unity types to a <c>Reader</c>.
            </summary>
            <seealso cref="T:Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader" />
        </member>
        <member name="M:Alteruna.Multiplayer.UnityReader.ReadVector3Int(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <summary>
            Read Vector3Int from a Reader.
            </summary>
            <param name="reader">Reader</param>
            <returns>Vector3Int</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityReader.ReadVector2Int(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <summary>
            Read Vector2Int from a Reader.
            </summary>
            <param name="reader">Reader</param>
            <returns>Vector2Int</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityReader.ReadVector4(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <summary>
            Read Vector4 from a Reader.
            </summary>
            <param name="reader">Reader</param>
            <returns>Vector4</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityReader.ReadVector3(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <summary>
            Read Vector3 from a Reader.
            </summary>
            <param name="reader">Reader</param>
            <returns>Vector3</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityReader.ReadVector2(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <summary>
            Read Vector2 from a Reader.
            </summary>
            <param name="reader">Reader</param>
            <returns>Vector2</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityReader.ReadQuaternion(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <summary>
            Read Quaternion from a Reader.
            </summary>
            <param name="reader">Reader</param>
            <returns>Quaternion</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityReader.ReadColor(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <summary>
            Read Color from a Reader.
            </summary>
            <param name="reader">Reader</param>
            <returns>Color</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityReader.ReadColor32(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <summary>
            Read Color32 from a Reader.
            </summary>
            <param name="reader">Reader</param>
            <returns>Color32</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityReader.ReadRect(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <summary>
            Read Rect from a Reader.
            </summary>
            <param name="reader">Reader</param>
            <returns>Rect</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityReader.ReadRectInt(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <summary>
            Read RectInt from a Reader.
            </summary>
            <param name="reader">Reader</param>
            <returns>RectInt</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityReader.ReadBounds(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <summary>
            Read Bounds from a Reader.
            </summary>
            <param name="reader">Reader</param>
            <returns>Bounds</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityReader.ReadBoundsInt(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <summary>
            Read BoundsInt from a Reader.
            </summary>
            <param name="reader">Reader</param>
            <returns>BoundsInt</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityReader.ReadRay(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <summary>
            Read Ray from a Reader.
            </summary>
            <param name="reader">Reader</param>
            <returns>Ray</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityReader.ReadRay2D(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <summary>
            Read Ray2D from a Reader.
            </summary>
            <param name="reader">Reader</param>
            <returns>Ray2D</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityReader.ReadPlane(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <summary>
            Read Plane from a Reader.
            </summary>
            <param name="reader">Reader</param>
            <returns>Plane</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.UnityReader.ReadPose(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <summary>
            Read Pose from a Reader.
            </summary>
            <param name="reader">Reader</param>
            <returns>Pose</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.ServiceListeners.Alteruna#Multiplayer#Core#IServiceStateListener#GetAllSynchronizables(System.Collections.Generic.List{Alteruna.Multiplayer.Core.Packets.SynchronizableElement})">
            <summary>
            Get a list of all currently registered Synchronizables.
            </summary>
            <param name="synchronizables">The list to be appended with all Synchronizables.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.ServiceListeners.Alteruna#Multiplayer#Core#IServiceStateListener#GetSynchronizable(System.Guid)">
            <summary>
            Get a Synchronizable through its UniqueID.
            </summary>
            <param name="id">The UniqueID of the Synchronizable to get.</param>
            <returns>The Synchronizable or null.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.ServiceListeners.Alteruna#Multiplayer#Core#IServiceStateListener#TryGetSynchronizable(System.Guid,Alteruna.Multiplayer.Core.IAdaptiveSerializable@)">
            <summary>
            Get a IAdaptiveSerializable through its UniqueID.
            </summary>
            <param name="id">The UniqueID of the Synchronizable to get.</param>
            <param name="synchronizable">The Synchronizable or null.</param>
            <returns>True if the Synchronizable was found, else false.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.ServiceListeners.Alteruna#Multiplayer#Core#IServiceStateListener#HasSynchroniable(System.Guid)">
            <summary>
            Whether Alteruna Multiplayer currently has a Synchronizable with the specified UniqueID registered.
            </summary>
            <param name="id">The UniqueID of the Synchronizable to look up.</param>
            <returns>True if the Synchronizable exists, else false.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.ServiceListeners.Alteruna#Multiplayer#Core#IServiceStateListener#OnForceSynced(Alteruna.Multiplayer.Core.ServiceState,System.UInt16)">
            <summary>
            Called after data is serialized for a force sync packet.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.ServiceListeners.Alteruna#Multiplayer#Core#IServiceStateListener#OnForceSync(Alteruna.Multiplayer.Core.ServiceState,System.UInt16)">
            <summary>
            Called before data is synced for a force sync packet.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Synchronizable">
             <summary>
             Class <c>Synchronizable</c> defines a base containing data to be synchronized with other clients in the Room.
             Synchronizable also support attributes, but unlike <c>AttributesSync</c>, it does not auto commit changes in fields marked with the <c>SynchronizableField</c> attribute.
             </summary>
             <example>
             Synchronizables are automatically assigned a unique global identifier (UniqueID) when they are first created. This ensures that all application instances can always identify the correct object to synchronize and prevent collisions. You can inspect the assigned UniqueID in the inspector window for all objects that have Synchronizable components attached to them.
             
             Alteruna Multiplayer supports synchronization of virtually any data type or user-defined class as long as they can be serialized as a stream of bytes. Alteruna Multiplayer provides a framework for reading and writing the most common primitive data types in C#. It does support sending a series of bytes which open up for more complex data types to be synchronized as well.
             Here is a detailed example of a Synchronizable.
             <code>
             public class ExampleSynchronizable : Synchronizable
                {
                    // Data to be synchronized with other players in our playroom.
                    public float SynchronizedFloat = 3.0f;
            
                    // Used to store the previous version of our data so that we know when it has changed.
                    private float _oldSynchronizedFloat;
            
                    public override void DisassembleData(Reader reader, byte LOD)
                    {
                        // Set our data to the updated value we have recieved from another player.
                        SynchronizedFloat = reader.ReadFloat();
            
                        // Save the new data as our old data, otherwise we will immediatly think it changed again.
                        _oldSynchronizedFloat = SynchronizedFloat;
                    }
            
                    public override void AssembleData(Writer writer, byte LOD)
                    {
                        // Write our data so that it can be sent to the other players in our playroom.
                        writer.Write(SynchronizedFloat);
                    }
            
                    private void Update()
                    {
                        // If the value of our float has changed, sync it with the other players in our playroom.
                        if (SynchronizedFloat != _oldSynchronizedFloat)
                        {
                            // Store the updated value
                            _oldSynchronizedFloat = SynchronizedFloat;
            
                            // Tell Alteruna Multiplayer that we want to commit our data.
                            Commit();
                        }
            
                        // Update the Synchronizable
                        base.SyncUpdate();
                    }
                 }
             </code>
             </example>
             <seealso cref="T:Alteruna.Multiplayer.AttributesSync"/>
        </member>
        <member name="F:Alteruna.Multiplayer.Synchronizable.MAX_LOD">
            <summary>
            The highest NetLOD value a Synchronizable can have.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Synchronizable.BucketBehaviors">
            <summary>
            A list of Bucket Behaviors describing how this Synchronizable is syncrhonized depending on which Bucket it is being sent to.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Synchronizable.Reliability">
            <summary>
            Reliability of the Synchronizable.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Synchronizable.AssembleData(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,Alteruna.Multiplayer.Core.MethodArguments.SerializeInfo)">
            <summary>
            Called by the <c>SynchronizableManager</c> after Commit() to collect the data to be synced before sending it.
            </summary>
            <param name="writer">Used to write the data we want to be synchronized.</param>
            <param name="info">Additional data.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Synchronizable.DisassembleData(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader,Alteruna.Multiplayer.Core.MethodArguments.UnserializeInfo)">
            <summary>
            Called by the <c>SynchronizableManager</c> after recieving new data to be synced with this <c>Synchronizable</c>.
            </summary>
            <param name="reader">Contains the received data.</param>
            <param name="info">Additional data.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Synchronizable.Commit">
            <summary>
            This method informs the <c>SynchronizableManager</c> that this synchronizable has new data that needs to be synced.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Synchronizable.Serialize(Alteruna.Multiplayer.Core.ITransportStreamWriter,Alteruna.Multiplayer.Core.MethodArguments.SerializeInfo)">
            <summary>
            Serialize Synchronizable.
            </summary>
            <param name="processor">Writer processor.</param>
            <param name="info">Additional data.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Synchronizable.Unserialize(Alteruna.Multiplayer.Core.ITransportStreamReader,Alteruna.Multiplayer.Core.MethodArguments.UnserializeInfo)">
            <summary>
            Unserialize Synchronizable.
            </summary>
            <param name="processor">Reader processor.</param>
            <param name="info">Additional data.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Synchronizable.SyncUpdate">
            <summary>
            Update the internals of the <c>Synchronizable</c>.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Synchronizable.BroadcastRemoteMethod(System.Int32,System.Object[])">
            <summary>
            Commits method with the <c>SynchronizableMethod</c> attribute on evey client including sender with given parameters.
            </summary>
            <param name="id">Id of method. Get the id by calling <see cref="M:Alteruna.Multiplayer.Synchronizable.GetMethodAttributeId(System.String)">GetMethodAttributeId(string)</see>.</param>
            <param name="parameters">Argument(s) of a target method</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when id is grater or equal to the amount of registered methods</exception>
            <exception cref="T:System.ArgumentException">Thrown when parameters count of target method does not match count of given parameters</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Synchronizable.BroadcastRemoteMethod(System.String,System.Object[])">
            <summary>
            Commits method with the <c>SynchronizableMethod</c> attribute on evey client including sender with given parameters.
            with given parameters.
            </summary>
            <remarks>
            For a more optimized call method use InvokeRemoteMethod(int, params ... )
            </remarks>
            <param name="methodName">Name of target method.</param>
            <param name="parameters">Argument(s) of a target method</param>
            <exception cref="T:System.ArgumentException">Thrown when methodName does not mach a name of a registered method.</exception>
            <exception cref="T:System.ArgumentException">Thrown when parameters count of target method does not match count of given parameters</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Synchronizable.InvokeRemoteMethod(System.Int32,System.Object[])">
            <summary>
            Commits method with the <c>SynchronizableMethod</c> attribute on evey client excluding sender with given parameters.
            
            </summary>
            <param name="id">Id of method. Get the id by calling <see cref="M:Alteruna.Multiplayer.Synchronizable.GetMethodAttributeId(System.String)">GetMethodAttributeId(string)</see>.</param>
            <param name="parameters">Argument(s) of a target method</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when id is grater or equal to the amount of registered methods</exception>
            <exception cref="T:System.ArgumentException">Thrown when parameters count of target method does not match count of given parameters</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Synchronizable.InvokeRemoteMethod(System.String,System.Object[])">
            <summary>
            Commits method with the <c>SynchronizableMethod</c> attribute on evey client excluding sender with given parameters.
            with given parameters.
            </summary>
            <remarks>
            For a more optimized call method use InvokeRemoteMethod(int, params ... )
            </remarks>
            <param name="methodName">Name of target method.</param>
            <param name="parameters">Argument(s) of a target method</param>
            <exception cref="T:System.ArgumentException">Thrown when methodName does not mach a name of a registered method.</exception>
            <exception cref="T:System.ArgumentException">Thrown when parameters count of target method does not match count of given parameters</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Synchronizable.GetMethodAttributeId(System.String)">
            <summary>
            Get id of method with the <c>SynchronizableMethod</c> attribute by name.
            </summary>
            <param name="methodName">Name of a method with the <c>SynchronizableMethod</c> attribute.</param>
            <returns>Id of method with the <c>SynchronizableMethod</c> attribute with target name.</returns>
            <exception cref="T:System.ArgumentException">Thrown when methodName does not mach a name of a registered method.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.Synchronizable.GetMethodAttributeName(System.Int32)">
            <summary>
            Get name of method with the <c>SynchronizableMethod</c> attribute by index.
            </summary>
            <param name="methodId">Index of method with the <c>SynchronizableMethod</c> attribute.</param>
            <returns>Name of method with the <c>SynchronizableMethod</c> attribute with target Index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">methodId is out of range or less than zero.</exception>
        </member>
        <member name="T:Alteruna.Multiplayer.Synchronizable.SynchronizableField">
            <summary>
            Synchronise target field.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.Synchronizable.SynchronizableMethod">
            <summary>
            Synchronise target Method.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.BucketBehavior">
            <summary>
            Behavior of a LOD bucket.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.AnimationSynchronizable">
             <summary>
             Synchronizable Animator component.
             </summary>
             <remarks>
            	In most cases, you should avoid synchronizing the animations as they are usually not deterministic and can be performed from actions directly.
             For example, instead of playing walk animation, you should consider animating based on the velocity of the character locally.
             </remarks>
             <example>
            
            	AnimationSynchronizable is used together with the Unity Animator.
             Adding a AnimationSynchronizable component to a GameObject will automatically add the Animator component.
            
             To sync using the AnimationSynchronizable component, you need to call the method from the AnimationSynchronizable component.
             
            	<code>
             using UnityEngine;
            
             [RequireComponent(typeof(Alteruna.AnimationSynchronizable))]
            	public class MyAnimatedObj : MonoBehaviour
            	{
            		private Alteruna.AnimationSynchronizable _aniSync;
            	
            		// We can optimize by precalculating the hash of the animation state.
            		private int JumpId = Animator.StringToHash("Jump");
            	
            		private void Start()
            		{
            			_aniSync = GetComponent&lt;Alteruna.AnimationSynchronizable&gt;();
            
            			// We can get the Unity Animator from the AnimationSynchronizable component.
            			if (_aniSync.Animator.isHuman) print("Humanoid");
            		}
            	
            		private void Update()
            		{
            			// Play animation
            			if (Input.GetKeyDown(KeyCode.Space))
            			{
            				// play for all clients
            				_aniSync.Play(JumpId);
            			}
            		}
            	}
             </code>
             </example>
        </member>
        <member name="F:Alteruna.Multiplayer.AnimationSynchronizable.OnlyCommitNewStates">
            <summary>
            If true, only commit new states in SetBool, SetInteger, and SetFloat methods.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.EnableSynchronizable">
            <summary>
            A component for synchronizing the enabling or disabling of a GameObject across multiple clients in a multiplayer environment.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.EnableSynchronizable.Possessed(System.Boolean,Alteruna.Multiplayer.Core.User)">
            <summary>
            Called when the object is possessed. Sets the ownership status of the GameObject.
            </summary>
            <param name="isMe">Boolean indicating if the current user is the owner.</param>
            <param name="user">The user who is possessing the object.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.EnableSynchronizable.OnEnable">
            <summary>
            Invoked when the GameObject is enabled. Registers the object for synchronization and, if owned by the current user and in a multiplayer room, requests enabling the GameObject for all users.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.EnableSynchronizable.OnDisable">
            <summary>
            Invoked when the GameObject is disabled. If owned by the current user and in a multiplayer room, requests disabling the GameObject for all users.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.EnableSynchronizable.RemoteDisable">
            <summary>
            A synchronizable method that remotely disables the GameObject.
            This method is intended to be invoked across the network to ensure consistent state among all clients.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.EnableSynchronizable.RemoteEnable">
            <summary>
            A synchronizable method that remotely enables the GameObject.
            This method is intended to be invoked across the network to ensure consistent state among all clients.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.InputSynchronizable.IInput">
            <summary>
            Alteruna Input interface.
            Can be used to create a custom synced input system.
            </summary>
            <seealso cref="T:Alteruna.Multiplayer.InputSynchronizable.InputSynchronizable"/>
            <seealso cref="T:Alteruna.Multiplayer.InputSynchronizable.SyncedKey"/>
            <seealso cref="T:Alteruna.Multiplayer.InputSynchronizable.SyncedAxis"/>
        </member>
        <member name="P:Alteruna.Multiplayer.InputSynchronizable.IInput.KeyValues">
            <summary>
            Get synced button values by index
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.InputSynchronizable.IInput.AxesValues">
            <summary>
            Get synced axes values by index
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.InputSynchronizable.IInput.OnKeyUpdate">
            <summary>
            Event for changes in key inputs.
            passes <c>KeyCode</c> and state.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.IInput.AddKey(UnityEngine.KeyCode)">
            <summary>
            Add a key to the <c>InputSynchronizable</c>
            </summary>
            <param name="keyCode"><c>KeyCode</c> of the target key</param>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.IInput.AddKey(UnityEngine.KeyCode[])">
            <summary>
            Add a array of keys to the <c>InputSynchronizable</c>
            </summary>
            <param name="keyCodes">Array of <c>KeyCode</c> to target</param>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.IInput.AddAxis(System.String)">
            <summary>
            Add a axis to the <c>InputSynchronizable</c>
            </summary>
            <param name="newAxis">string of the target axis</param>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.IInput.AddAxis(System.String[])">
            <summary>
            Add a array of axes to the <c>InputSynchronizable</c>
            </summary>
            <param name="newAxes">strings of the target axes</param>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.IInput.GetIndexOfKey(UnityEngine.KeyCode)">
            <summary>
            Get index of a registered <c>keyCode</c>.
            If the target <c>keyCode</c> dos not exist it returns <c>-1</c>
            </summary>
            <param name="keyCode">target</param>
            <returns><c>index</c> on success, <c>-1</c> on fail.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.IInput.TryGetIndexOfKey(UnityEngine.KeyCode,System.Int32@)">
            <summary>
            Attempts to get index of a registered <c>keyCode</c>.
            If the target <c>keyCode</c> dos not exist, return <c>false</c> and <c>index</c> will be 0
            </summary>
            <param name="keyCode">target</param>
            <param name="index">Index of target registered <c>keyCode</c></param>
            <returns>True on success</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.IInput.GetIndexOfAxis(System.String)">
            <summary>
            Get index of a registered <c>keyCode</c>.
            If the target <c>keyCode</c> dos not exist it returns <c>-1</c>
            </summary>
            <param name="targetAxis">target</param>
            <returns><c>index</c> on success, <c>-1</c> on fail.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.IInput.TryGetIndexOfAxis(System.String,System.Int32@)">
            <summary>
            Attempts to get index of a registered <c>keyCode</c>.
            If the target <c>keyCode</c> dos not exist, return <c>false</c> and <c>index</c> will be 0
            </summary>
            <param name="targetAxis">target</param>
            <param name="index">Index of target registered <c>keyCode</c></param>
            <returns>True on success</returns>
        </member>
        <member name="T:Alteruna.Multiplayer.InputSynchronizable.InputSynchronizable">
            <summary>
            Synchronize inputs (255 buttons and 255 axis maximum)
            The input vales will update on this and other clients simultaneously.
            </summary>
            <remarks>
            <img src="../images/Alteruna.InputSynchronizable.png" />
            </remarks>
            <example>
            Sync inputs and move transform based on those inputs.
            Note that this does not sync position, after a while the positions could become unsynced.
            <code>
            using UnityEngine;
            using Alteruna;
            
            public class SyncedPlayerMovement : MonoBehaviour
            {
            	//reference to a InputSynchronizable object in the scene with a avatar.
            	public InputSynchronizable InputSync;
            	public float Speed = 5;
            
            	private void Start() {
            		InputSync.AddAxis(new[] {"Horizontal", "Vertical"});
            	}
            
            	private void Update() {
            		float scaledSpeed = Speed * Time.deltaTime;
            		transform.Translate(
            			scaledSpeed * InputSync.AxesValues[0],
            			scaledSpeed * InputSync.AxesValues[1],
            			0);
            	}
             }
            </code>
            </example>
            <seealso cref="T:Alteruna.Multiplayer.InputSynchronizable.SyncedKey"/>
            <seealso cref="T:Alteruna.Multiplayer.InputSynchronizable.SyncedAxis"/>
        </member>
        <member name="P:Alteruna.Multiplayer.InputSynchronizable.InputSynchronizable.KeyValues">
            <summary>
            Get synced button values by index
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.InputSynchronizable.InputSynchronizable.AxesValues">
            <summary>
            Get synced axes values by index
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.InputSynchronizable.InputSynchronizable.UseLocalInput">
            <summary>
            Whether to use local input or use reply as input.
            When false, all clients including the sender will receive inputs simultaneously. (assuming identical connection)
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.InputSynchronizable.InputSynchronizable.keys">
            <summary>
            List of KeyCodes to track.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.InputSynchronizable.InputSynchronizable.axes">
            <summary>
            List of axes to track.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.InputSynchronizable.InputSynchronizable.OnKeyUpdate">
            <summary>
            Event for changes in key inputs.
            passes <c>KeyCode</c> and state.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.InputSynchronizable.AddKey(UnityEngine.KeyCode)">
            <summary>
            Add a key to the <c>InputSynchronizable</c>
            </summary>
            <param name="keyCode"><c>KeyCode</c> of the target key</param>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.InputSynchronizable.AddKey(UnityEngine.KeyCode[])">
            <summary>
            Add a array of keys to the <c>InputSynchronizable</c>
            </summary>
            <param name="keyCodes">Array of <c>KeyCode</c> to target</param>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.InputSynchronizable.AddAxis(System.String)">
            <summary>
            Add a axis to the <c>InputSynchronizable</c>
            </summary>
            <param name="newAxis">string of the target axis</param>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.InputSynchronizable.AddAxis(System.String[])">
            <summary>
            Add a array of axes to the <c>InputSynchronizable</c>
            </summary>
            <param name="newAxes">strings of the target axes</param>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.InputSynchronizable.GetIndexOfKey(UnityEngine.KeyCode)">
            <summary>
            Get index of a registered <c>keyCode</c>.
            If the target <c>keyCode</c> dos not exist it returns <c>-1</c>
            </summary>
            <param name="keyCode">target</param>
            <returns><c>index</c> on success, <c>-1</c> on fail.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.InputSynchronizable.TryGetIndexOfKey(UnityEngine.KeyCode,System.Int32@)">
            <summary>
            Attempts to get index of a registered <c>keyCode</c>.
            If the target <c>keyCode</c> dos not exist, return <c>false</c> and <c>index</c> will be 0
            </summary>
            <param name="keyCode">target</param>
            <param name="index">Index of target registered <c>keyCode</c></param>
            <returns>True on success</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.InputSynchronizable.GetIndexOfAxis(System.String)">
            <summary>
            Get index of a registered <c>keyCode</c>.
            If the target <c>keyCode</c> dos not exist it returns <c>-1</c>
            </summary>
            <param name="targetAxis">target</param>
            <returns><c>index</c> on success, <c>-1</c> on fail.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.InputSynchronizable.TryGetIndexOfAxis(System.String,System.Int32@)">
            <summary>
            Attempts to get index of a registered <c>keyCode</c>.
            If the target <c>keyCode</c> dos not exist, return <c>false</c> and <c>index</c> will be 0
            </summary>
            <param name="targetAxis">target</param>
            <param name="index">Index of target registered <c>keyCode</c></param>
            <returns>True on success</returns>
        </member>
        <member name="T:Alteruna.Multiplayer.InputSynchronizable.SyncedAxis">
             <summary>
             Alternative way of implementing <c>InputSynchronizable</c>.
             </summary>
             <example>
             We can setup a SyncedAxis in the inspector and register it in the Awake method.<br/>
             Setup to sync the Horizontal axis and use its value.
             <code>
            	using Alteruna;
            	using UnityEngine;
            
            	[RequireComponent(typeof(InputSynchronizable))]
            	public class InputTest : MonoBehaviour
            	{
            		public float Speed = 5;
            
            		public SyncedAxis AxisX = new SyncedAxis("Horizontal");
            		public SyncedAxis AxisY = new SyncedAxis("Vertical");
            
            		private InputSynchronizable _input;
            	
            		void Awake()
            		{
            			if (_input == null)
            				_input = GetComponent&lt;InputSynchronizable&gt;();
            		
            			AxisX.Register(_input);
            			AxisY.Register(_input);
            		}
            
            		void FixedUpdate()
            		{
            			float scaledSpeed = Speed * Time.deltaTime;
            			transform.Translate(
            				scaledSpeed * AxisX.Value,
            				scaledSpeed * AxisY.Value,
            				0);
            		}
            
            		private void Reset()
            		{
            			if (_input == null)
            				_input = GetComponent&lt;InputSynchronizable&gt;();
            		}
            	}
             </code>
             <img src="../images/Alteruna.SyncedAxis.InputTest.png" alt="Inspector setup of SyncedAxis"/>
             </example>
             <seealso cref="T:Alteruna.Multiplayer.InputSynchronizable.InputSynchronizable"/>
             <seealso cref="T:Alteruna.Multiplayer.InputSynchronizable.SyncedKey"/>
        </member>
        <member name="P:Alteruna.Multiplayer.InputSynchronizable.SyncedAxis.Axis">
            <summary>
            Target axis.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.InputSynchronizable.SyncedAxis.Value">
            <summary>
            Raw value of axis.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.InputSynchronizable.SyncedAxis.InputManager">
            <summary>
            Connected <c>IInput</c>.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.SyncedAxis.#ctor(Alteruna.Multiplayer.InputSynchronizable.IInput,System.String)">
            <summary>
            Register axis.
            </summary>
            <param name="inputManager"></param>
            <param name="axis"></param>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.SyncedAxis.#ctor(System.String)">
            <summary>
            Set axis without registering.
            </summary>
            <param name="axis">Target axis.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.SyncedAxis.Register">
            <summary>
            Register key to target <c>IInput</c>.
            </summary>
            <param name="inputManager">Target IInput.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.SyncedAxis.Register(Alteruna.Multiplayer.InputSynchronizable.IInput,System.String)">
            <summary>
            Register key to target <c>IInput</c>.
            </summary>
            <param name="inputManager">Target IInput.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.SyncedAxis.Register(Alteruna.Multiplayer.InputSynchronizable.IInput)">
            <summary>
            Register key on target <c>IInput</c>.
            </summary>
            <param name="inputManager">Target IInput.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.SyncedAxis.Deregister">
            <summary>
            Deregister from <c>IInput</c>.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.InputSynchronizable.SyncedKey">
            <summary>
            Alternative way of implementing <c>InputSynchronizable</c>.
            </summary>
            <example>
            Setup to sync the A key and listen to related event.
            You can also just as easy get the value directly from the <c>SyncedKey.Value</c>.
            <code>
            using UnityEngine;
            using UnityEngine.Events;
            using Alteruna;
            
            public class MyInputClass : MonoBehaviour
            {
            	// Reference to a InputSynchronizable.
            	public InputSynchronizable Input;
            	// Key field.
            	private SyncedKey _myKey;
            
            	void Awake()
            	{
            		// Setup key.
            		_myKey = new SyncedKey(Input, KeyCode.A);
            
            		// Listen to key event.
            		_myKey.OnInputChanged.AddListener(KeyChange);
            	}
            
            	void KeyChange(SyncedKey key) {
            		// This is the same value as _myKey.Value.
            		Debug.Log(key.Value);
            	}
            }
            </code>
            <br/>
            
            SyncedKeys can also be set up by the inspector. but to work, they still need to be registered.
            <code>
            using UnityEngine;
            using Alteruna;
            
            public class MyJumpClass : MonoBehaviour
            {
            	// Reference to a InputSynchronizable.
            	public InputSynchronizable Input;
            	// Jump input that we can setup in the inspector.
            	public SyncedKey Jump;
            	// Jump force.
            	public float jumpForce = 10f;
            
            	void Awake()
            	{
            		Jump.Register(Input);
            	}
            
            	private void Update()
            	{
            		if (Jump)
            		{
            			transform.Translate(0, Time.deltaTime * jumpForce, 0);
            		}
            	}
            }
            </code>
            <img src="../images/Alteruna.SyncedKey.MyJumpClass.png" alt="Inspector setup of SyncedAxis"/>
            </example>
            <seealso cref="T:Alteruna.Multiplayer.InputSynchronizable.InputSynchronizable"/>
            <seealso cref="T:Alteruna.Multiplayer.InputSynchronizable.SyncedAxis"/>
        </member>
        <member name="P:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.Key">
            <summary>
            Registered Keycode input.
            On set, reregister if already registered.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.mode">
            <summary>
            key mode.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.KeyState">
            <summary>
            The raw value of target key unaffected by mode.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.DoubleTapTime">
            <summary>
            Max time between taps for a valid double tap for the key mode doubleTap
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.OnInputChanged">
            <summary>
            Invokes when value get changed.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.InputManager">
            <summary>
            Connected <c>IInput</c>.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.Value">
            <summary>
            Value of target input key.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.#ctor(Alteruna.Multiplayer.InputSynchronizable.IInput,UnityEngine.KeyCode,Alteruna.Multiplayer.InputSynchronizable.SyncedKey.KeyMode)">
            <summary>
            Register key and mode.
            </summary>
            <param name="inputManager">Target IInput.</param>
            <param name="key">Target key.</param>
            <param name="keyMode">Target key mode.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.#ctor(UnityEngine.KeyCode,Alteruna.Multiplayer.InputSynchronizable.SyncedKey.KeyMode)">
            <summary>
            Set key and mode without registering. 
            </summary>
            <param name="key">Target key.</param>
            <param name="keyMode">Target key mode.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.#ctor">
            <summary>
            Constructor for default values.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.Register">
            <summary>
            Register key to a previously set <c>IInput</c>.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.Register(Alteruna.Multiplayer.InputSynchronizable.IInput,UnityEngine.KeyCode)">
            <summary>
            Register key to target <c>IInput</c>.
            </summary>
            <param name="inputManager">Target IInput.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.Register(Alteruna.Multiplayer.InputSynchronizable.IInput)">
            <summary>
            Register key to target <c>IInput</c>.
            </summary>
            <param name="inputManager">Target IInput.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.Deregister">
            <summary>
            Deregister from <c>IInput</c>.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.op_Implicit(Alteruna.Multiplayer.InputSynchronizable.SyncedKey)~System.Boolean">
            <summary>
            Get value of key.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.op_Implicit(Alteruna.Multiplayer.InputSynchronizable.SyncedKey)~System.Int32">
            <summary>
            Get value of key.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.op_Implicit(Alteruna.Multiplayer.InputSynchronizable.SyncedKey)~System.Single">
            <summary>
            Get value of key.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.KeyMode">
            <summary>
            Key behavior mode
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.KeyMode.DoubleTap">
            <summary>
            True during the frame the user pressing down the key for the second time withing time defined in <c>DoubleTapTime</c>.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.KeyMode.KeyDown">
            <summary>
            True during the frame the user starts pressing down the key.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.KeyMode.KeyPress">
            <summary>
            True while the user holds down the key.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.KeyMode.KeyUp">
            <summary>
            True during the frame the user releases the key.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.KeyMode.ToggleDoubleTap">
            <summary>
            True during the frame the user pressing down the key for the second time withing time defined in <c>DoubleTapTime</c>.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.KeyMode.ToggleKeyDown">
            <summary>
            Toggles the value when user starts pressing down the key.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.InputSynchronizable.SyncedKey.KeyMode.ToggleKeyUp">
            <summary>
            Toggles the value when user releases the key.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.InterpolationTransformSynchronizable">
            <summary>
            Interpolate transform position and rotation using selected interpolation method.
            </summary>
            <remarks>
            <img src="../images/Alteruna.InterpolationTransformSynchronizable.png" />
            </remarks>
        </member>
        <member name="F:Alteruna.Multiplayer.InterpolationTransformSynchronizable.LocalBehaviour">
            <summary>
            Behavior of transform when set locally.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.InterpolationTransformSynchronizable.InterpolationMethod">
            <summary>
            Behavior of transform
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.InterpolationTransformSynchronizable.ClientPrediction">
            <summary>
            Enabling this can reduces the perceived latency.
            It is intended to be used when <c>MovePosition</c> is frequently called.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.InterpolationTransformSynchronizable.SetInterpolationMethod(Alteruna.Multiplayer.InterpolationTransformSynchronizable.InterpolationMethodType)">
            <summary>
            <para>Set interpolation method of interpolation transform synchronizable to interpolation method</para>
            </summary>
            <param name="method">The interpolation method for the interpolation transform synchronizable</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alteruna.Multiplayer.InterpolationTransformSynchronizable.SetLocalBehaviour(Alteruna.Multiplayer.InterpolationTransformSynchronizable.LocalBehaviourType)" -->
        <member name="T:Alteruna.Multiplayer.InterpolationTransformSynchronizable.InterpolationMethodType">
            <summary>
            Methods for interpolate, extrapolate, and other.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.InterpolationTransformSynchronizable.LocalBehaviourType">
            <summary>
            Behavior of how to polate transform locally.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.InterpolationTransformSynchronizable.position">
            <summary>
              <para>The world space position of the Transform.</para>
              <para>On set, moves position.</para>
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.InterpolationTransformSynchronizable.MovePosition(UnityEngine.Vector3)">
            <summary>
              <para>Moves the transform towards position.</para>
            </summary>
            <param name="pos">Provides the new position for the transform object.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.InterpolationTransformSynchronizable.SetPosition(UnityEngine.Vector3)">
            <summary>
              <para>Sets the transform to a position.</para>
            </summary>
            <param name="pos">Provides the new position for the transform object.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.InterpolationTransformSynchronizable.MoveRotation(UnityEngine.Vector3)">
            <summary>
              <para>Rotates the transform to rotation.</para>
            </summary>
            <param name="rot">The new rotation for the transform.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.InterpolationTransformSynchronizable.MoveRotation(UnityEngine.Quaternion)">
            <summary>
              <para>Rotates the transform to rotation.</para>
            </summary>
            <param name="rot">The new rotation for the transform.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.InterpolationTransformSynchronizable.SetRotation(UnityEngine.Vector3)">
            <summary>
              <para>Set the rotation the transform to rotation.</para>
            </summary>
            <param name="rot">The new rotation for the transform.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.InterpolationTransformSynchronizable.SetRotation(UnityEngine.Quaternion)">
            <summary>
              <para>Set the rotation the transform to rotation.</para>
            </summary>
            <param name="rot">The new rotation for the transform.</param>
        </member>
        <member name="T:Alteruna.Multiplayer.NewInputSync">
            <summary>
            Synchronizes input actions across multiple users in a room using the new input system.
            </summary>
            <example>
            This example demonstrates how to use the <see cref="T:Alteruna.Multiplayer.NewInputSync"/> component to synchronize an input action for horizontal movement.
            <code>
            using UnityEngine;
            using Alteruna.Multiplayer;
            
            [RequireComponent(typeof(NewInputSync))]
            public class NewInputSyncTest : MonoBehaviour
            {
            	public float MoveSpeed = 5f;
            
            	private NewInputSync _inputSync;
            
            	// Type specific action
            	private NewInputSync.InputActionSync.Action&lt;float&gt; _horizontal;
            
            	// Unspecified type action
            	private NewInputSync.InputActionSync _vertical;
            
            	private void Start()
            	{
            		var inputSync = GetComponent&lt;NewInputSync&gt;();
            		// Get casted action
            		_horizontal = inputSync.FindAction&lt;float&gt;("Horizontal");
            		// Get unspecified type action
            		_vertical = inputSync.FindAction("Vertical");
            	}
            
            	private void Update()
            	{
            		transform.Translate(
            			// Get value directly from the action
            			_horizontal.GetValue() * MoveSpeed * Time.deltaTime,
            			// Attempt to get value from the unspecified type action as float
            			_vertical.GetValue&lt;float&gt;() * MoveSpeed * Time.deltaTime,
            			0
            		);
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:Alteruna.Multiplayer.NewInputSync.FindActionId(System.String,System.Boolean)">
            <summary>
            Finds the unique identifier of an input action by its name or identifier string.
            </summary>
            <param name="actionNameOrId">The name or string identifier of the input action to find.</param>
            <param name="throwIfNotFound">Specifies whether to throw an exception if the action is not found. Defaults to false.</param>
            <returns>The unique identifier (GUID) of the input action if found; otherwise, behavior depends on the value of <paramref name="throwIfNotFound"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="actionNameOrId"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="throwIfNotFound"/> is true and the
            action could not be found. -Or- If <paramref name="actionNameOrId"/> contains a slash but is missing
            either the action or the map name.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.NewInputSync.FindAction(System.Guid)">
            <summary>
            Retrieves an input action synchronization object corresponding to the specified unique identifier.
            </summary>
            <param name="id">The unique identifier (GUID) of the input action to retrieve.</param>
            <returns>The <see cref="T:Alteruna.Multiplayer.NewInputSync.InputActionSync"/> object associated with the specified identifier.</returns>
            <exception cref="T:System.ArgumentException">Thrown when no input action matches the specified identifier.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.NewInputSync.FindAction(System.String)">
            <summary>
            Finds an input action synchronization object by its name or identifier string.
            </summary>
            <param name="actionNameOrId">The name or string identifier of the input action to find.</param>
            <returns>The <see cref="T:Alteruna.Multiplayer.NewInputSync.InputActionSync"/> object associated with the specified name or identifier.</returns>
            <exception cref="T:System.ArgumentException">Thrown when no input action matches the specified name or identifier.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.NewInputSync.FindAction``1(System.String)">
            <summary>
            Finds the synchronized input action associated with the specified name or identifier string and casts it to the specified type.
            </summary>
            <param name="actionNameOrId">The name or identifier of the input action to find.</param>
            <typeparam name="T"></typeparam>
            <returns>An <see cref="T:Alteruna.Multiplayer.NewInputSync.InputActionSync"/> instance representing the synchronized input action of given type.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the specified input action cannot be found or if the name or identifier is invalid.</exception>
        </member>
        <member name="T:Alteruna.Multiplayer.Rigidbody2DSynchronizable">
            <summary>
            <c>Rigidbody2DSynchronizable</c> is a <c>Synchronizable</c> that synchronizes the state of a <c>Rigidbody2D</c> component.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Rigidbody2DSynchronizable.Rigidbody">
            <summary>
            Rigidbody to synchronize.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Rigidbody2DSynchronizable.isKinematic">
            <summary>
              <para>Controls whether physics affects the rigidbody.</para>
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Rigidbody2DSynchronizable.velocity">
            <summary>
              <para>Linear velocity of the Rigidbody in units per second.</para>
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Rigidbody2DSynchronizable.angularVelocity">
            <summary>
              <para>Angular velocity in degrees per second.</para>
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Rigidbody2DSynchronizable.position">
            <summary>
              <para>The position of the rigidbody.</para>
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.Rigidbody2DSynchronizable.rotation">
            <summary>
              <para>The rotation of the rigidbody.</para>
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Rigidbody2DSynchronizable.SetRotation(System.Single)">
            <summary>
              <para>Sets the rotation of the Rigidbody2D to angle (given in degrees).</para>
            </summary>
            <param name="angle">The rotation of the Rigidbody (in degrees).</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Rigidbody2DSynchronizable.MovePosition(UnityEngine.Vector2)">
            <summary>
              <para>Moves the rigidbody to position.</para>
            </summary>
            <param name="position">The new position for the Rigidbody object.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Rigidbody2DSynchronizable.MoveRotation(System.Single)">
            <summary>
              <para>Rotates the Rigidbody to angle (given in degrees).</para>
            </summary>
            <param name="angle">The new rotation angle for the Rigidbody object.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Rigidbody2DSynchronizable.AddForce(System.Single,System.Single,UnityEngine.ForceMode)">
            <summary>
            Adds a force to the Rigidbody.
            </summary>
            <param name="x">Size of force along the world x-axis.</param>
            <param name="y">Size of force along the world y-axis.</param>
            <param name="mode">	Type of force to apply.</param>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody2D.AddForce.html"/>
        </member>
        <member name="M:Alteruna.Multiplayer.Rigidbody2DSynchronizable.AddForce(UnityEngine.Vector2,UnityEngine.ForceMode)">
            <summary>
            Adds a force to the Rigidbody.
            </summary>
            <param name="force">Force vector in world coordinates.</param>
            <param name="mode">	Type of force to apply.</param>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody2D.AddForce.html"/>
        </member>
        <member name="M:Alteruna.Multiplayer.Rigidbody2DSynchronizable.AddForce(System.Single,System.Single,UnityEngine.ForceMode2D)">
            <summary>
            Adds a force to the Rigidbody.
            </summary>
            <param name="x">Size of force along the world x-axis.</param>
            <param name="y">Size of force along the world y-axis.</param>
            <param name="mode">	Type of force to apply.</param>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody2D.AddForce.html"/>
        </member>
        <member name="M:Alteruna.Multiplayer.Rigidbody2DSynchronizable.AddForce(UnityEngine.Vector2,UnityEngine.ForceMode2D)">
            <summary>
            Adds a force to the Rigidbody.
            </summary>
            <param name="force">Force vector in world coordinates.</param>
            <param name="mode">	Type of force to apply.</param>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody2D.AddForce.html"/>
        </member>
        <member name="M:Alteruna.Multiplayer.Rigidbody2DSynchronizable.AddTorque(System.Single,UnityEngine.ForceMode)">
            <summary>
            Adds a torque to the rigidbody.
            </summary>
            <param name="torque">Torque vector in world coordinates.</param>
            <param name="mode">	The type of torque to apply.</param>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody2D.AddTorque.html"/>
        </member>
        <member name="M:Alteruna.Multiplayer.Rigidbody2DSynchronizable.IsSleeping">
            <summary>
            Is the rigidbody sleeping?
            </summary>
            <returns>true when rigidbody is sleeping.</returns>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody.IsSleeping.html"/>
        </member>
        <member name="M:Alteruna.Multiplayer.Rigidbody2DSynchronizable.Sleep">
            <summary>
            Forces a rigidbody to sleep at least one frame.
            </summary>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody.Sleep.html"/>
        </member>
        <member name="M:Alteruna.Multiplayer.Rigidbody2DSynchronizable.WakeUp">
            <summary>
            Forces a rigidbody to wake up.
            </summary>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody.WakeUp.html"/>
        </member>
        <member name="T:Alteruna.Multiplayer.RigidbodySynchronizable">
            <summary>
            Control and synchronizes an object's position through physics simulation.
            </summary>
            <remarks>
            <img src="../images/Alteruna.RigidbodySynchronizable.png" />
            </remarks>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody.html"/>
        </member>
        <member name="F:Alteruna.Multiplayer.RigidbodySynchronizable.Rigidbody">
            <summary>
            Rigidbody to synchronize.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.RigidbodySynchronizable.isKinematic">
            <inheritdoc />
        </member>
        <member name="P:Alteruna.Multiplayer.RigidbodySynchronizable.velocity">
            <summary>
              <para>The velocity vector of the rigidbody. It represents the rate of change of Rigidbody position.</para>
            </summary>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody-velocity.html"/>
        </member>
        <member name="P:Alteruna.Multiplayer.RigidbodySynchronizable.angularVelocity">
            <summary>
              <para>The angular velocity vector of the rigidbody measured in radians per second.</para>
            </summary>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody-angularVelocity.html"/>
        </member>
        <member name="P:Alteruna.Multiplayer.RigidbodySynchronizable.position">
             <summary>
            		<para>The position of the rigidbody.</para>
             </summary>
             <example>
            	Rigidbody.position allows you to get and set the position of a Rigidbody using the physics engine. If you change the position of a Rigibody using Rigidbody.position, the transform will be updated after the next physics simulation step. This is faster than updating the position using Transform.position, as the latter will cause all attached Colliders to recalculate their positions relative to the Rigidbody.
            
             If you want to continuously move a rigidbody use MovePosition instead, which takes interpolation into account.
             </example>
             <seealso cref="M:Alteruna.Multiplayer.RigidbodySynchronizable.MovePosition(UnityEngine.Vector3)"/>
        </member>
        <member name="P:Alteruna.Multiplayer.RigidbodySynchronizable.rotation">
             <summary>
               <para>The rotation of the Rigidbody.</para>
             </summary>
             <example>
            	Use Rigidbody.rotation to get and set the rotation of a Rigidbody using the physics engine.
            
             Changing the rotation of a Rigidbody using Rigidbody.rotation updates the Transform after the next physics simulation step. This is faster than updating the rotation using Transform.rotation, as Transform.rotation causes all attached Colliders to recalculate their rotation relative to the Rigidbody, whereas Rigidbody.rotation sets the values directly to the physics system.
            
             If you want to continuously rotate a rigidbody use MoveRotation instead, which takes interpolation into account.
             </example>
             <seealso cref="M:Alteruna.Multiplayer.RigidbodySynchronizable.MoveRotation(UnityEngine.Quaternion)"/>
        </member>
        <member name="M:Alteruna.Multiplayer.RigidbodySynchronizable.MovePosition(UnityEngine.Vector3)">
            <summary>
              <para>Moves the kinematic Rigidbody towards position.</para>
            </summary>
            <param name="position">Provides the new position for the Rigidbody object.</param>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody.MovePosition.html"/>
        </member>
        <member name="M:Alteruna.Multiplayer.RigidbodySynchronizable.SetPosition(UnityEngine.Vector3)">
            <summary>
               <para>Moves the kinematic Rigidbody to a new position.</para>
            </summary>
            <param name="position">Provides the new position for the Rigidbody object.</param>
            <seealso cref="P:Alteruna.Multiplayer.RigidbodySynchronizable.position"/>
        </member>
        <member name="M:Alteruna.Multiplayer.RigidbodySynchronizable.MoveRotation(UnityEngine.Quaternion)">
            <summary>
              <para>Rotates the rigidbody to rotation.</para>
            </summary>
            <param name="rot">The new rotation for the Rigidbody.</param>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody.MoveRotation.html"/>
        </member>
        <member name="M:Alteruna.Multiplayer.RigidbodySynchronizable.SetRotation(UnityEngine.Quaternion)">
            <summary>
              <para>Set the rotation of the rigidbody to new rotation.</para>
            </summary>
            <param name="rot">The new rotation for the Rigidbody.</param>
            <seealso cref="P:Alteruna.Multiplayer.RigidbodySynchronizable.rotation"/>
        </member>
        <member name="M:Alteruna.Multiplayer.RigidbodySynchronizable.AddForce(System.Single,System.Single,System.Single,UnityEngine.ForceMode)">
            <summary>
            Adds a force to the Rigidbody.
            </summary>
            <example>
            This example applies an Impulse force along the Z axis to the GameObject's Rigidbody.
            <code>
            using UnityEngine;
            public class Example : MonoBehaviour
            {
            	public float thrust = 1.0f;
            	public RigidbodySynchronizable rb;
            
            	void Start()
            	{
            		rb.AddForce(0, 0, thrust, ForceMode.Impulse);
            	}
            }
            </code>
            </example>
            <param name="x">Size of force along the world x-axis.</param>
            <param name="y">Size of force along the world y-axis.</param>
            <param name="z">Size of force along the world z-axis.</param>
            <param name="mode">	Type of force to apply.</param>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody.AddForce.html"/>
        </member>
        <member name="M:Alteruna.Multiplayer.RigidbodySynchronizable.AddForce(UnityEngine.Vector3,UnityEngine.ForceMode)">
            <summary>
            Adds a force to the Rigidbody.
            </summary>
            <example>
            Force is applied continuously along the direction of the force vector. Specifying the ForceMode mode allows the type of force to be changed to an Acceleration, Impulse or Velocity Change.
            <code>
            using UnityEngine;
            public class Example : MonoBehaviour
            {
            	public RigidbodySynchronizable RigidbodySync;
            	public float m_Thrust = 20f;
            
            	void FixedUpdate()
            	{
            		if (Input.GetButton("Jump"))
            		{
            			//Apply a force to this Rigidbody in direction of this GameObjects up axis
            			RigidbodySync.AddForce(transform.up * m_Thrust);
            		}
            	}
            }
            </code>
            </example>
            <param name="force">Force vector in world coordinates.</param>
            <param name="mode">	Type of force to apply.</param>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody.AddForce.html"/>
        </member>
        <member name="M:Alteruna.Multiplayer.RigidbodySynchronizable.AddTorque(System.Single,System.Single,System.Single,UnityEngine.ForceMode)">
            <summary>
            Adds a torque to the rigidbody.
            </summary>
            <example>
            Force can be applied only to an active rigidbody. If a GameObject is inactive, AddTorque has no effect.
            Wakes up the Rigidbody by default. If the torque size is zero then the Rigidbody will not be woken up.
            </example>
            <param name="x">Size of torque along the world x-axis.</param>
            <param name="y">Size of torque along the world y-axis.</param>
            <param name="z">Size of torque along the world z-axis.</param>
            <param name="mode">The type of torque to apply.</param>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody.AddTorque.html"/>
        </member>
        <member name="M:Alteruna.Multiplayer.RigidbodySynchronizable.AddTorque(UnityEngine.Vector3,UnityEngine.ForceMode)">
            <summary>
            Adds a torque to the rigidbody.
            </summary>
            <example>
            Force can be applied only to an active rigidbody. If a GameObject is inactive, AddTorque has no effect.
            <code>
            // Rotate an object around its Y (upward) axis in response to
            // left/right controls.
            using UnityEngine;
            using System.Collections;
            
            public class ExampleClass : MonoBehaviour
            {
            	public float torque;
            	public RigidbodySynchronizable rb;
            
            	void FixedUpdate()
            	{
            		float turn = Input.GetAxis("Horizontal");
            		rb.AddTorque(transform.up * torque * turn);
            	}
            }
            </code>
            </example>
            <param name="torque">Torque vector in world coordinates.</param>
            <param name="mode">	The type of torque to apply.</param>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody.AddTorque.html"/>
        </member>
        <member name="M:Alteruna.Multiplayer.RigidbodySynchronizable.IsSleeping">
            <summary>
            Is the rigidbody sleeping?
            </summary>
            <returns>true when rigidbody is sleeping.</returns>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody.IsSleeping.html"/>
        </member>
        <member name="M:Alteruna.Multiplayer.RigidbodySynchronizable.Sleep">
            <summary>
            Forces a rigidbody to sleep at least one frame.
            </summary>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody.Sleep.html"/>
        </member>
        <member name="M:Alteruna.Multiplayer.RigidbodySynchronizable.WakeUp">
            <summary>
            Forces a rigidbody to wake up.
            </summary>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody.WakeUp.html"/>
        </member>
        <member name="T:Alteruna.Multiplayer.RigidbodySynchronizableCommon">
            <summary>
            Common Rigidbody synchronizable methods and.
            </summary>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody.html"/>
        </member>
        <member name="F:Alteruna.Multiplayer.RigidbodySynchronizableCommon.IgnoredLayers">
            <summary>
            Ignored layers will not cause the object trigger sync on collision.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.RigidbodySynchronizableCommon.SOFT_SYNC_DELAY">
            <summary>
            Delay from the last controlled forced sync to the next soft sync.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.RigidbodySynchronizableCommon.SyncEveryNUpdates">
            <summary>
            How often to automatically sync data in skips of FixedUpdate.
            </summary>
            <remarks>
            Only for automatic updates. Changes to velocity, position, etc. will trigger more frequent updates.
            </remarks>
        </member>
        <member name="F:Alteruna.Multiplayer.RigidbodySynchronizableCommon.FullSyncEveryNSync">
            <summary>
            Sync velocity and position every Nth sync.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.RigidbodySynchronizableCommon.SendData">
            <summary>
            When true, this client will sync the object will to all other clients.
            </summary>
            <remarks>
            Only one client can control the object at a time.
            Enabling this will disable it on all other clients.
            </remarks>
        </member>
        <member name="F:Alteruna.Multiplayer.RigidbodySynchronizableCommon.ApplyAsTransform">
            <summary>
            When true, the object will be moved and rotated using its transform directly instead of using the physics engine.
            This is not recommended, but may resolve some issues where it doesn't sync correctly.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.RigidbodySynchronizableCommon.isKinematic">
            <summary>
            Controls whether physics affects the rigidbody.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.RigidbodySynchronizableCommon.AllowCollisionToAssumeOwner">
            <summary>
            When false, collisions will not cause the object to switch which client is simulated on.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.RigidbodySynchronizableCommon.SyncSettings">
            <summary>
            Syncs settings to all clients.
            Required for changing settings during runtime.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.RigidbodySynchronizableCommon.ForceUpdate(System.Boolean)">
            <summary>
            Forces a sync even if not owned.
            </summary>
            <param name="fullSync">Sync absolute data in addition to velocity.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.RigidbodySynchronizableCommon.IsSleeping">
            <summary>
            Is the rigidbody sleeping?
            </summary>
            <returns>true when rigidbody is sleeping.</returns>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody.IsSleeping.html"/>
        </member>
        <member name="M:Alteruna.Multiplayer.RigidbodySynchronizableCommon.Sleep">
            <summary>
            Forces a rigidbody to sleep at least one frame.
            </summary>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody.Sleep.html"/>
        </member>
        <member name="M:Alteruna.Multiplayer.RigidbodySynchronizableCommon.WakeUp">
            <summary>
            Forces a rigidbody to wake up.
            </summary>
            <seealso cref="!:https://docs.unity3d.com/ScriptReference/Rigidbody.WakeUp.html"/>
        </member>
        <member name="T:Alteruna.Multiplayer.IScoreObject">
            <summary>
            Defines the interface for a score object, providing methods for managing and serializing score data.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.IScoreObject.Key">
            <summary>
            Gets the key associated with the score object.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.IScoreObject.Get(System.UInt16)">
            <summary>
            Retrieves an object corresponding to the given ID.
            </summary>
            <param name="id">The ID for which the object is to be retrieved.</param>
            <returns>The object associated with the specified ID.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.IScoreObject.Set(System.UInt16,System.Object)">
            <summary>
            Sets the value for the given ID.
            </summary>
            <param name="id">The ID for which the value is to be set.</param>
            <param name="obj">The object to set.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.IScoreObject.AddUser(System.UInt16)">
            <summary>
            Adds a new user with the specified userID to the score object.
            </summary>
            <param name="userID">The userID of the user to add.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.IScoreObject.AppendScore``1(System.UInt16,``0)">
            <summary>
            Appends a score value for a specified user.
            </summary>
            <param name="userID">The userID for which the score is to be appended.</param>
            <param name="value">The score value to append.</param>
            <typeparam name="T">The type of the score value, must be a struct and implement IConvertible.</typeparam>
        </member>
        <member name="M:Alteruna.Multiplayer.IScoreObject.SerializeValues(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer)">
            <summary>
            Serializes all values using the provided writer.
            </summary>
            <param name="writer">The writer to use for serialization.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.IScoreObject.SerializeValue(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,System.UInt16)">
            <summary>
            Serializes a single value identified by the userID.
            </summary>
            <param name="writer">The writer to use for serialization.</param>
            <param name="userID">The user ID identifying the value to serialize.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.IScoreObject.DeserializeValues(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <summary>
            Deserializes all values using the provided reader.
            </summary>
            <param name="reader">The reader to use for deserialization.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.IScoreObject.DeserializeValue(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader,System.UInt16)">
            <summary>
            Deserializes a single value identified by the userID.
            </summary>
            <param name="reader">The reader to use for deserialization.</param>
            <param name="userID">The user ID identifying the value to deserialize.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.IScoreObject.Serialize(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer)">
            <summary>
            Serializes the score object using the provided writer.
            </summary>
            <param name="writer">The writer to use for serialization.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.IScoreObject.ToString(System.UInt16)">
            <summary>
            Returns a string representation of the score object for the specified userID.
            </summary>
            <param name="userID">The user ID for which to generate the string representation.</param>
        </member>
        <member name="P:Alteruna.Multiplayer.IScoreObject.OnChanged">
            <summary>
            Action invoked when a value in the score object is changed.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.IScoreObject.Size">
            <summary>
            Get or set the size of the value array.
            Size need to be as large as the highest index user in room.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.ScoreObject`1">
            <summary>
            Represents a score object holding a list of values of type T.
            This class manages the storage, retrieval, and manipulation of score data.
            </summary>
            <typeparam name="T">The type of the score data.</typeparam>
        </member>
        <member name="P:Alteruna.Multiplayer.ScoreObject`1.Key">
            <inheritdoc />
        </member>
        <member name="P:Alteruna.Multiplayer.ScoreObject`1.OnChanged">
            <inheritdoc />
        </member>
        <member name="P:Alteruna.Multiplayer.ScoreObject`1.Value">
            <summary>
            Gets or sets the list of values. Setting this property invokes OnChanged.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObject`1.Set(System.UInt16,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObject`1.Alteruna#Multiplayer#IScoreObject#AddUser(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObject`1.AppendScore``1(System.UInt16,``0)">
            <inheritdoc />
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObject`1.AppendScore(System.UInt16,`0)">
            <summary>
            Appends a score value for a specified user.
            </summary>
            <param name="userID">The userID for which the score is to be appended.</param>
            <param name="value">The score value to append.</param>
            <typeparam name="T">The type of the score value, must be a struct and implement IConvertible.</typeparam>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObject`1.Alteruna#Multiplayer#IScoreObject#ToString(System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObject`1.SerializeValues(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer)">
            <inheritdoc />
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObject`1.Alteruna#Multiplayer#IScoreObject#SerializeValue(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObject`1.DeserializeValues(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <inheritdoc />
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObject`1.Alteruna#Multiplayer#IScoreObject#DeserializeValue(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader,System.UInt16)">
            <inheritdoc />
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObject`1.Alteruna#Multiplayer#IScoreObject#Serialize(Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer)">
            <inheritdoc />
        </member>
        <member name="P:Alteruna.Multiplayer.ScoreObject`1.Alteruna#Multiplayer#IScoreObject#Size">
            <inheritdoc />
        </member>
        <member name="T:Alteruna.Multiplayer.ScoreObjectMethods">
            <summary>
            Provides static extension methods for managing and manipulating score objects within a array of IScoreObjects.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.GetScore``1(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},System.String)">
            <summary>
            Retrieves a ScoreObject of a specific type from a array of IScoreObjects.
            </summary>
            <typeparam name="T">The type of the ScoreObject to retrieve.</typeparam>
            <param name="scoreList">The array of IScoreObjects to search through.</param>
            <param name="key">The key of the ScoreObject to find.</param>
            <returns>A ScoreObject of the specified type.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alteruna.Multiplayer.ScoreObjectMethods.GetScore(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},System.String)" -->
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.GetScore``1(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},System.Int32)">
            <summary>
            Retrieves a ScoreObject by its ID from a array of IScoreObjects.
            </summary>
            <typeparam name="T">The type of the ScoreObject to retrieve.</typeparam>
            <param name="scoreList">The array of IScoreObjects to search through.</param>
            <param name="id">The ID of the ScoreObject to find.</param>
            <returns>A ScoreObject of the specified type.</returns>
            <exception cref="!:InvalidTypeException">Thrown if no score of the specified type with the given ID is found.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.GetScoreID(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},System.String)">
            <summary>
            Retrieves the ID of a ScoreObject identified by a key from an array of IScoreObjects.
            </summary>
            <param name="scoreList">The array of IScoreObjects to search through.</param>
            <param name="key">The key of the ScoreObject to find the ID for.</param>
            <returns>The ID of the ScoreObject, if found.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if no score with the given key is found.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.GetScoreID``1(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},System.String)">
            <summary>
            Retrieves the ID of a ScoreObject of a specific type, identified by a key, from an array of IScoreObjects.
            </summary>
            <typeparam name="T">The type of the ScoreObject to retrieve the ID for.</typeparam>
            <param name="scoreList">The array of IScoreObjects to search through.</param>
            <param name="key">The key of the ScoreObject to find the ID for.</param>
            <returns>The ID of the ScoreObject, if found.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if no score of the specified type with the given key is found.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.GetScoreID(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},Alteruna.Multiplayer.IScoreObject)">
            <summary>
            Retrieves the ID of a given IScoreObject from an array of IScoreObjects.
            </summary>
            <param name="scoreList">The array of IScoreObjects to search through.</param>
            <param name="score">The IScoreObject to find the ID for.</param>
            <returns>The ID of the specified IScoreObject, if found.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown if the IScoreObject is not found in the array.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.AddUser(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},System.UInt16)">
            <summary>
            Adds a user with the specified userID to all IScoreObjects in the array.
            </summary>
            <param name="scoreList">The array of IScoreObjects to add the user to.</param>
            <param name="userID">The userID of the user to add.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Alteruna.Multiplayer.ScoreObjectMethods.AppendScore``1(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},System.String,System.UInt16,``0)" -->
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.AppendScore``1(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},System.Int32,System.UInt16,``0)">
            <summary>
            Appends a score value for a specified user, identified by an ID, in a ScoreObject from an array of IScoreObjects.
            </summary>
            <typeparam name="T">The type of the score value to append.</typeparam>
            <param name="scoreList">The array of IScoreObjects.</param>
            <param name="scoreId">The ID of the ScoreObject to append the score to.</param>
            <param name="userID">The userID for which the score is to be appended.</param>
            <param name="value">The score value to append.</param>
            <exception cref="!:InvalidTypeException">Thrown if no score of the specified type with the given ID is found.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.GetScore``1(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},System.String,System.UInt16)">
            <summary>
            Retrieves the score of type T for the given key and userID.
            </summary>
            <typeparam name="T">The type of the score to retrieve.</typeparam>
            <param name="scoreList">The array of IScoreObjects to search.</param>
            <param name="key">The key of the score object.</param>
            <param name="userID">The userID for which the score is to be retrieved.</param>
            <returns>The score of type T.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.GetScore``1(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},System.Int32,System.UInt16)">
            <summary>
            Retrieves the score of type T for the given score ID and userID.
            </summary>
            <typeparam name="T">The type of the score to retrieve.</typeparam>
            <param name="scoreList">The array of IScoreObjects to search.</param>
            <param name="scoreId">The ID of the score object.</param>
            <param name="userID">The userID for which the score is to be retrieved.</param>
            <returns>The score of type T.</returns>
            <exception cref="!:InvalidTypeException">Thrown if no score of the specified type with the given ID is found.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.SetScore``1(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},System.String,``0[])">
            <summary>
            Sets the score for the specified key with the given array of values.
            </summary>
            <typeparam name="T">The type of the score to set.</typeparam>
            <param name="scoreList">The array of IScoreObjects.</param>
            <param name="key">The key of the score object.</param>
            <param name="array">The array of values to set.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.SetScore``1(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},System.Int32,``0[])">
            <summary>
            Sets the score for the specified score ID with the given array of values.
            </summary>
            <typeparam name="T">The type of the score to set.</typeparam>
            <param name="scoreList">The array of IScoreObjects.</param>
            <param name="scoreId">The ID of the score object.</param>
            <param name="array">The array of values to set.</param>
            <exception cref="!:InvalidTypeException">Thrown if no score of the specified type with the given ID is found.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.SetScore``1(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},System.String,``0,System.UInt16)">
            <summary>
            Sets the individual score for the specified key and userID.
            </summary>
            <typeparam name="T">The type of the score to set.</typeparam>
            <param name="scoreList">The array of IScoreObjects.</param>
            <param name="key">The key of the score object.</param>
            <param name="value">The value to set for the specified userID.</param>
            <param name="userID">The userID for which the score is to be set.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.SetScore``1(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},System.Int32,``0,System.UInt16)">
            <summary>
            Sets the individual score for the specified score ID and userID.
            </summary>
            <typeparam name="T">The type of the score to set.</typeparam>
            <param name="scoreList">The array of IScoreObjects.</param>
            <param name="scoreId">The ID of the score object.</param>
            <param name="value">The value to set for the specified userID.</param>
            <param name="userID">The userID for which the score is to be set.</param>
            <exception cref="!:InvalidTypeException">Thrown if no score of the specified type with the given ID is found.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.SerializeList(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer)">
            <summary>
            Serializes the array of IScoreObjects.
            </summary>
            <param name="scoreList">The array of IScoreObjects to serialize.</param>
            <param name="writer">The writer to use for serialization.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.Deserialize(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <summary>
            Deserializes and returns an IScoreObject from the reader.
            </summary>
            <param name="reader">The reader to use for deserialization.</param>
            <returns>The deserialized IScoreObject.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.DeserializeList(Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <summary>
            Deserializes and returns a array of IScoreObjects from the reader.
            </summary>
            <param name="reader">The reader to use for deserialization.</param>
            <returns>A array of deserialized IScoreObjects.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.SerializeValues(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer)">
            <summary>
            Serializes the values of the IScoreObjects in the array.
            </summary>
            <param name="scoreList">The array of IScoreObjects to serialize.</param>
            <param name="writer">The writer to use for serialization.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.DeserializeValues(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader)">
            <summary>
            Deserializes the values of IScoreObjects in the array from the reader.
            </summary>
            <param name="scoreList">The array of IScoreObjects.</param>
            <param name="reader">The reader to use for deserialization.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.SerializeValue(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,System.String,System.UInt16)">
            <summary>
            Serializes the value of a specific IScoreObject identified by name and userID.
            </summary>
            <param name="scoreList">The array of IScoreObjects.</param>
            <param name="writer">The writer to use for serialization.</param>
            <param name="name">The name of the IScoreObject to serialize.</param>
            <param name="userID">The userID associated with the value to serialize.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.DeserializeValue(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader,System.String,System.UInt16)">
            <summary>
            Deserializes the value of a specific IScoreObject identified by name and userID from the reader.
            </summary>
            <param name="scoreList">The array of IScoreObjects.</param>
            <param name="reader">The reader to use for deserialization.</param>
            <param name="name">The name of the IScoreObject to deserialize.</param>
            <param name="userID">The userID associated with the value to deserialize.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.SerializeValue(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,System.Int32,System.UInt16)">
            <summary>
            Serializes the value of a specific IScoreObject identified by scoreID and userID.
            </summary>
            <param name="scoreList">The array of IScoreObjects.</param>
            <param name="writer">The writer to use for serialization.</param>
            <param name="scoreId">The ID of the IScoreObject to serialize.</param>
            <param name="userID">The userID associated with the value to serialize.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the scoreID is out of range of the scoreList.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.DeserializeValue(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader,System.Int32,System.UInt16)">
            <summary>
            Deserializes the value of a specific IScoreObject identified by scoreID and userID from the reader.
            </summary>
            <param name="scoreList">The array of IScoreObjects.</param>
            <param name="reader">The reader to use for deserialization.</param>
            <param name="scoreId">The ID of the IScoreObject to deserialize.</param>
            <param name="userID">The userID associated with the value to deserialize.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if the scoreID is out of range of the scoreList.</exception>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.SerializeValues(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,System.UInt16)">
            <summary>
            Serializes the values of IScoreObjects in the array for a specific userID.
            </summary>
            <param name="scoreList">The array of IScoreObjects.</param>
            <param name="writer">The writer to use for serialization.</param>
            <param name="userID">The userID associated with the values to serialize.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.DeserializeValues(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader,System.UInt16)">
            <summary>
            Deserializes the values of IScoreObjects in the array for a specific userID from the reader.
            </summary>
            <param name="scoreList">The array of IScoreObjects.</param>
            <param name="reader">The reader to use for deserialization.</param>
            <param name="userID">The userID associated with the values to deserialize.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.SerializeValues(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},Alteruna.Multiplayer.Core.PacketProcessing.Writer.Writer,System.String)">
            <summary>
            Serializes the values of a specific IScoreObject identified by name.
            </summary>
            <param name="scoreList">The array of IScoreObjects.</param>
            <param name="writer">The writer to use for serialization.</param>
            <param name="name">The name of the IScoreObject to serialize.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreObjectMethods.DeserializeValues(System.Collections.Generic.List{Alteruna.Multiplayer.IScoreObject},Alteruna.Multiplayer.Core.PacketProcessing.Reader.Reader,System.String)">
            <summary>
            Deserializes the values of a specific IScoreObject identified by name from the reader.
            </summary>
            <param name="scoreList">The array of IScoreObjects.</param>
            <param name="reader">The reader to use for deserialization.</param>
            <param name="name">The name of the IScoreObject to deserialize.</param>
        </member>
        <member name="T:Alteruna.Multiplayer.ScoreType">
            <summary>
            Defines the types of scores that can be managed within the scoreboard system.
            This enumeration is used to specify the data type of the scores being handled,
            allowing for flexible and type-safe management of score data.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.ScoreTypeMethods">
            <summary>
            Provides extension methods for the ScoreType enumeration.
            This class is used to dynamically create IScoreObject instances based on different ScoreTypes.
            It simplifies the creation of score objects for various data types without hardcoding specific types.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreTypeMethods.TypeToScoreObject(Alteruna.Multiplayer.ScoreType,System.String,System.Int32)">
            <summary>
            Converts a ScoreType to an IScoreObject with the specified name and capacity.
            </summary>
            <param name="type">The ScoreType to convert.</param>
            <param name="name">The name for the new IScoreObject.</param>
            <param name="capacity">The initial capacity for the ScoreObject, defaulting to 1.</param>
            <returns>An IScoreObject of the specified type, defaulting to <c>System.Object</c>.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.ScoreTypeMethods.TypeToScoreType(System.Type)">
            <summary>
            Get ScoreType from a Type.
            </summary>
            <param name="type">The Type to convert.</param>
            <returns>The ScoreType corresponding to the specified Type.</returns>
        </member>
        <member name="T:Alteruna.Multiplayer.Spawner">
            <summary>
            Class <c>Spawner</c> defines a component which can instantiate and destroy objects on all clients in the Room simultaneously.
            </summary>
            <remarks>
            <img src="../images/Alteruna.Spawner.png" />
            </remarks>
        </member>
        <member name="F:Alteruna.Multiplayer.Spawner.SpawnableObjects">
            <summary>
            List of <c>GameObjects</c> which can be spawned during the game.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Spawner.SpawnedObjects">
            <summary>
            List of all currently spawned <c>GameObjects</c> in the Room.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Spawner.OnObjectSpawn">
            <summary>
            Invoked after <c>GameObject</c> has been spawned by a <c>User</c> in the Room.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Spawner.OnObjectDespawn">
            <summary>
            Invoked before <c>GameObject</c> gets despawned by a <c>User</c> in the Room.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.Spawner.ForceSync">
            <summary>
            When true, spawn previously spawned objects on joining client(s).
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.Spawner.Spawn(System.Int32)">
            <summary>
            Spawn an new game object from index for all <c>Users</c> in the Room.
            </summary>
            <param name="index">The index of the SpawnableObject to spawn.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Spawner.Spawn(System.Int32,UnityEngine.Vector3)">
            <summary>
            Spawn an new game object from index for all <c>Users</c> in the Room with position.
            </summary>
            <param name="index">The index of the SpawnableObject to spawn.</param>
            <param name="position">The position which the <c>GameObject</c> will be spawned with.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Spawner.Spawn(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Spawn an new game object from index for all <c>Users</c> in the Room using position and rotation.
            </summary>
            <param name="index">The index of the SpawnableObject to spawn.</param>
            <param name="position">The position which the <c>GameObject</c> will be spawned with.</param>
            <param name="rotation">The rotation which the <c>GameObject</c> will be spawned with.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Spawner.Spawn(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Spawn an new game object from index for all <c>Users</c> in the Room using position and rotation.
            </summary>
            <param name="index">The index of the SpawnableObject to spawn.</param>
            <param name="position">The position which the <c>GameObject</c> will be spawned with.</param>
            <param name="rotation">The rotation which the <c>GameObject</c> will be spawned with.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Spawner.Spawn(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            Spawn an new object for all <c>Users</c> in the Room using position, rotation, and scale.
            </summary>
            <param name="index">The index of the SpawnableObject to spawn.</param>
            <param name="position">The position which the <c>GameObject</c> will be spawned with.</param>
            <param name="rotation">The rotation which the <c>GameObject</c> will be spawned with.</param>
            <param name="scale">The scale which the <c>GameObject</c> will be spawned with.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Spawner.Spawn(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Spawn an new game object from index for all <c>Users</c> in the Room using position, rotation, and scale.
            </summary>
            <param name="index">The index of the SpawnableObject to spawn.</param>
            <param name="position">The position which the <c>GameObject</c> will be spawned with.</param>
            <param name="rotation">The rotation which the <c>GameObject</c> will be spawned with.</param>
            <param name="scale">The scale which the <c>GameObject</c> will be spawned with.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Spawner.Spawn(System.String)">
            <summary>
            Spawn an new object from name for all <c>Users</c> in the Room.
            </summary>
            <param name="index">The index of the SpawnableObject to spawn.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Spawner.Spawn(System.String,UnityEngine.Vector3)">
            <summary>
            Spawn an new object from name for all <c>Users</c> in the Room with position.
            </summary>
            <param name="index">The index of the SpawnableObject to spawn.</param>
            <param name="position">The position which the <c>GameObject</c> will be spawned with.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Spawner.Spawn(System.String,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Spawn an new object from name for all <c>Users</c> in the Room using position and rotation.
            </summary>
            <param name="index">The index of the SpawnableObject to spawn.</param>
            <param name="position">The position which the <c>GameObject</c> will be spawned with.</param>
            <param name="rotation">The rotation which the <c>GameObject</c> will be spawned with.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Spawner.Spawn(System.String,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Spawn an new object from name for all <c>Users</c> in the Room using position and rotation.
            </summary>
            <param name="index">The index of the SpawnableObject to spawn.</param>
            <param name="position">The position which the <c>GameObject</c> will be spawned with.</param>
            <param name="rotation">The rotation which the <c>GameObject</c> will be spawned with.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Spawner.Spawn(System.String,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
            <summary>
            Spawn an new object from name for all <c>Users</c> in the Room using position, rotation, and scale.
            </summary>
            <param name="name">name or Asset path.</param>
            <param name="position">The position which the <c>GameObject</c> will be spawned with.</param>
            <param name="rotation">The rotation which the <c>GameObject</c> will be spawned with.</param>
            <param name="scale">The scale which the <c>GameObject</c> will be spawned with.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Spawner.Spawn(System.String,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Spawn an new object from name for all <c>Users</c> in the Room using position, rotation, and scale.
            </summary>
            <param name="name">name or Asset path.</param>
            <param name="position">The position which the <c>GameObject</c> will be spawned with.</param>
            <param name="rotation">The rotation which the <c>GameObject</c> will be spawned with.</param>
            <param name="scale">The scale which the <c>GameObject</c> will be spawned with.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.Spawner.Despawn(UnityEngine.GameObject)">
            <summary>
            Invoked when a <c>GameObject</c> has been spawned by a <c>User</c> in the Room.
            </summary>
            <param name="spawnedObject">The spawned <c>GameObject</c> to despawn.</param>
        </member>
        <member name="T:Alteruna.Multiplayer.SpawnPointer">
            <summary>
            Sets Multiplayer's spawn points on enabled, scene is loaded with <c>Multiplayer.LoadScene</c>, or <c>SetAsSpawnPoint</c> is called.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.SpawnPointer.SetAsSpawnPoint">
            <summary>
            Set this <c>SpawnPointer</c> as a spawn point.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.SpawnPointer.SetAsSpawnPointUnsafe">
            <summary>
            Set this <c>SpawnPointer</c> as a spawn point without checking if <see cref="T:Alteruna.Multiplayer.MultiplayerManager"/> is set.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.SpawnPointer.SpawnAvatar">
            <summary>
            Spawns your Avatar based on <see cref="F:Alteruna.Multiplayer.SpawnPointer.SpawnPoints"/>
            </summary>
            <remarks>
            Only allowed when <see cref="F:Alteruna.Multiplayer.MultiplayerManager.AvatarSpawning"/> is set to <see cref="F:Alteruna.Multiplayer.AvatarBehavior.SpawnManually"/>.
            If no <see cref="F:Alteruna.Multiplayer.SpawnPointer.SpawnPoints"/> are set, it will spawn at this <c>SpawnPointer</c>.
            </remarks>
        </member>
        <member name="T:Alteruna.Multiplayer.SyncedEventBase`1">
            <summary>
            Base class for syncronizing events with any type of argument.
            </summary>
            <remarks>
            Cannot be used as a compoment but can be inherited to create any type of SyncedEvent.
            To sync an event with no arguments, <see cref="T:Alteruna.Multiplayer.SyncedEventVoid">Synced Event &lt;Void&gt;</see>.
            </remarks>
            <example>
            You can create a new SyncedEvent of any type by inheriting from SyncedEventBase.
            Here is an example of creating a SyncedEvent for int64 (long).
            <code>
            // Create a new SyncedEvent of given type by inheriting from SyncedEventBase.
            public class SyncedEventLong : Alteruna.SyncedEventBase&lt;long&gt; { }
            </code>
            </example>
            <typeparam name="T">Type of the argument that is passed in the event.</typeparam>
        </member>
        <member name="F:Alteruna.Multiplayer.SyncedEventBase`1.OnEvent">
            <summary>
            Event to be invoked.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.SyncedEventBase`1.Value">
            <summary>
            Last value used in the event.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.SyncedEventBase`1.LastValue">
            <summary>
            Last value used in the event.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.SyncedEventBase`1.HaveBeenInvoked">
            <summary>
            True if the event has been invoked previously.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.SyncedEventBase`1.Invoke(`0)">
            <summary>
            Invoke the event with the given argument.
            </summary>
            <param name="arg">passed object</param>
        </member>
        <member name="M:Alteruna.Multiplayer.SyncedEventBase`1.Invoke">
            <summary>
            Invoke the event with the last used argument.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.SyncedEventBase`1.InvokeSilent(`0)">
            <summary>
            Invoke without triggering local event with the given argument.
            </summary>
            <param name="arg">passed object</param>
        </member>
        <member name="M:Alteruna.Multiplayer.SyncedEventBase`1.InvokeSilent">
            <summary>
            Invoke without triggering local event with the last used argument.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.SyncedEventBase`1.ValueToString">
            <summary>
            Get the last used argument as string.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.ISyncedEventType.ValueToString">
            <summary>
            Get the last used argument as string.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.ISyncedEvent.HaveBeenInvoked">
            <summary>
            True if the event has been invoked previously.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.ISyncedEvent.Invoke">
            <summary>
            Invoke the event with the last used argument.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.ISyncedEvent.InvokeSilent">
            <summary>
            Invoke without triggering local event with the last used argument.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.SyncedEventGuid.Invoke(Alteruna.Multiplayer.IUniqueID)">
            <summary>
            Invoke the event with the given argument.
            </summary>
            <param name="arg">passed object</param>
        </member>
        <member name="M:Alteruna.Multiplayer.SyncedEventGuid.InvokeSilent(Alteruna.Multiplayer.IUniqueID)">
            <summary>
            Invoke without triggering local event with the given argument.
            </summary>
            <param name="arg">passed object</param>
        </member>
        <member name="T:Alteruna.Multiplayer.SyncedEventVoid">
            <summary>
            Sync a UnityEvent without parameters.
            </summary>
            <seealso cref="!:Alteruna.SyncedEventBase"/>
        </member>
        <member name="P:Alteruna.Multiplayer.SyncedEventVoid.HaveBeenInvoked">
            <summary>
            True if the event has been invoked previously.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.TransformSynchronizable">
            <summary>
            Class <c>TransformSynchronizable</c> defines a component which synchronizes its game objects transform with other clients in the Playroom.
            </summary>
            <remarks>
            <img src="../images/Alteruna.TransformSynchronizable.png" />
            </remarks>
        </member>
        <member name="F:Alteruna.Multiplayer.TransformSynchronizable.SyncedAxes">
            <summary>
            Set exactly what can and cannot be synced.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.TransformSynchronizable2D">
            <summary>
            Class <c>TransformSynchronizable2D</c> defines a component which synchronizes its game objects transform with other clients in the Playroom.
            </summary>
            <remarks>
            <img src="../images/Alteruna.Transform2DSynchronizable.png" />
            </remarks>
        </member>
        <member name="F:Alteruna.Multiplayer.TransformSynchronizable2D.SyncedAxes">
            <summary>
            Set exactly what can and cannot be synced.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.TransformSynchronizableCommon">
            <summary>
            Common Transform Synchronizable methods.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.TransformSynchronizableCommon.UseGlobalPosition">
            <summary>
            Sync global position and rotation, otherwise use local.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.TransformSynchronizableCommon.OnlySyncFromRoomOwner">
            <summary>
            When enabled, it will only automatically sync from the lowest id user.
            </summary>
            <para>
            Does not apply if possessed (placed in or under an Alteruna Avatar).
            </para>
        </member>
        <member name="F:Alteruna.Multiplayer.TransformSynchronizableCommon.refreshRate">
            <summary>
            Set How often to automatically sync data.
            Can be set between once every hour and 120 times per second.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.TransformSynchronizableCommon.RefreshRate">
            <summary>
            Set How often to automatically sync data.
            Can be set between once every hour and 120 times per second.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.TransformSynchronizableCommon.Teleport(UnityEngine.Vector3)">
            <summary>
            Set position of transform and sync it to all clients.
            </summary>
            <param name="pos">new position</param>
        </member>
        <member name="M:Alteruna.Multiplayer.TransformSynchronizableCommon.Teleport(UnityEngine.Vector2)">
            <summary>
            Set position of transform and sync it to all clients.
            </summary>
            <param name="pos">new position</param>
        </member>
        <member name="T:Alteruna.Multiplayer.TransformSynchronizableCommon.TransformSyncConstraint">
            <summary>
            Flags for setting what axis to sync.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.TransformSynchronizableCommon.Transform2DAxes">
            <summary>
            Flags for setting what axis to sync.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.VoiceSynchronizable">
            <summary>
            Synchronizable component for voice chat.
            </summary>
            <remarks>
            <img src="../images/Alteruna.VoiceSynchronizable.png" />
            </remarks>
        </member>
        <member name="P:Alteruna.Multiplayer.VoiceSynchronizable.Microphone">
            <summary>
            Audio input method.
            </summary>
            <remarks>
            Can be set to a custom implementation of <see cref="T:Alteruna.Multiplayer.VoiceSynchronizable.IAudioInput"/>.
            </remarks>
        </member>
        <member name="F:Alteruna.Multiplayer.VoiceSynchronizable.AUDIO_CLIP_LENGTH">
            <summary>
            Time before looping.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.VoiceSynchronizable.SAMPLES_SYNC_MINIMUM">
            <summary>
            Minimum number of samples required to send data.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.VoiceSynchronizable.PlaybackSource">
            <summary>
            Source for playback.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.VoiceSynchronizable.compression">
            <summary>
            Target compression method.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.VoiceSynchronizable.encryption">
            <summary>
            Encryption.
            Less bits will decrease bandwidth but often decrease quality.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.VoiceSynchronizable.AudioFrequency">
            <summary>
            Audio sample-rate.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.VoiceSynchronizable.SendFrequency">
            <summary>
            How often to send data from the buffer.
            Lower values will decrease latency but increase bandwidth.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.VoiceSynchronizable.SilenceCutoff">
            <summary>
            Silence threshold.
            Values bellow this is considered silence.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.VoiceSynchronizable.SilenceTimeout">
            <summary>
            Time in seconds to record after silence threshold is reached.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.VoiceSynchronizable.Volume">
            <summary>
            Playback volume.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.VoiceSynchronizable.PackageLossBuffer">
            <summary>
            Maximum number of unordered pending packages.
            When buffer count been meet, a package is considered lost and will be skipped.
            Will increase RAM usage.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.VoiceSynchronizable._audioBufferSize">
            <summary>
            Maximum numbers of samples to send at once
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.VoiceSynchronizable.PeakVolume">
            <summary>
            Highest volume recorded this frame.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.VoiceSynchronizable.IsSender">
            <summary>
            True when object is possessed by local user and is recording.
            False when object acts as receiver.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.VoiceSynchronizable.IsActive">
            <summary>
            True if the microphone is active and sending data.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.VoiceSynchronizable.Activity">
            <summary>
            Value between 0 and 1 representing the activity of the microphone.
            1 means that that the volume is above the silence threshold.
            0 means that the volume is below the silence threshold and have been for at least SilenceTimeout.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.VoiceSynchronizable.DeviceName">
            <summary>
            Name of the input device.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.VoiceSynchronizable.LocalInputController">
            <summary>
            Get the local input controller.
            The recording device is set to the default microphone.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.VoiceSynchronizable.SetDevice">
            <summary>
            Set the default microphone as the recording device.
            </summary>
            <returns>False when no device available.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.VoiceSynchronizable.SetDeviceLocal">
            <summary>
            Set the default microphone as the recording device.
            </summary>
            <returns>False when no device available.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.VoiceSynchronizable.SetDevice(System.String)">
            <summary>
            Set the microphone device by name.
            </summary>
            <param name="deviceName">Name of input device.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.VoiceSynchronizable.SetDeviceLocal(System.String)">
            <summary>
            Set the microphone device by name.
            </summary>
            <param name="deviceName">Name of input device.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.VoiceSynchronizable.SetDevice(System.Int32)">
            <summary>
            Set the microphone device by index.
            </summary>
            <param name="deviceId">Input device index.</param>
            <returns>False when no device available.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.VoiceSynchronizable.SetDeviceLocal(System.Int32)">
            <summary>
            Set the microphone device by index.
            </summary>
            <param name="deviceId">Input device index.</param>
            <returns>False when no device available.</returns>
        </member>
        <member name="M:Alteruna.Multiplayer.VoiceSynchronizable.ClearDevice">
            <summary>
            Clear the microphone device and stop recording.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.VoiceSynchronizable.ClearDeviceLocal">
            <summary>
            Clear the microphone device and stop recording.
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.VoiceSynchronizable.AvailableInputDevices">
            <summary>
            Get the list of available input devices.
            </summary>
            <returns>Array of device names.</returns>
        </member>
        <member name="T:Alteruna.Multiplayer.VoiceSynchronizable.EncryptionType">
            <summary>
            Encoding types for data compression.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.VoiceSynchronizable.EncryptionType.Bit8">
            <summary>
            Encode samples as 8-bit delta.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.VoiceSynchronizable.EncryptionType.Bit12">
            <summary>
            Encode samples as 12-bit delta.
            </summary>
        </member>
        <member name="F:Alteruna.Multiplayer.VoiceSynchronizable.EncryptionType.Bit16">
            <summary>
            Full depth resolution.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.VoiceSynchronizable.BitDepth">
            <summary>
            Bit depth for audio quality.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.VoiceSynchronizable.IAudioInput">
            <summary>
            Interface for audio input.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.VoiceSynchronizable.IAudioInput.SupportedPlatforms">
            <summary>
            Supported platforms for audio input.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.VoiceSynchronizable.IAudioInput.devices">
            <summary>
              <para>A list of available microphone devices, identified by name.</para>
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.VoiceSynchronizable.IAudioInput.End(System.String)">
            <summary>
              <para>Stops recording.</para>
            </summary>
            <param name="deviceName">The name of the device.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.VoiceSynchronizable.IAudioInput.GetPosition(System.String)">
            <summary>
              <para>Get the position in samples of the recording.</para>
            </summary>
            <param name="deviceName">The name of the device.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.VoiceSynchronizable.IAudioInput.Start(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
              <para>Start Recording with device.</para>
            </summary>
            <param name="deviceName">The name of the device.</param>
            <param name="loop">Indicates whether the recording should continue recording if lengthSec is reached, and wrap around and record from the beginning of the AudioClip.</param>
            <param name="lengthSec">Is the length of the AudioClip produced by the recording.</param>
            <param name="frequency">The sample rate of the AudioClip produced by the recording.</param>
            <returns>
              <para>The function returns null if the recording fails to start.</para>
            </returns>
        </member>
        <member name="T:Alteruna.Multiplayer.VoiceSynchronizable.UnityMicrophone">
            <summary>
            Unity microphone audio input.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.VoiceSynchronizable.UnityMicrophone.SupportedPlatforms">
            <summary>
            Supported platforms for audio input.
            </summary>
        </member>
        <member name="P:Alteruna.Multiplayer.VoiceSynchronizable.UnityMicrophone.devices">
            <summary>
              <para>A list of available microphone devices, identified by name.</para>
            </summary>
        </member>
        <member name="M:Alteruna.Multiplayer.VoiceSynchronizable.UnityMicrophone.End(System.String)">
            <summary>
              <para>Stops recording.</para>
            </summary>
            <param name="deviceName">The name of the device.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.VoiceSynchronizable.UnityMicrophone.GetPosition(System.String)">
            <summary>
              <para>Get the position in samples of the recording.</para>
            </summary>
            <param name="deviceName">The name of the device.</param>
        </member>
        <member name="M:Alteruna.Multiplayer.VoiceSynchronizable.UnityMicrophone.Start(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
              <para>Start Recording with device.</para>
            </summary>
            <param name="deviceName">The name of the device.</param>
            <param name="loop">Indicates whether the recording should continue recording if lengthSec is reached, and wrap around and record from the beginning of the AudioClip.</param>
            <param name="lengthSec">Is the length of the AudioClip produced by the recording.</param>
            <param name="frequency">The sample rate of the AudioClip produced by the recording.</param>
            <returns>
              <para>The function returns null if the recording fails to start.</para>
            </returns>
        </member>
        <member name="T:Alteruna.Multiplayer.VoiceSynchronizable.SupportedPlatforms">
            <summary>
            Supported platforms for audio input.
            </summary>
        </member>
        <member name="T:Alteruna.Multiplayer.UnityLog">
            <summary>
            Class <c>UnityLog</c> is responsible for logging internal messages and events. 
            </summary>
        </member>
        <member name="T:Alteruna.VersionControl">
            <summary>
            Version control.
            </summary>
        </member>
        <member name="F:Alteruna.VersionControl.SERVER_COMPATIBILITY_VERSION">
            <summary>
            Unmanageable compability version. (Kick if server and client don't have the same ServerCompatibilityVersion)
            </summary>
        </member>
        <member name="F:Alteruna.VersionControl.SCHEMA_VERSION">
            <summary>
            Manageable compability version. (Kick if another client has a newer SchemaVersion)
            </summary>
            <remarks>
            When is 0 on server, versions will be set from the first client.
            </remarks>
        </member>
        <member name="F:Alteruna.VersionControl.SDK_REGISTERED">
            <summary>
            Get if SDK is a registration-based build.
            </summary>
        </member>
        <member name="F:Alteruna.VersionControl.CompatibilityVersion">
            <summary>
            Version Management.
            Only clients with the same CompatibilityVersion as a room can join target room.
            </summary>
            <remarks>
            By default, this is the hash of application and Unity version.
            </remarks>
        </member>
        <member name="F:Alteruna.VersionControl.ValidVersion">
            <summary>
            Get if version was read successfully.
            </summary>
        </member>
        <member name="M:Alteruna.VersionControl.IsValidVersion">
            <summary>
            Get version and check if it is valid.
            </summary>
            <returns>True if version is valid.</returns>
        </member>
        <member name="P:Alteruna.VersionControl.Version">
            <summary>
            Get SDK version.
            </summary>
        </member>
        <member name="M:Alteruna.VersionControl.IsNewer(System.String)">
            <summary>
            Check if given version is newer than the current version.
            </summary>
            <param name="version">version string</param>
            <returns>True when given version string is newer than current version</returns>
        </member>
    </members>
</doc>
